
2025_STM32F407_ADC_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b4c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08009cd4  08009cd4  0000acd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cf8  08009cf8  0000b07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009cf8  08009cf8  0000acf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d00  08009d00  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d00  08009d00  0000ad00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009d04  08009d04  0000ad04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08009d08  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b07c  2**0
                  CONTENTS
 10 .bss          00000ad0  2000007c  2000007c  0000b07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b4c  20000b4c  0000b07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016b2b  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d91  00000000  00000000  00021bd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012e8  00000000  00000000  00025968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e6a  00000000  00000000  00026c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024dbf  00000000  00000000  00027aba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a1c2  00000000  00000000  0004c879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8655  00000000  00000000  00066a3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013f090  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000051e4  00000000  00000000  0013f0d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  001442b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009cbc 	.word	0x08009cbc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08009cbc 	.word	0x08009cbc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fd60 	bl	8000fbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f830 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f9c8 	bl	8000894 <MX_GPIO_Init>
  MX_DMA_Init();
 8000504:	f000 f9a6 	bl	8000854 <MX_DMA_Init>
  MX_I2C1_Init();
 8000508:	f000 f910 	bl	800072c <MX_I2C1_Init>
  MX_I2S3_Init();
 800050c:	f000 f93c 	bl	8000788 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000510:	f000 f96a 	bl	80007e8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000514:	f008 ff7c 	bl	8009410 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000518:	f000 f88c 	bl	8000634 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, (uint32_t)*gADC_Values, 4);
 800051c:	4b0d      	ldr	r3, [pc, #52]	@ (8000554 <main+0x60>)
 800051e:	881b      	ldrh	r3, [r3, #0]
 8000520:	2204      	movs	r2, #4
 8000522:	4619      	mov	r1, r3
 8000524:	480c      	ldr	r0, [pc, #48]	@ (8000558 <main+0x64>)
 8000526:	f000 fe23 	bl	8001170 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(gFlag_ADC_Finished == 1){
 800052a:	4b0c      	ldr	r3, [pc, #48]	@ (800055c <main+0x68>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	b2db      	uxtb	r3, r3
 8000530:	2b01      	cmp	r3, #1
 8000532:	d109      	bne.n	8000548 <main+0x54>
		  gFlag_ADC_Finished = 0; //reset flag
 8000534:	4b09      	ldr	r3, [pc, #36]	@ (800055c <main+0x68>)
 8000536:	2200      	movs	r2, #0
 8000538:	701a      	strb	r2, [r3, #0]

		  HAL_ADC_Start_DMA(&hadc1, (uint32_t)*gADC_Values, 4);
 800053a:	4b06      	ldr	r3, [pc, #24]	@ (8000554 <main+0x60>)
 800053c:	881b      	ldrh	r3, [r3, #0]
 800053e:	2204      	movs	r2, #4
 8000540:	4619      	mov	r1, r3
 8000542:	4805      	ldr	r0, [pc, #20]	@ (8000558 <main+0x64>)
 8000544:	f000 fe14 	bl	8001170 <HAL_ADC_Start_DMA>
	  }

	  HAL_Delay(100);
 8000548:	2064      	movs	r0, #100	@ 0x64
 800054a:	f000 fda9 	bl	80010a0 <HAL_Delay>

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800054e:	f008 ff85 	bl	800945c <MX_USB_HOST_Process>
	  if(gFlag_ADC_Finished == 1){
 8000552:	e7ea      	b.n	800052a <main+0x36>
 8000554:	20000234 	.word	0x20000234
 8000558:	20000098 	.word	0x20000098
 800055c:	2000023c 	.word	0x2000023c

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	@ 0x50
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0320 	add.w	r3, r7, #32
 800056a:	2230      	movs	r2, #48	@ 0x30
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f009 fb16 	bl	8009ba0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000584:	2300      	movs	r3, #0
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	4b28      	ldr	r3, [pc, #160]	@ (800062c <SystemClock_Config+0xcc>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800058c:	4a27      	ldr	r2, [pc, #156]	@ (800062c <SystemClock_Config+0xcc>)
 800058e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000592:	6413      	str	r3, [r2, #64]	@ 0x40
 8000594:	4b25      	ldr	r3, [pc, #148]	@ (800062c <SystemClock_Config+0xcc>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000598:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	4b22      	ldr	r3, [pc, #136]	@ (8000630 <SystemClock_Config+0xd0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a21      	ldr	r2, [pc, #132]	@ (8000630 <SystemClock_Config+0xd0>)
 80005aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ae:	6013      	str	r3, [r2, #0]
 80005b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000630 <SystemClock_Config+0xd0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005bc:	2301      	movs	r3, #1
 80005be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c6:	2302      	movs	r3, #2
 80005c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d0:	2308      	movs	r3, #8
 80005d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005d4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005d8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005da:	2302      	movs	r3, #2
 80005dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005de:	2307      	movs	r3, #7
 80005e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e2:	f107 0320 	add.w	r3, r7, #32
 80005e6:	4618      	mov	r0, r3
 80005e8:	f004 fed6 	bl	8005398 <HAL_RCC_OscConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005f2:	f000 fa5d 	bl	8000ab0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f6:	230f      	movs	r3, #15
 80005f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fa:	2302      	movs	r3, #2
 80005fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000602:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000606:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000608:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800060c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800060e:	f107 030c 	add.w	r3, r7, #12
 8000612:	2105      	movs	r1, #5
 8000614:	4618      	mov	r0, r3
 8000616:	f005 f937 	bl	8005888 <HAL_RCC_ClockConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000620:	f000 fa46 	bl	8000ab0 <Error_Handler>
  }
}
 8000624:	bf00      	nop
 8000626:	3750      	adds	r7, #80	@ 0x50
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40023800 	.word	0x40023800
 8000630:	40007000 	.word	0x40007000

08000634 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800063a:	463b      	mov	r3, r7
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000646:	4b36      	ldr	r3, [pc, #216]	@ (8000720 <MX_ADC1_Init+0xec>)
 8000648:	4a36      	ldr	r2, [pc, #216]	@ (8000724 <MX_ADC1_Init+0xf0>)
 800064a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800064c:	4b34      	ldr	r3, [pc, #208]	@ (8000720 <MX_ADC1_Init+0xec>)
 800064e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000652:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000654:	4b32      	ldr	r3, [pc, #200]	@ (8000720 <MX_ADC1_Init+0xec>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800065a:	4b31      	ldr	r3, [pc, #196]	@ (8000720 <MX_ADC1_Init+0xec>)
 800065c:	2201      	movs	r2, #1
 800065e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000660:	4b2f      	ldr	r3, [pc, #188]	@ (8000720 <MX_ADC1_Init+0xec>)
 8000662:	2200      	movs	r2, #0
 8000664:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000666:	4b2e      	ldr	r3, [pc, #184]	@ (8000720 <MX_ADC1_Init+0xec>)
 8000668:	2200      	movs	r2, #0
 800066a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800066e:	4b2c      	ldr	r3, [pc, #176]	@ (8000720 <MX_ADC1_Init+0xec>)
 8000670:	2200      	movs	r2, #0
 8000672:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000674:	4b2a      	ldr	r3, [pc, #168]	@ (8000720 <MX_ADC1_Init+0xec>)
 8000676:	4a2c      	ldr	r2, [pc, #176]	@ (8000728 <MX_ADC1_Init+0xf4>)
 8000678:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800067a:	4b29      	ldr	r3, [pc, #164]	@ (8000720 <MX_ADC1_Init+0xec>)
 800067c:	2200      	movs	r2, #0
 800067e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000680:	4b27      	ldr	r3, [pc, #156]	@ (8000720 <MX_ADC1_Init+0xec>)
 8000682:	2204      	movs	r2, #4
 8000684:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000686:	4b26      	ldr	r3, [pc, #152]	@ (8000720 <MX_ADC1_Init+0xec>)
 8000688:	2200      	movs	r2, #0
 800068a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800068e:	4b24      	ldr	r3, [pc, #144]	@ (8000720 <MX_ADC1_Init+0xec>)
 8000690:	2200      	movs	r2, #0
 8000692:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000694:	4822      	ldr	r0, [pc, #136]	@ (8000720 <MX_ADC1_Init+0xec>)
 8000696:	f000 fd27 	bl	80010e8 <HAL_ADC_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006a0:	f000 fa06 	bl	8000ab0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006a4:	2301      	movs	r3, #1
 80006a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006a8:	2301      	movs	r3, #1
 80006aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80006ac:	2307      	movs	r3, #7
 80006ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	481a      	ldr	r0, [pc, #104]	@ (8000720 <MX_ADC1_Init+0xec>)
 80006b6:	f000 fe7f 	bl	80013b8 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006c0:	f000 f9f6 	bl	8000ab0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4813      	ldr	r0, [pc, #76]	@ (8000720 <MX_ADC1_Init+0xec>)
 80006d2:	f000 fe71 	bl	80013b8 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80006dc:	f000 f9e8 	bl	8000ab0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006e0:	2303      	movs	r3, #3
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80006e4:	2303      	movs	r3, #3
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	480c      	ldr	r0, [pc, #48]	@ (8000720 <MX_ADC1_Init+0xec>)
 80006ee:	f000 fe63 	bl	80013b8 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80006f8:	f000 f9da 	bl	8000ab0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80006fc:	2308      	movs	r3, #8
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000700:	2304      	movs	r3, #4
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	4805      	ldr	r0, [pc, #20]	@ (8000720 <MX_ADC1_Init+0xec>)
 800070a:	f000 fe55 	bl	80013b8 <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000714:	f000 f9cc 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	3710      	adds	r7, #16
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000098 	.word	0x20000098
 8000724:	40012000 	.word	0x40012000
 8000728:	0f000001 	.word	0x0f000001

0800072c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000730:	4b12      	ldr	r3, [pc, #72]	@ (800077c <MX_I2C1_Init+0x50>)
 8000732:	4a13      	ldr	r2, [pc, #76]	@ (8000780 <MX_I2C1_Init+0x54>)
 8000734:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000736:	4b11      	ldr	r3, [pc, #68]	@ (800077c <MX_I2C1_Init+0x50>)
 8000738:	4a12      	ldr	r2, [pc, #72]	@ (8000784 <MX_I2C1_Init+0x58>)
 800073a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800073c:	4b0f      	ldr	r3, [pc, #60]	@ (800077c <MX_I2C1_Init+0x50>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000742:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <MX_I2C1_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000748:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <MX_I2C1_Init+0x50>)
 800074a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800074e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000750:	4b0a      	ldr	r3, [pc, #40]	@ (800077c <MX_I2C1_Init+0x50>)
 8000752:	2200      	movs	r2, #0
 8000754:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000756:	4b09      	ldr	r3, [pc, #36]	@ (800077c <MX_I2C1_Init+0x50>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800075c:	4b07      	ldr	r3, [pc, #28]	@ (800077c <MX_I2C1_Init+0x50>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000762:	4b06      	ldr	r3, [pc, #24]	@ (800077c <MX_I2C1_Init+0x50>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000768:	4804      	ldr	r0, [pc, #16]	@ (800077c <MX_I2C1_Init+0x50>)
 800076a:	f004 f831 	bl	80047d0 <HAL_I2C_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000774:	f000 f99c 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000140 	.word	0x20000140
 8000780:	40005400 	.word	0x40005400
 8000784:	000186a0 	.word	0x000186a0

08000788 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800078c:	4b13      	ldr	r3, [pc, #76]	@ (80007dc <MX_I2S3_Init+0x54>)
 800078e:	4a14      	ldr	r2, [pc, #80]	@ (80007e0 <MX_I2S3_Init+0x58>)
 8000790:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000792:	4b12      	ldr	r3, [pc, #72]	@ (80007dc <MX_I2S3_Init+0x54>)
 8000794:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000798:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800079a:	4b10      	ldr	r3, [pc, #64]	@ (80007dc <MX_I2S3_Init+0x54>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007a0:	4b0e      	ldr	r3, [pc, #56]	@ (80007dc <MX_I2S3_Init+0x54>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007a6:	4b0d      	ldr	r3, [pc, #52]	@ (80007dc <MX_I2S3_Init+0x54>)
 80007a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007ac:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	@ (80007dc <MX_I2S3_Init+0x54>)
 80007b0:	4a0c      	ldr	r2, [pc, #48]	@ (80007e4 <MX_I2S3_Init+0x5c>)
 80007b2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007b4:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <MX_I2S3_Init+0x54>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007ba:	4b08      	ldr	r3, [pc, #32]	@ (80007dc <MX_I2S3_Init+0x54>)
 80007bc:	2200      	movs	r2, #0
 80007be:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <MX_I2S3_Init+0x54>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	@ (80007dc <MX_I2S3_Init+0x54>)
 80007c8:	f004 f946 	bl	8004a58 <HAL_I2S_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007d2:	f000 f96d 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000194 	.word	0x20000194
 80007e0:	40003c00 	.word	0x40003c00
 80007e4:	00017700 	.word	0x00017700

080007e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007ec:	4b17      	ldr	r3, [pc, #92]	@ (800084c <MX_SPI1_Init+0x64>)
 80007ee:	4a18      	ldr	r2, [pc, #96]	@ (8000850 <MX_SPI1_Init+0x68>)
 80007f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007f2:	4b16      	ldr	r3, [pc, #88]	@ (800084c <MX_SPI1_Init+0x64>)
 80007f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007fa:	4b14      	ldr	r3, [pc, #80]	@ (800084c <MX_SPI1_Init+0x64>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000800:	4b12      	ldr	r3, [pc, #72]	@ (800084c <MX_SPI1_Init+0x64>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000806:	4b11      	ldr	r3, [pc, #68]	@ (800084c <MX_SPI1_Init+0x64>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800080c:	4b0f      	ldr	r3, [pc, #60]	@ (800084c <MX_SPI1_Init+0x64>)
 800080e:	2200      	movs	r2, #0
 8000810:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000812:	4b0e      	ldr	r3, [pc, #56]	@ (800084c <MX_SPI1_Init+0x64>)
 8000814:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000818:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800081a:	4b0c      	ldr	r3, [pc, #48]	@ (800084c <MX_SPI1_Init+0x64>)
 800081c:	2200      	movs	r2, #0
 800081e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000820:	4b0a      	ldr	r3, [pc, #40]	@ (800084c <MX_SPI1_Init+0x64>)
 8000822:	2200      	movs	r2, #0
 8000824:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000826:	4b09      	ldr	r3, [pc, #36]	@ (800084c <MX_SPI1_Init+0x64>)
 8000828:	2200      	movs	r2, #0
 800082a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800082c:	4b07      	ldr	r3, [pc, #28]	@ (800084c <MX_SPI1_Init+0x64>)
 800082e:	2200      	movs	r2, #0
 8000830:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000832:	4b06      	ldr	r3, [pc, #24]	@ (800084c <MX_SPI1_Init+0x64>)
 8000834:	220a      	movs	r2, #10
 8000836:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000838:	4804      	ldr	r0, [pc, #16]	@ (800084c <MX_SPI1_Init+0x64>)
 800083a:	f005 fb73 	bl	8005f24 <HAL_SPI_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000844:	f000 f934 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	200001dc 	.word	0x200001dc
 8000850:	40013000 	.word	0x40013000

08000854 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	4b0c      	ldr	r3, [pc, #48]	@ (8000890 <MX_DMA_Init+0x3c>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	4a0b      	ldr	r2, [pc, #44]	@ (8000890 <MX_DMA_Init+0x3c>)
 8000864:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000868:	6313      	str	r3, [r2, #48]	@ 0x30
 800086a:	4b09      	ldr	r3, [pc, #36]	@ (8000890 <MX_DMA_Init+0x3c>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000876:	2200      	movs	r2, #0
 8000878:	2100      	movs	r1, #0
 800087a:	2038      	movs	r0, #56	@ 0x38
 800087c:	f001 f917 	bl	8001aae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000880:	2038      	movs	r0, #56	@ 0x38
 8000882:	f001 f930 	bl	8001ae6 <HAL_NVIC_EnableIRQ>

}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40023800 	.word	0x40023800

08000894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08c      	sub	sp, #48	@ 0x30
 8000898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
 80008a8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	61bb      	str	r3, [r7, #24]
 80008ae:	4b72      	ldr	r3, [pc, #456]	@ (8000a78 <MX_GPIO_Init+0x1e4>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	4a71      	ldr	r2, [pc, #452]	@ (8000a78 <MX_GPIO_Init+0x1e4>)
 80008b4:	f043 0310 	orr.w	r3, r3, #16
 80008b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ba:	4b6f      	ldr	r3, [pc, #444]	@ (8000a78 <MX_GPIO_Init+0x1e4>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	f003 0310 	and.w	r3, r3, #16
 80008c2:	61bb      	str	r3, [r7, #24]
 80008c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
 80008ca:	4b6b      	ldr	r3, [pc, #428]	@ (8000a78 <MX_GPIO_Init+0x1e4>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a6a      	ldr	r2, [pc, #424]	@ (8000a78 <MX_GPIO_Init+0x1e4>)
 80008d0:	f043 0304 	orr.w	r3, r3, #4
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b68      	ldr	r3, [pc, #416]	@ (8000a78 <MX_GPIO_Init+0x1e4>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0304 	and.w	r3, r3, #4
 80008de:	617b      	str	r3, [r7, #20]
 80008e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]
 80008e6:	4b64      	ldr	r3, [pc, #400]	@ (8000a78 <MX_GPIO_Init+0x1e4>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	4a63      	ldr	r2, [pc, #396]	@ (8000a78 <MX_GPIO_Init+0x1e4>)
 80008ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f2:	4b61      	ldr	r3, [pc, #388]	@ (8000a78 <MX_GPIO_Init+0x1e4>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	4b5d      	ldr	r3, [pc, #372]	@ (8000a78 <MX_GPIO_Init+0x1e4>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	4a5c      	ldr	r2, [pc, #368]	@ (8000a78 <MX_GPIO_Init+0x1e4>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6313      	str	r3, [r2, #48]	@ 0x30
 800090e:	4b5a      	ldr	r3, [pc, #360]	@ (8000a78 <MX_GPIO_Init+0x1e4>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	4b56      	ldr	r3, [pc, #344]	@ (8000a78 <MX_GPIO_Init+0x1e4>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	4a55      	ldr	r2, [pc, #340]	@ (8000a78 <MX_GPIO_Init+0x1e4>)
 8000924:	f043 0302 	orr.w	r3, r3, #2
 8000928:	6313      	str	r3, [r2, #48]	@ 0x30
 800092a:	4b53      	ldr	r3, [pc, #332]	@ (8000a78 <MX_GPIO_Init+0x1e4>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	f003 0302 	and.w	r3, r3, #2
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	4b4f      	ldr	r3, [pc, #316]	@ (8000a78 <MX_GPIO_Init+0x1e4>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	4a4e      	ldr	r2, [pc, #312]	@ (8000a78 <MX_GPIO_Init+0x1e4>)
 8000940:	f043 0308 	orr.w	r3, r3, #8
 8000944:	6313      	str	r3, [r2, #48]	@ 0x30
 8000946:	4b4c      	ldr	r3, [pc, #304]	@ (8000a78 <MX_GPIO_Init+0x1e4>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	f003 0308 	and.w	r3, r3, #8
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	2108      	movs	r1, #8
 8000956:	4849      	ldr	r0, [pc, #292]	@ (8000a7c <MX_GPIO_Init+0x1e8>)
 8000958:	f001 fdec 	bl	8002534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800095c:	2201      	movs	r2, #1
 800095e:	2101      	movs	r1, #1
 8000960:	4847      	ldr	r0, [pc, #284]	@ (8000a80 <MX_GPIO_Init+0x1ec>)
 8000962:	f001 fde7 	bl	8002534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000966:	2200      	movs	r2, #0
 8000968:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800096c:	4845      	ldr	r0, [pc, #276]	@ (8000a84 <MX_GPIO_Init+0x1f0>)
 800096e:	f001 fde1 	bl	8002534 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000972:	2308      	movs	r3, #8
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	483c      	ldr	r0, [pc, #240]	@ (8000a7c <MX_GPIO_Init+0x1e8>)
 800098a:	f001 fc37 	bl	80021fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800098e:	2301      	movs	r3, #1
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	4836      	ldr	r0, [pc, #216]	@ (8000a80 <MX_GPIO_Init+0x1ec>)
 80009a6:	f001 fc29 	bl	80021fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009aa:	2308      	movs	r3, #8
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009ba:	2305      	movs	r3, #5
 80009bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	482e      	ldr	r0, [pc, #184]	@ (8000a80 <MX_GPIO_Init+0x1ec>)
 80009c6:	f001 fc19 	bl	80021fc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009ca:	2301      	movs	r3, #1
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ce:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	4619      	mov	r1, r3
 80009de:	482a      	ldr	r0, [pc, #168]	@ (8000a88 <MX_GPIO_Init+0x1f4>)
 80009e0:	f001 fc0c 	bl	80021fc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009e4:	2304      	movs	r3, #4
 80009e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e8:	2300      	movs	r3, #0
 80009ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4619      	mov	r1, r3
 80009f6:	4825      	ldr	r0, [pc, #148]	@ (8000a8c <MX_GPIO_Init+0x1f8>)
 80009f8:	f001 fc00 	bl	80021fc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a02:	2302      	movs	r3, #2
 8000a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a0e:	2305      	movs	r3, #5
 8000a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	4619      	mov	r1, r3
 8000a18:	481c      	ldr	r0, [pc, #112]	@ (8000a8c <MX_GPIO_Init+0x1f8>)
 8000a1a:	f001 fbef 	bl	80021fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a1e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000a22:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a24:	2301      	movs	r3, #1
 8000a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	4619      	mov	r1, r3
 8000a36:	4813      	ldr	r0, [pc, #76]	@ (8000a84 <MX_GPIO_Init+0x1f0>)
 8000a38:	f001 fbe0 	bl	80021fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a3c:	2320      	movs	r3, #32
 8000a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a40:	2300      	movs	r3, #0
 8000a42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a48:	f107 031c 	add.w	r3, r7, #28
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	480d      	ldr	r0, [pc, #52]	@ (8000a84 <MX_GPIO_Init+0x1f0>)
 8000a50:	f001 fbd4 	bl	80021fc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a54:	2302      	movs	r3, #2
 8000a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a58:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	4619      	mov	r1, r3
 8000a68:	4804      	ldr	r0, [pc, #16]	@ (8000a7c <MX_GPIO_Init+0x1e8>)
 8000a6a:	f001 fbc7 	bl	80021fc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a6e:	bf00      	nop
 8000a70:	3730      	adds	r7, #48	@ 0x30
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	40020800 	.word	0x40020800
 8000a84:	40020c00 	.word	0x40020c00
 8000a88:	40020000 	.word	0x40020000
 8000a8c:	40020400 	.word	0x40020400

08000a90 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	gFlag_ADC_Finished = 1;
 8000a98:	4b04      	ldr	r3, [pc, #16]	@ (8000aac <HAL_ADC_ConvCpltCallback+0x1c>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	701a      	strb	r2, [r3, #0]
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	2000023c 	.word	0x2000023c

08000ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab4:	b672      	cpsid	i
}
 8000ab6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <Error_Handler+0x8>

08000abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	4b10      	ldr	r3, [pc, #64]	@ (8000b08 <HAL_MspInit+0x4c>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aca:	4a0f      	ldr	r2, [pc, #60]	@ (8000b08 <HAL_MspInit+0x4c>)
 8000acc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ad0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8000b08 <HAL_MspInit+0x4c>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ad6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	603b      	str	r3, [r7, #0]
 8000ae2:	4b09      	ldr	r3, [pc, #36]	@ (8000b08 <HAL_MspInit+0x4c>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae6:	4a08      	ldr	r2, [pc, #32]	@ (8000b08 <HAL_MspInit+0x4c>)
 8000ae8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aee:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <HAL_MspInit+0x4c>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000afa:	2007      	movs	r0, #7
 8000afc:	f000 ffcc 	bl	8001a98 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b00:	bf00      	nop
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40023800 	.word	0x40023800

08000b0c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	@ 0x28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a3b      	ldr	r2, [pc, #236]	@ (8000c18 <HAL_ADC_MspInit+0x10c>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d170      	bne.n	8000c10 <HAL_ADC_MspInit+0x104>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	4b3a      	ldr	r3, [pc, #232]	@ (8000c1c <HAL_ADC_MspInit+0x110>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b36:	4a39      	ldr	r2, [pc, #228]	@ (8000c1c <HAL_ADC_MspInit+0x110>)
 8000b38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b3e:	4b37      	ldr	r3, [pc, #220]	@ (8000c1c <HAL_ADC_MspInit+0x110>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	4b33      	ldr	r3, [pc, #204]	@ (8000c1c <HAL_ADC_MspInit+0x110>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	4a32      	ldr	r2, [pc, #200]	@ (8000c1c <HAL_ADC_MspInit+0x110>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5a:	4b30      	ldr	r3, [pc, #192]	@ (8000c1c <HAL_ADC_MspInit+0x110>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	4b2c      	ldr	r3, [pc, #176]	@ (8000c1c <HAL_ADC_MspInit+0x110>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	4a2b      	ldr	r2, [pc, #172]	@ (8000c1c <HAL_ADC_MspInit+0x110>)
 8000b70:	f043 0302 	orr.w	r3, r3, #2
 8000b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b76:	4b29      	ldr	r3, [pc, #164]	@ (8000c1c <HAL_ADC_MspInit+0x110>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	f003 0302 	and.w	r3, r3, #2
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000b82:	230e      	movs	r3, #14
 8000b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b86:	2303      	movs	r3, #3
 8000b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4619      	mov	r1, r3
 8000b94:	4822      	ldr	r0, [pc, #136]	@ (8000c20 <HAL_ADC_MspInit+0x114>)
 8000b96:	f001 fb31 	bl	80021fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	481d      	ldr	r0, [pc, #116]	@ (8000c24 <HAL_ADC_MspInit+0x118>)
 8000bae:	f001 fb25 	bl	80021fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000bb2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c28 <HAL_ADC_MspInit+0x11c>)
 8000bb4:	4a1d      	ldr	r2, [pc, #116]	@ (8000c2c <HAL_ADC_MspInit+0x120>)
 8000bb6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c28 <HAL_ADC_MspInit+0x11c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bbe:	4b1a      	ldr	r3, [pc, #104]	@ (8000c28 <HAL_ADC_MspInit+0x11c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bc4:	4b18      	ldr	r3, [pc, #96]	@ (8000c28 <HAL_ADC_MspInit+0x11c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bca:	4b17      	ldr	r3, [pc, #92]	@ (8000c28 <HAL_ADC_MspInit+0x11c>)
 8000bcc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bd0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bd2:	4b15      	ldr	r3, [pc, #84]	@ (8000c28 <HAL_ADC_MspInit+0x11c>)
 8000bd4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000bd8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bda:	4b13      	ldr	r3, [pc, #76]	@ (8000c28 <HAL_ADC_MspInit+0x11c>)
 8000bdc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000be0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000be2:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <HAL_ADC_MspInit+0x11c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c28 <HAL_ADC_MspInit+0x11c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	@ (8000c28 <HAL_ADC_MspInit+0x11c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bf4:	480c      	ldr	r0, [pc, #48]	@ (8000c28 <HAL_ADC_MspInit+0x11c>)
 8000bf6:	f000 ff91 	bl	8001b1c <HAL_DMA_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8000c00:	f7ff ff56 	bl	8000ab0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4a08      	ldr	r2, [pc, #32]	@ (8000c28 <HAL_ADC_MspInit+0x11c>)
 8000c08:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c0a:	4a07      	ldr	r2, [pc, #28]	@ (8000c28 <HAL_ADC_MspInit+0x11c>)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c10:	bf00      	nop
 8000c12:	3728      	adds	r7, #40	@ 0x28
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40012000 	.word	0x40012000
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40020000 	.word	0x40020000
 8000c24:	40020400 	.word	0x40020400
 8000c28:	200000e0 	.word	0x200000e0
 8000c2c:	40026410 	.word	0x40026410

08000c30 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	@ 0x28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a19      	ldr	r2, [pc, #100]	@ (8000cb4 <HAL_I2C_MspInit+0x84>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d12c      	bne.n	8000cac <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	4b18      	ldr	r3, [pc, #96]	@ (8000cb8 <HAL_I2C_MspInit+0x88>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	4a17      	ldr	r2, [pc, #92]	@ (8000cb8 <HAL_I2C_MspInit+0x88>)
 8000c5c:	f043 0302 	orr.w	r3, r3, #2
 8000c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c62:	4b15      	ldr	r3, [pc, #84]	@ (8000cb8 <HAL_I2C_MspInit+0x88>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	f003 0302 	and.w	r3, r3, #2
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c6e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c74:	2312      	movs	r3, #18
 8000c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c80:	2304      	movs	r3, #4
 8000c82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	4619      	mov	r1, r3
 8000c8a:	480c      	ldr	r0, [pc, #48]	@ (8000cbc <HAL_I2C_MspInit+0x8c>)
 8000c8c:	f001 fab6 	bl	80021fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	4b08      	ldr	r3, [pc, #32]	@ (8000cb8 <HAL_I2C_MspInit+0x88>)
 8000c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c98:	4a07      	ldr	r2, [pc, #28]	@ (8000cb8 <HAL_I2C_MspInit+0x88>)
 8000c9a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ca0:	4b05      	ldr	r3, [pc, #20]	@ (8000cb8 <HAL_I2C_MspInit+0x88>)
 8000ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000cac:	bf00      	nop
 8000cae:	3728      	adds	r7, #40	@ 0x28
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40005400 	.word	0x40005400
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40020400 	.word	0x40020400

08000cc0 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08e      	sub	sp, #56	@ 0x38
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a31      	ldr	r2, [pc, #196]	@ (8000db0 <HAL_I2S_MspInit+0xf0>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d15a      	bne.n	8000da6 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000cf4:	23c0      	movs	r3, #192	@ 0xc0
 8000cf6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	4618      	mov	r0, r3
 8000d02:	f004 ffcd 	bl	8005ca0 <HAL_RCCEx_PeriphCLKConfig>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000d0c:	f7ff fed0 	bl	8000ab0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d10:	2300      	movs	r3, #0
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	4b27      	ldr	r3, [pc, #156]	@ (8000db4 <HAL_I2S_MspInit+0xf4>)
 8000d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d18:	4a26      	ldr	r2, [pc, #152]	@ (8000db4 <HAL_I2S_MspInit+0xf4>)
 8000d1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d20:	4b24      	ldr	r3, [pc, #144]	@ (8000db4 <HAL_I2S_MspInit+0xf4>)
 8000d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	4b20      	ldr	r3, [pc, #128]	@ (8000db4 <HAL_I2S_MspInit+0xf4>)
 8000d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d34:	4a1f      	ldr	r2, [pc, #124]	@ (8000db4 <HAL_I2S_MspInit+0xf4>)
 8000d36:	f043 0301 	orr.w	r3, r3, #1
 8000d3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000db4 <HAL_I2S_MspInit+0xf4>)
 8000d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d40:	f003 0301 	and.w	r3, r3, #1
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60bb      	str	r3, [r7, #8]
 8000d4c:	4b19      	ldr	r3, [pc, #100]	@ (8000db4 <HAL_I2S_MspInit+0xf4>)
 8000d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d50:	4a18      	ldr	r2, [pc, #96]	@ (8000db4 <HAL_I2S_MspInit+0xf4>)
 8000d52:	f043 0304 	orr.w	r3, r3, #4
 8000d56:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d58:	4b16      	ldr	r3, [pc, #88]	@ (8000db4 <HAL_I2S_MspInit+0xf4>)
 8000d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5c:	f003 0304 	and.w	r3, r3, #4
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d64:	2310      	movs	r3, #16
 8000d66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2300      	movs	r3, #0
 8000d72:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d74:	2306      	movs	r3, #6
 8000d76:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	480e      	ldr	r0, [pc, #56]	@ (8000db8 <HAL_I2S_MspInit+0xf8>)
 8000d80:	f001 fa3c 	bl	80021fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d84:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000d88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2300      	movs	r3, #0
 8000d94:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d96:	2306      	movs	r3, #6
 8000d98:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4806      	ldr	r0, [pc, #24]	@ (8000dbc <HAL_I2S_MspInit+0xfc>)
 8000da2:	f001 fa2b 	bl	80021fc <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000da6:	bf00      	nop
 8000da8:	3738      	adds	r7, #56	@ 0x38
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40003c00 	.word	0x40003c00
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40020000 	.word	0x40020000
 8000dbc:	40020800 	.word	0x40020800

08000dc0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	@ 0x28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a19      	ldr	r2, [pc, #100]	@ (8000e44 <HAL_SPI_MspInit+0x84>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d12b      	bne.n	8000e3a <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	4b18      	ldr	r3, [pc, #96]	@ (8000e48 <HAL_SPI_MspInit+0x88>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dea:	4a17      	ldr	r2, [pc, #92]	@ (8000e48 <HAL_SPI_MspInit+0x88>)
 8000dec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000df0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000df2:	4b15      	ldr	r3, [pc, #84]	@ (8000e48 <HAL_SPI_MspInit+0x88>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	4b11      	ldr	r3, [pc, #68]	@ (8000e48 <HAL_SPI_MspInit+0x88>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	4a10      	ldr	r2, [pc, #64]	@ (8000e48 <HAL_SPI_MspInit+0x88>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e48 <HAL_SPI_MspInit+0x88>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e1a:	23e0      	movs	r3, #224	@ 0xe0
 8000e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	2300      	movs	r3, #0
 8000e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e2a:	2305      	movs	r3, #5
 8000e2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	4805      	ldr	r0, [pc, #20]	@ (8000e4c <HAL_SPI_MspInit+0x8c>)
 8000e36:	f001 f9e1 	bl	80021fc <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000e3a:	bf00      	nop
 8000e3c:	3728      	adds	r7, #40	@ 0x28
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40013000 	.word	0x40013000
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40020000 	.word	0x40020000

08000e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e54:	bf00      	nop
 8000e56:	e7fd      	b.n	8000e54 <NMI_Handler+0x4>

08000e58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <HardFault_Handler+0x4>

08000e60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e64:	bf00      	nop
 8000e66:	e7fd      	b.n	8000e64 <MemManage_Handler+0x4>

08000e68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <BusFault_Handler+0x4>

08000e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <UsageFault_Handler+0x4>

08000e78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea6:	f000 f8db 	bl	8001060 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
	...

08000eb0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000eb4:	4802      	ldr	r0, [pc, #8]	@ (8000ec0 <DMA2_Stream0_IRQHandler+0x10>)
 8000eb6:	f000 ff37 	bl	8001d28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	200000e0 	.word	0x200000e0

08000ec4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ec8:	4802      	ldr	r0, [pc, #8]	@ (8000ed4 <OTG_FS_IRQHandler+0x10>)
 8000eca:	f001 fe2d 	bl	8002b28 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000624 	.word	0x20000624

08000ed8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ee0:	4a14      	ldr	r2, [pc, #80]	@ (8000f34 <_sbrk+0x5c>)
 8000ee2:	4b15      	ldr	r3, [pc, #84]	@ (8000f38 <_sbrk+0x60>)
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eec:	4b13      	ldr	r3, [pc, #76]	@ (8000f3c <_sbrk+0x64>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d102      	bne.n	8000efa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ef4:	4b11      	ldr	r3, [pc, #68]	@ (8000f3c <_sbrk+0x64>)
 8000ef6:	4a12      	ldr	r2, [pc, #72]	@ (8000f40 <_sbrk+0x68>)
 8000ef8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000efa:	4b10      	ldr	r3, [pc, #64]	@ (8000f3c <_sbrk+0x64>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4413      	add	r3, r2
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d207      	bcs.n	8000f18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f08:	f008 fe62 	bl	8009bd0 <__errno>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	220c      	movs	r2, #12
 8000f10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f16:	e009      	b.n	8000f2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f18:	4b08      	ldr	r3, [pc, #32]	@ (8000f3c <_sbrk+0x64>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f1e:	4b07      	ldr	r3, [pc, #28]	@ (8000f3c <_sbrk+0x64>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	4a05      	ldr	r2, [pc, #20]	@ (8000f3c <_sbrk+0x64>)
 8000f28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3718      	adds	r7, #24
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20020000 	.word	0x20020000
 8000f38:	00000400 	.word	0x00000400
 8000f3c:	20000240 	.word	0x20000240
 8000f40:	20000b50 	.word	0x20000b50

08000f44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f48:	4b06      	ldr	r3, [pc, #24]	@ (8000f64 <SystemInit+0x20>)
 8000f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f4e:	4a05      	ldr	r2, [pc, #20]	@ (8000f64 <SystemInit+0x20>)
 8000f50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fa0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f6c:	f7ff ffea 	bl	8000f44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f70:	480c      	ldr	r0, [pc, #48]	@ (8000fa4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f72:	490d      	ldr	r1, [pc, #52]	@ (8000fa8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f74:	4a0d      	ldr	r2, [pc, #52]	@ (8000fac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f78:	e002      	b.n	8000f80 <LoopCopyDataInit>

08000f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7e:	3304      	adds	r3, #4

08000f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f84:	d3f9      	bcc.n	8000f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f86:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f88:	4c0a      	ldr	r4, [pc, #40]	@ (8000fb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f8c:	e001      	b.n	8000f92 <LoopFillZerobss>

08000f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f90:	3204      	adds	r2, #4

08000f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f94:	d3fb      	bcc.n	8000f8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f96:	f008 fe21 	bl	8009bdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f9a:	f7ff faab 	bl	80004f4 <main>
  bx  lr    
 8000f9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fa0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000fac:	08009d08 	.word	0x08009d08
  ldr r2, =_sbss
 8000fb0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000fb4:	20000b4c 	.word	0x20000b4c

08000fb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fb8:	e7fe      	b.n	8000fb8 <ADC_IRQHandler>
	...

08000fbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000ffc <HAL_Init+0x40>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000ffc <HAL_Init+0x40>)
 8000fc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000ffc <HAL_Init+0x40>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a0a      	ldr	r2, [pc, #40]	@ (8000ffc <HAL_Init+0x40>)
 8000fd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd8:	4b08      	ldr	r3, [pc, #32]	@ (8000ffc <HAL_Init+0x40>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a07      	ldr	r2, [pc, #28]	@ (8000ffc <HAL_Init+0x40>)
 8000fde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fe2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe4:	2003      	movs	r0, #3
 8000fe6:	f000 fd57 	bl	8001a98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fea:	2000      	movs	r0, #0
 8000fec:	f000 f808 	bl	8001000 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff0:	f7ff fd64 	bl	8000abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40023c00 	.word	0x40023c00

08001000 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001008:	4b12      	ldr	r3, [pc, #72]	@ (8001054 <HAL_InitTick+0x54>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	4b12      	ldr	r3, [pc, #72]	@ (8001058 <HAL_InitTick+0x58>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	4619      	mov	r1, r3
 8001012:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001016:	fbb3 f3f1 	udiv	r3, r3, r1
 800101a:	fbb2 f3f3 	udiv	r3, r2, r3
 800101e:	4618      	mov	r0, r3
 8001020:	f000 fd6f 	bl	8001b02 <HAL_SYSTICK_Config>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e00e      	b.n	800104c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2b0f      	cmp	r3, #15
 8001032:	d80a      	bhi.n	800104a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001034:	2200      	movs	r2, #0
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800103c:	f000 fd37 	bl	8001aae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001040:	4a06      	ldr	r2, [pc, #24]	@ (800105c <HAL_InitTick+0x5c>)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001046:	2300      	movs	r3, #0
 8001048:	e000      	b.n	800104c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
}
 800104c:	4618      	mov	r0, r3
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000000 	.word	0x20000000
 8001058:	20000008 	.word	0x20000008
 800105c:	20000004 	.word	0x20000004

08001060 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001064:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <HAL_IncTick+0x20>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	461a      	mov	r2, r3
 800106a:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <HAL_IncTick+0x24>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4413      	add	r3, r2
 8001070:	4a04      	ldr	r2, [pc, #16]	@ (8001084 <HAL_IncTick+0x24>)
 8001072:	6013      	str	r3, [r2, #0]
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	20000008 	.word	0x20000008
 8001084:	20000244 	.word	0x20000244

08001088 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return uwTick;
 800108c:	4b03      	ldr	r3, [pc, #12]	@ (800109c <HAL_GetTick+0x14>)
 800108e:	681b      	ldr	r3, [r3, #0]
}
 8001090:	4618      	mov	r0, r3
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	20000244 	.word	0x20000244

080010a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a8:	f7ff ffee 	bl	8001088 <HAL_GetTick>
 80010ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80010b8:	d005      	beq.n	80010c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ba:	4b0a      	ldr	r3, [pc, #40]	@ (80010e4 <HAL_Delay+0x44>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	461a      	mov	r2, r3
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4413      	add	r3, r2
 80010c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010c6:	bf00      	nop
 80010c8:	f7ff ffde 	bl	8001088 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d8f7      	bhi.n	80010c8 <HAL_Delay+0x28>
  {
  }
}
 80010d8:	bf00      	nop
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000008 	.word	0x20000008

080010e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010f0:	2300      	movs	r3, #0
 80010f2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d101      	bne.n	80010fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e033      	b.n	8001166 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001102:	2b00      	cmp	r3, #0
 8001104:	d109      	bne.n	800111a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff fd00 	bl	8000b0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111e:	f003 0310 	and.w	r3, r3, #16
 8001122:	2b00      	cmp	r3, #0
 8001124:	d118      	bne.n	8001158 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800112e:	f023 0302 	bic.w	r3, r3, #2
 8001132:	f043 0202 	orr.w	r2, r3, #2
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f000 fa5e 	bl	80015fc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114a:	f023 0303 	bic.w	r3, r3, #3
 800114e:	f043 0201 	orr.w	r2, r3, #1
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	641a      	str	r2, [r3, #64]	@ 0x40
 8001156:	e001      	b.n	800115c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001164:	7bfb      	ldrb	r3, [r7, #15]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800117c:	2300      	movs	r3, #0
 800117e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001186:	2b01      	cmp	r3, #1
 8001188:	d101      	bne.n	800118e <HAL_ADC_Start_DMA+0x1e>
 800118a:	2302      	movs	r3, #2
 800118c:	e0e9      	b.n	8001362 <HAL_ADC_Start_DMA+0x1f2>
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2201      	movs	r2, #1
 8001192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d018      	beq.n	80011d6 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	689a      	ldr	r2, [r3, #8]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f042 0201 	orr.w	r2, r2, #1
 80011b2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011b4:	4b6d      	ldr	r3, [pc, #436]	@ (800136c <HAL_ADC_Start_DMA+0x1fc>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a6d      	ldr	r2, [pc, #436]	@ (8001370 <HAL_ADC_Start_DMA+0x200>)
 80011ba:	fba2 2303 	umull	r2, r3, r2, r3
 80011be:	0c9a      	lsrs	r2, r3, #18
 80011c0:	4613      	mov	r3, r2
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	4413      	add	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80011c8:	e002      	b.n	80011d0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	3b01      	subs	r3, #1
 80011ce:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d1f9      	bne.n	80011ca <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80011e4:	d107      	bne.n	80011f6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	689a      	ldr	r2, [r3, #8]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80011f4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	2b01      	cmp	r3, #1
 8001202:	f040 80a1 	bne.w	8001348 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800120e:	f023 0301 	bic.w	r3, r3, #1
 8001212:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001224:	2b00      	cmp	r3, #0
 8001226:	d007      	beq.n	8001238 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001230:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001240:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001244:	d106      	bne.n	8001254 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800124a:	f023 0206 	bic.w	r2, r3, #6
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	645a      	str	r2, [r3, #68]	@ 0x44
 8001252:	e002      	b.n	800125a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2200      	movs	r2, #0
 8001258:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2200      	movs	r2, #0
 800125e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001262:	4b44      	ldr	r3, [pc, #272]	@ (8001374 <HAL_ADC_Start_DMA+0x204>)
 8001264:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800126a:	4a43      	ldr	r2, [pc, #268]	@ (8001378 <HAL_ADC_Start_DMA+0x208>)
 800126c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001272:	4a42      	ldr	r2, [pc, #264]	@ (800137c <HAL_ADC_Start_DMA+0x20c>)
 8001274:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800127a:	4a41      	ldr	r2, [pc, #260]	@ (8001380 <HAL_ADC_Start_DMA+0x210>)
 800127c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001286:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	685a      	ldr	r2, [r3, #4]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001296:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	689a      	ldr	r2, [r3, #8]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80012a6:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	334c      	adds	r3, #76	@ 0x4c
 80012b2:	4619      	mov	r1, r3
 80012b4:	68ba      	ldr	r2, [r7, #8]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f000 fcde 	bl	8001c78 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f003 031f 	and.w	r3, r3, #31
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d12a      	bne.n	800131e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a2d      	ldr	r2, [pc, #180]	@ (8001384 <HAL_ADC_Start_DMA+0x214>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d015      	beq.n	80012fe <HAL_ADC_Start_DMA+0x18e>
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a2c      	ldr	r2, [pc, #176]	@ (8001388 <HAL_ADC_Start_DMA+0x218>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d105      	bne.n	80012e8 <HAL_ADC_Start_DMA+0x178>
 80012dc:	4b25      	ldr	r3, [pc, #148]	@ (8001374 <HAL_ADC_Start_DMA+0x204>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 031f 	and.w	r3, r3, #31
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d00a      	beq.n	80012fe <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a27      	ldr	r2, [pc, #156]	@ (800138c <HAL_ADC_Start_DMA+0x21c>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d136      	bne.n	8001360 <HAL_ADC_Start_DMA+0x1f0>
 80012f2:	4b20      	ldr	r3, [pc, #128]	@ (8001374 <HAL_ADC_Start_DMA+0x204>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f003 0310 	and.w	r3, r3, #16
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d130      	bne.n	8001360 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d129      	bne.n	8001360 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	689a      	ldr	r2, [r3, #8]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	e020      	b.n	8001360 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a18      	ldr	r2, [pc, #96]	@ (8001384 <HAL_ADC_Start_DMA+0x214>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d11b      	bne.n	8001360 <HAL_ADC_Start_DMA+0x1f0>
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d114      	bne.n	8001360 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	e00b      	b.n	8001360 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134c:	f043 0210 	orr.w	r2, r3, #16
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001358:	f043 0201 	orr.w	r2, r3, #1
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000000 	.word	0x20000000
 8001370:	431bde83 	.word	0x431bde83
 8001374:	40012300 	.word	0x40012300
 8001378:	080017f5 	.word	0x080017f5
 800137c:	080018af 	.word	0x080018af
 8001380:	080018cb 	.word	0x080018cb
 8001384:	40012000 	.word	0x40012000
 8001388:	40012100 	.word	0x40012100
 800138c:	40012200 	.word	0x40012200

08001390 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013c2:	2300      	movs	r3, #0
 80013c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d101      	bne.n	80013d4 <HAL_ADC_ConfigChannel+0x1c>
 80013d0:	2302      	movs	r3, #2
 80013d2:	e105      	b.n	80015e0 <HAL_ADC_ConfigChannel+0x228>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b09      	cmp	r3, #9
 80013e2:	d925      	bls.n	8001430 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	68d9      	ldr	r1, [r3, #12]
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	461a      	mov	r2, r3
 80013f2:	4613      	mov	r3, r2
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	4413      	add	r3, r2
 80013f8:	3b1e      	subs	r3, #30
 80013fa:	2207      	movs	r2, #7
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43da      	mvns	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	400a      	ands	r2, r1
 8001408:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	68d9      	ldr	r1, [r3, #12]
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	689a      	ldr	r2, [r3, #8]
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	b29b      	uxth	r3, r3
 800141a:	4618      	mov	r0, r3
 800141c:	4603      	mov	r3, r0
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	4403      	add	r3, r0
 8001422:	3b1e      	subs	r3, #30
 8001424:	409a      	lsls	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	430a      	orrs	r2, r1
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	e022      	b.n	8001476 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6919      	ldr	r1, [r3, #16]
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	b29b      	uxth	r3, r3
 800143c:	461a      	mov	r2, r3
 800143e:	4613      	mov	r3, r2
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	4413      	add	r3, r2
 8001444:	2207      	movs	r2, #7
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43da      	mvns	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	400a      	ands	r2, r1
 8001452:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6919      	ldr	r1, [r3, #16]
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	b29b      	uxth	r3, r3
 8001464:	4618      	mov	r0, r3
 8001466:	4603      	mov	r3, r0
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4403      	add	r3, r0
 800146c:	409a      	lsls	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	430a      	orrs	r2, r1
 8001474:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b06      	cmp	r3, #6
 800147c:	d824      	bhi.n	80014c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	4613      	mov	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4413      	add	r3, r2
 800148e:	3b05      	subs	r3, #5
 8001490:	221f      	movs	r2, #31
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43da      	mvns	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	400a      	ands	r2, r1
 800149e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	4618      	mov	r0, r3
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685a      	ldr	r2, [r3, #4]
 80014b2:	4613      	mov	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	3b05      	subs	r3, #5
 80014ba:	fa00 f203 	lsl.w	r2, r0, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	430a      	orrs	r2, r1
 80014c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80014c6:	e04c      	b.n	8001562 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	2b0c      	cmp	r3, #12
 80014ce:	d824      	bhi.n	800151a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685a      	ldr	r2, [r3, #4]
 80014da:	4613      	mov	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	4413      	add	r3, r2
 80014e0:	3b23      	subs	r3, #35	@ 0x23
 80014e2:	221f      	movs	r2, #31
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43da      	mvns	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	400a      	ands	r2, r1
 80014f0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	4618      	mov	r0, r3
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	4613      	mov	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	3b23      	subs	r3, #35	@ 0x23
 800150c:	fa00 f203 	lsl.w	r2, r0, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	430a      	orrs	r2, r1
 8001516:	631a      	str	r2, [r3, #48]	@ 0x30
 8001518:	e023      	b.n	8001562 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685a      	ldr	r2, [r3, #4]
 8001524:	4613      	mov	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	3b41      	subs	r3, #65	@ 0x41
 800152c:	221f      	movs	r2, #31
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43da      	mvns	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	400a      	ands	r2, r1
 800153a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	b29b      	uxth	r3, r3
 8001548:	4618      	mov	r0, r3
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685a      	ldr	r2, [r3, #4]
 800154e:	4613      	mov	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	3b41      	subs	r3, #65	@ 0x41
 8001556:	fa00 f203 	lsl.w	r2, r0, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	430a      	orrs	r2, r1
 8001560:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001562:	4b22      	ldr	r3, [pc, #136]	@ (80015ec <HAL_ADC_ConfigChannel+0x234>)
 8001564:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a21      	ldr	r2, [pc, #132]	@ (80015f0 <HAL_ADC_ConfigChannel+0x238>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d109      	bne.n	8001584 <HAL_ADC_ConfigChannel+0x1cc>
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b12      	cmp	r3, #18
 8001576:	d105      	bne.n	8001584 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a19      	ldr	r2, [pc, #100]	@ (80015f0 <HAL_ADC_ConfigChannel+0x238>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d123      	bne.n	80015d6 <HAL_ADC_ConfigChannel+0x21e>
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2b10      	cmp	r3, #16
 8001594:	d003      	beq.n	800159e <HAL_ADC_ConfigChannel+0x1e6>
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b11      	cmp	r3, #17
 800159c:	d11b      	bne.n	80015d6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2b10      	cmp	r3, #16
 80015b0:	d111      	bne.n	80015d6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015b2:	4b10      	ldr	r3, [pc, #64]	@ (80015f4 <HAL_ADC_ConfigChannel+0x23c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a10      	ldr	r2, [pc, #64]	@ (80015f8 <HAL_ADC_ConfigChannel+0x240>)
 80015b8:	fba2 2303 	umull	r2, r3, r2, r3
 80015bc:	0c9a      	lsrs	r2, r3, #18
 80015be:	4613      	mov	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80015c8:	e002      	b.n	80015d0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	3b01      	subs	r3, #1
 80015ce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1f9      	bne.n	80015ca <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	40012300 	.word	0x40012300
 80015f0:	40012000 	.word	0x40012000
 80015f4:	20000000 	.word	0x20000000
 80015f8:	431bde83 	.word	0x431bde83

080015fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001604:	4b79      	ldr	r3, [pc, #484]	@ (80017ec <ADC_Init+0x1f0>)
 8001606:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	685a      	ldr	r2, [r3, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	431a      	orrs	r2, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	685a      	ldr	r2, [r3, #4]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001630:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6859      	ldr	r1, [r3, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	021a      	lsls	r2, r3, #8
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	430a      	orrs	r2, r1
 8001644:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	685a      	ldr	r2, [r3, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001654:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6859      	ldr	r1, [r3, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	430a      	orrs	r2, r1
 8001666:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001676:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6899      	ldr	r1, [r3, #8]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	68da      	ldr	r2, [r3, #12]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	430a      	orrs	r2, r1
 8001688:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800168e:	4a58      	ldr	r2, [pc, #352]	@ (80017f0 <ADC_Init+0x1f4>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d022      	beq.n	80016da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	689a      	ldr	r2, [r3, #8]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80016a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6899      	ldr	r1, [r3, #8]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	430a      	orrs	r2, r1
 80016b4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80016c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6899      	ldr	r1, [r3, #8]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	430a      	orrs	r2, r1
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	e00f      	b.n	80016fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80016e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80016f8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 0202 	bic.w	r2, r2, #2
 8001708:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6899      	ldr	r1, [r3, #8]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	7e1b      	ldrb	r3, [r3, #24]
 8001714:	005a      	lsls	r2, r3, #1
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	430a      	orrs	r2, r1
 800171c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d01b      	beq.n	8001760 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001736:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001746:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6859      	ldr	r1, [r3, #4]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001752:	3b01      	subs	r3, #1
 8001754:	035a      	lsls	r2, r3, #13
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	430a      	orrs	r2, r1
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	e007      	b.n	8001770 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	685a      	ldr	r2, [r3, #4]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800176e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800177e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	3b01      	subs	r3, #1
 800178c:	051a      	lsls	r2, r3, #20
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	430a      	orrs	r2, r1
 8001794:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80017a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	6899      	ldr	r1, [r3, #8]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80017b2:	025a      	lsls	r2, r3, #9
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	430a      	orrs	r2, r1
 80017ba:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	689a      	ldr	r2, [r3, #8]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80017ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6899      	ldr	r1, [r3, #8]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	695b      	ldr	r3, [r3, #20]
 80017d6:	029a      	lsls	r2, r3, #10
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	430a      	orrs	r2, r1
 80017de:	609a      	str	r2, [r3, #8]
}
 80017e0:	bf00      	nop
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	40012300 	.word	0x40012300
 80017f0:	0f000001 	.word	0x0f000001

080017f4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001800:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001806:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800180a:	2b00      	cmp	r3, #0
 800180c:	d13c      	bne.n	8001888 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001812:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d12b      	bne.n	8001880 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800182c:	2b00      	cmp	r3, #0
 800182e:	d127      	bne.n	8001880 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001836:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800183a:	2b00      	cmp	r3, #0
 800183c:	d006      	beq.n	800184c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001848:	2b00      	cmp	r3, #0
 800184a:	d119      	bne.n	8001880 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	685a      	ldr	r2, [r3, #4]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f022 0220 	bic.w	r2, r2, #32
 800185a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001860:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d105      	bne.n	8001880 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001878:	f043 0201 	orr.w	r2, r3, #1
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001880:	68f8      	ldr	r0, [r7, #12]
 8001882:	f7ff f905 	bl	8000a90 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001886:	e00e      	b.n	80018a6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188c:	f003 0310 	and.w	r3, r3, #16
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001894:	68f8      	ldr	r0, [r7, #12]
 8001896:	f7ff fd85 	bl	80013a4 <HAL_ADC_ErrorCallback>
}
 800189a:	e004      	b.n	80018a6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	4798      	blx	r3
}
 80018a6:	bf00      	nop
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b084      	sub	sp, #16
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018ba:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	f7ff fd67 	bl	8001390 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b084      	sub	sp, #16
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018d6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2240      	movs	r2, #64	@ 0x40
 80018dc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e2:	f043 0204 	orr.w	r2, r3, #4
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80018ea:	68f8      	ldr	r0, [r7, #12]
 80018ec:	f7ff fd5a 	bl	80013a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018f0:	bf00      	nop
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001908:	4b0c      	ldr	r3, [pc, #48]	@ (800193c <__NVIC_SetPriorityGrouping+0x44>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800190e:	68ba      	ldr	r2, [r7, #8]
 8001910:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001914:	4013      	ands	r3, r2
 8001916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001920:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001924:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800192a:	4a04      	ldr	r2, [pc, #16]	@ (800193c <__NVIC_SetPriorityGrouping+0x44>)
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	60d3      	str	r3, [r2, #12]
}
 8001930:	bf00      	nop
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001944:	4b04      	ldr	r3, [pc, #16]	@ (8001958 <__NVIC_GetPriorityGrouping+0x18>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	0a1b      	lsrs	r3, r3, #8
 800194a:	f003 0307 	and.w	r3, r3, #7
}
 800194e:	4618      	mov	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196a:	2b00      	cmp	r3, #0
 800196c:	db0b      	blt.n	8001986 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	f003 021f 	and.w	r2, r3, #31
 8001974:	4907      	ldr	r1, [pc, #28]	@ (8001994 <__NVIC_EnableIRQ+0x38>)
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	095b      	lsrs	r3, r3, #5
 800197c:	2001      	movs	r0, #1
 800197e:	fa00 f202 	lsl.w	r2, r0, r2
 8001982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	e000e100 	.word	0xe000e100

08001998 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	6039      	str	r1, [r7, #0]
 80019a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	db0a      	blt.n	80019c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	490c      	ldr	r1, [pc, #48]	@ (80019e4 <__NVIC_SetPriority+0x4c>)
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	0112      	lsls	r2, r2, #4
 80019b8:	b2d2      	uxtb	r2, r2
 80019ba:	440b      	add	r3, r1
 80019bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c0:	e00a      	b.n	80019d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	4908      	ldr	r1, [pc, #32]	@ (80019e8 <__NVIC_SetPriority+0x50>)
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	f003 030f 	and.w	r3, r3, #15
 80019ce:	3b04      	subs	r3, #4
 80019d0:	0112      	lsls	r2, r2, #4
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	440b      	add	r3, r1
 80019d6:	761a      	strb	r2, [r3, #24]
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	e000e100 	.word	0xe000e100
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b089      	sub	sp, #36	@ 0x24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f1c3 0307 	rsb	r3, r3, #7
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	bf28      	it	cs
 8001a0a:	2304      	movcs	r3, #4
 8001a0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	3304      	adds	r3, #4
 8001a12:	2b06      	cmp	r3, #6
 8001a14:	d902      	bls.n	8001a1c <NVIC_EncodePriority+0x30>
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3b03      	subs	r3, #3
 8001a1a:	e000      	b.n	8001a1e <NVIC_EncodePriority+0x32>
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43da      	mvns	r2, r3
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	401a      	ands	r2, r3
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a34:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3e:	43d9      	mvns	r1, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a44:	4313      	orrs	r3, r2
         );
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3724      	adds	r7, #36	@ 0x24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
	...

08001a54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a64:	d301      	bcc.n	8001a6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a66:	2301      	movs	r3, #1
 8001a68:	e00f      	b.n	8001a8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a94 <SysTick_Config+0x40>)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a72:	210f      	movs	r1, #15
 8001a74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a78:	f7ff ff8e 	bl	8001998 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a7c:	4b05      	ldr	r3, [pc, #20]	@ (8001a94 <SysTick_Config+0x40>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a82:	4b04      	ldr	r3, [pc, #16]	@ (8001a94 <SysTick_Config+0x40>)
 8001a84:	2207      	movs	r2, #7
 8001a86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	e000e010 	.word	0xe000e010

08001a98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff ff29 	bl	80018f8 <__NVIC_SetPriorityGrouping>
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b086      	sub	sp, #24
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
 8001aba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac0:	f7ff ff3e 	bl	8001940 <__NVIC_GetPriorityGrouping>
 8001ac4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	68b9      	ldr	r1, [r7, #8]
 8001aca:	6978      	ldr	r0, [r7, #20]
 8001acc:	f7ff ff8e 	bl	80019ec <NVIC_EncodePriority>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ff5d 	bl	8001998 <__NVIC_SetPriority>
}
 8001ade:	bf00      	nop
 8001ae0:	3718      	adds	r7, #24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	4603      	mov	r3, r0
 8001aee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff ff31 	bl	800195c <__NVIC_EnableIRQ>
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff ffa2 	bl	8001a54 <SysTick_Config>
 8001b10:	4603      	mov	r3, r0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b28:	f7ff faae 	bl	8001088 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e099      	b.n	8001c6c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f022 0201 	bic.w	r2, r2, #1
 8001b56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b58:	e00f      	b.n	8001b7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b5a:	f7ff fa95 	bl	8001088 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b05      	cmp	r3, #5
 8001b66:	d908      	bls.n	8001b7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2203      	movs	r2, #3
 8001b72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e078      	b.n	8001c6c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1e8      	bne.n	8001b5a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b90:	697a      	ldr	r2, [r7, #20]
 8001b92:	4b38      	ldr	r3, [pc, #224]	@ (8001c74 <HAL_DMA_Init+0x158>)
 8001b94:	4013      	ands	r3, r2
 8001b96:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ba6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	d107      	bne.n	8001be4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	697a      	ldr	r2, [r7, #20]
 8001bea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	f023 0307 	bic.w	r3, r3, #7
 8001bfa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c00:	697a      	ldr	r2, [r7, #20]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	d117      	bne.n	8001c3e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c12:	697a      	ldr	r2, [r7, #20]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d00e      	beq.n	8001c3e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 fa6f 	bl	8002104 <DMA_CheckFifoParam>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d008      	beq.n	8001c3e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2240      	movs	r2, #64	@ 0x40
 8001c30:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e016      	b.n	8001c6c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 fa26 	bl	8002098 <DMA_CalcBaseAndBitshift>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c54:	223f      	movs	r2, #63	@ 0x3f
 8001c56:	409a      	lsls	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2201      	movs	r2, #1
 8001c66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	f010803f 	.word	0xf010803f

08001c78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
 8001c84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c86:	2300      	movs	r3, #0
 8001c88:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c8e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d101      	bne.n	8001c9e <HAL_DMA_Start_IT+0x26>
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	e040      	b.n	8001d20 <HAL_DMA_Start_IT+0xa8>
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d12f      	bne.n	8001d12 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	68b9      	ldr	r1, [r7, #8]
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	f000 f9b8 	bl	800203c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cd0:	223f      	movs	r2, #63	@ 0x3f
 8001cd2:	409a      	lsls	r2, r3
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f042 0216 	orr.w	r2, r2, #22
 8001ce6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d007      	beq.n	8001d00 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f042 0208 	orr.w	r2, r2, #8
 8001cfe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f042 0201 	orr.w	r2, r2, #1
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	e005      	b.n	8001d1e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d34:	4b8e      	ldr	r3, [pc, #568]	@ (8001f70 <HAL_DMA_IRQHandler+0x248>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a8e      	ldr	r2, [pc, #568]	@ (8001f74 <HAL_DMA_IRQHandler+0x24c>)
 8001d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3e:	0a9b      	lsrs	r3, r3, #10
 8001d40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d52:	2208      	movs	r2, #8
 8001d54:	409a      	lsls	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d01a      	beq.n	8001d94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d013      	beq.n	8001d94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 0204 	bic.w	r2, r2, #4
 8001d7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d80:	2208      	movs	r2, #8
 8001d82:	409a      	lsls	r2, r3
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d8c:	f043 0201 	orr.w	r2, r3, #1
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d98:	2201      	movs	r2, #1
 8001d9a:	409a      	lsls	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d012      	beq.n	8001dca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00b      	beq.n	8001dca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001db6:	2201      	movs	r2, #1
 8001db8:	409a      	lsls	r2, r3
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dc2:	f043 0202 	orr.w	r2, r3, #2
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dce:	2204      	movs	r2, #4
 8001dd0:	409a      	lsls	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d012      	beq.n	8001e00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00b      	beq.n	8001e00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dec:	2204      	movs	r2, #4
 8001dee:	409a      	lsls	r2, r3
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df8:	f043 0204 	orr.w	r2, r3, #4
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e04:	2210      	movs	r2, #16
 8001e06:	409a      	lsls	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d043      	beq.n	8001e98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d03c      	beq.n	8001e98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e22:	2210      	movs	r2, #16
 8001e24:	409a      	lsls	r2, r3
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d018      	beq.n	8001e6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d108      	bne.n	8001e58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d024      	beq.n	8001e98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	4798      	blx	r3
 8001e56:	e01f      	b.n	8001e98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d01b      	beq.n	8001e98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	4798      	blx	r3
 8001e68:	e016      	b.n	8001e98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d107      	bne.n	8001e88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f022 0208 	bic.w	r2, r2, #8
 8001e86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e9c:	2220      	movs	r2, #32
 8001e9e:	409a      	lsls	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 808f 	beq.w	8001fc8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0310 	and.w	r3, r3, #16
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 8087 	beq.w	8001fc8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ebe:	2220      	movs	r2, #32
 8001ec0:	409a      	lsls	r2, r3
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b05      	cmp	r3, #5
 8001ed0:	d136      	bne.n	8001f40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 0216 	bic.w	r2, r2, #22
 8001ee0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	695a      	ldr	r2, [r3, #20]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ef0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d103      	bne.n	8001f02 <HAL_DMA_IRQHandler+0x1da>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d007      	beq.n	8001f12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 0208 	bic.w	r2, r2, #8
 8001f10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f16:	223f      	movs	r2, #63	@ 0x3f
 8001f18:	409a      	lsls	r2, r3
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d07e      	beq.n	8002034 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	4798      	blx	r3
        }
        return;
 8001f3e:	e079      	b.n	8002034 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d01d      	beq.n	8001f8a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d10d      	bne.n	8001f78 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d031      	beq.n	8001fc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	4798      	blx	r3
 8001f6c:	e02c      	b.n	8001fc8 <HAL_DMA_IRQHandler+0x2a0>
 8001f6e:	bf00      	nop
 8001f70:	20000000 	.word	0x20000000
 8001f74:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d023      	beq.n	8001fc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	4798      	blx	r3
 8001f88:	e01e      	b.n	8001fc8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10f      	bne.n	8001fb8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0210 	bic.w	r2, r2, #16
 8001fa6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d032      	beq.n	8002036 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d022      	beq.n	8002022 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2205      	movs	r2, #5
 8001fe0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0201 	bic.w	r2, r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	60bb      	str	r3, [r7, #8]
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d307      	bcc.n	8002010 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1f2      	bne.n	8001ff4 <HAL_DMA_IRQHandler+0x2cc>
 800200e:	e000      	b.n	8002012 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002010:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002026:	2b00      	cmp	r3, #0
 8002028:	d005      	beq.n	8002036 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	4798      	blx	r3
 8002032:	e000      	b.n	8002036 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002034:	bf00      	nop
    }
  }
}
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
 8002048:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002058:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	2b40      	cmp	r3, #64	@ 0x40
 8002068:	d108      	bne.n	800207c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68ba      	ldr	r2, [r7, #8]
 8002078:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800207a:	e007      	b.n	800208c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68ba      	ldr	r2, [r7, #8]
 8002082:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	60da      	str	r2, [r3, #12]
}
 800208c:	bf00      	nop
 800208e:	3714      	adds	r7, #20
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	3b10      	subs	r3, #16
 80020a8:	4a14      	ldr	r2, [pc, #80]	@ (80020fc <DMA_CalcBaseAndBitshift+0x64>)
 80020aa:	fba2 2303 	umull	r2, r3, r2, r3
 80020ae:	091b      	lsrs	r3, r3, #4
 80020b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020b2:	4a13      	ldr	r2, [pc, #76]	@ (8002100 <DMA_CalcBaseAndBitshift+0x68>)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4413      	add	r3, r2
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	461a      	mov	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2b03      	cmp	r3, #3
 80020c4:	d909      	bls.n	80020da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80020ce:	f023 0303 	bic.w	r3, r3, #3
 80020d2:	1d1a      	adds	r2, r3, #4
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	659a      	str	r2, [r3, #88]	@ 0x58
 80020d8:	e007      	b.n	80020ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80020e2:	f023 0303 	bic.w	r3, r3, #3
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	aaaaaaab 	.word	0xaaaaaaab
 8002100:	08009cf0 	.word	0x08009cf0

08002104 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800210c:	2300      	movs	r3, #0
 800210e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002114:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d11f      	bne.n	800215e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	2b03      	cmp	r3, #3
 8002122:	d856      	bhi.n	80021d2 <DMA_CheckFifoParam+0xce>
 8002124:	a201      	add	r2, pc, #4	@ (adr r2, 800212c <DMA_CheckFifoParam+0x28>)
 8002126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800212a:	bf00      	nop
 800212c:	0800213d 	.word	0x0800213d
 8002130:	0800214f 	.word	0x0800214f
 8002134:	0800213d 	.word	0x0800213d
 8002138:	080021d3 	.word	0x080021d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002140:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d046      	beq.n	80021d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800214c:	e043      	b.n	80021d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002152:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002156:	d140      	bne.n	80021da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800215c:	e03d      	b.n	80021da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002166:	d121      	bne.n	80021ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	2b03      	cmp	r3, #3
 800216c:	d837      	bhi.n	80021de <DMA_CheckFifoParam+0xda>
 800216e:	a201      	add	r2, pc, #4	@ (adr r2, 8002174 <DMA_CheckFifoParam+0x70>)
 8002170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002174:	08002185 	.word	0x08002185
 8002178:	0800218b 	.word	0x0800218b
 800217c:	08002185 	.word	0x08002185
 8002180:	0800219d 	.word	0x0800219d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	73fb      	strb	r3, [r7, #15]
      break;
 8002188:	e030      	b.n	80021ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800218e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d025      	beq.n	80021e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800219a:	e022      	b.n	80021e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80021a4:	d11f      	bne.n	80021e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021aa:	e01c      	b.n	80021e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d903      	bls.n	80021ba <DMA_CheckFifoParam+0xb6>
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	2b03      	cmp	r3, #3
 80021b6:	d003      	beq.n	80021c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021b8:	e018      	b.n	80021ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	73fb      	strb	r3, [r7, #15]
      break;
 80021be:	e015      	b.n	80021ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00e      	beq.n	80021ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	73fb      	strb	r3, [r7, #15]
      break;
 80021d0:	e00b      	b.n	80021ea <DMA_CheckFifoParam+0xe6>
      break;
 80021d2:	bf00      	nop
 80021d4:	e00a      	b.n	80021ec <DMA_CheckFifoParam+0xe8>
      break;
 80021d6:	bf00      	nop
 80021d8:	e008      	b.n	80021ec <DMA_CheckFifoParam+0xe8>
      break;
 80021da:	bf00      	nop
 80021dc:	e006      	b.n	80021ec <DMA_CheckFifoParam+0xe8>
      break;
 80021de:	bf00      	nop
 80021e0:	e004      	b.n	80021ec <DMA_CheckFifoParam+0xe8>
      break;
 80021e2:	bf00      	nop
 80021e4:	e002      	b.n	80021ec <DMA_CheckFifoParam+0xe8>
      break;   
 80021e6:	bf00      	nop
 80021e8:	e000      	b.n	80021ec <DMA_CheckFifoParam+0xe8>
      break;
 80021ea:	bf00      	nop
    }
  } 
  
  return status; 
 80021ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop

080021fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b089      	sub	sp, #36	@ 0x24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800220a:	2300      	movs	r3, #0
 800220c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800220e:	2300      	movs	r3, #0
 8002210:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002212:	2300      	movs	r3, #0
 8002214:	61fb      	str	r3, [r7, #28]
 8002216:	e16b      	b.n	80024f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002218:	2201      	movs	r2, #1
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	4013      	ands	r3, r2
 800222a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	429a      	cmp	r2, r3
 8002232:	f040 815a 	bne.w	80024ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	2b01      	cmp	r3, #1
 8002240:	d005      	beq.n	800224e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800224a:	2b02      	cmp	r3, #2
 800224c:	d130      	bne.n	80022b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	2203      	movs	r2, #3
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43db      	mvns	r3, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4013      	ands	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	68da      	ldr	r2, [r3, #12]
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4313      	orrs	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002284:	2201      	movs	r2, #1
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	43db      	mvns	r3, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4013      	ands	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	091b      	lsrs	r3, r3, #4
 800229a:	f003 0201 	and.w	r2, r3, #1
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f003 0303 	and.w	r3, r3, #3
 80022b8:	2b03      	cmp	r3, #3
 80022ba:	d017      	beq.n	80022ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	2203      	movs	r2, #3
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 0303 	and.w	r3, r3, #3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d123      	bne.n	8002340 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	08da      	lsrs	r2, r3, #3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3208      	adds	r2, #8
 8002300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002304:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	220f      	movs	r2, #15
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	43db      	mvns	r3, r3
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4013      	ands	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	691a      	ldr	r2, [r3, #16]
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4313      	orrs	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	08da      	lsrs	r2, r3, #3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3208      	adds	r2, #8
 800233a:	69b9      	ldr	r1, [r7, #24]
 800233c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	2203      	movs	r2, #3
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 0203 	and.w	r2, r3, #3
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 80b4 	beq.w	80024ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	4b60      	ldr	r3, [pc, #384]	@ (8002508 <HAL_GPIO_Init+0x30c>)
 8002388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800238a:	4a5f      	ldr	r2, [pc, #380]	@ (8002508 <HAL_GPIO_Init+0x30c>)
 800238c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002390:	6453      	str	r3, [r2, #68]	@ 0x44
 8002392:	4b5d      	ldr	r3, [pc, #372]	@ (8002508 <HAL_GPIO_Init+0x30c>)
 8002394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002396:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800239e:	4a5b      	ldr	r2, [pc, #364]	@ (800250c <HAL_GPIO_Init+0x310>)
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	089b      	lsrs	r3, r3, #2
 80023a4:	3302      	adds	r3, #2
 80023a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f003 0303 	and.w	r3, r3, #3
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	220f      	movs	r2, #15
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43db      	mvns	r3, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4013      	ands	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a52      	ldr	r2, [pc, #328]	@ (8002510 <HAL_GPIO_Init+0x314>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d02b      	beq.n	8002422 <HAL_GPIO_Init+0x226>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a51      	ldr	r2, [pc, #324]	@ (8002514 <HAL_GPIO_Init+0x318>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d025      	beq.n	800241e <HAL_GPIO_Init+0x222>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a50      	ldr	r2, [pc, #320]	@ (8002518 <HAL_GPIO_Init+0x31c>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d01f      	beq.n	800241a <HAL_GPIO_Init+0x21e>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a4f      	ldr	r2, [pc, #316]	@ (800251c <HAL_GPIO_Init+0x320>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d019      	beq.n	8002416 <HAL_GPIO_Init+0x21a>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a4e      	ldr	r2, [pc, #312]	@ (8002520 <HAL_GPIO_Init+0x324>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d013      	beq.n	8002412 <HAL_GPIO_Init+0x216>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a4d      	ldr	r2, [pc, #308]	@ (8002524 <HAL_GPIO_Init+0x328>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d00d      	beq.n	800240e <HAL_GPIO_Init+0x212>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a4c      	ldr	r2, [pc, #304]	@ (8002528 <HAL_GPIO_Init+0x32c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d007      	beq.n	800240a <HAL_GPIO_Init+0x20e>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a4b      	ldr	r2, [pc, #300]	@ (800252c <HAL_GPIO_Init+0x330>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d101      	bne.n	8002406 <HAL_GPIO_Init+0x20a>
 8002402:	2307      	movs	r3, #7
 8002404:	e00e      	b.n	8002424 <HAL_GPIO_Init+0x228>
 8002406:	2308      	movs	r3, #8
 8002408:	e00c      	b.n	8002424 <HAL_GPIO_Init+0x228>
 800240a:	2306      	movs	r3, #6
 800240c:	e00a      	b.n	8002424 <HAL_GPIO_Init+0x228>
 800240e:	2305      	movs	r3, #5
 8002410:	e008      	b.n	8002424 <HAL_GPIO_Init+0x228>
 8002412:	2304      	movs	r3, #4
 8002414:	e006      	b.n	8002424 <HAL_GPIO_Init+0x228>
 8002416:	2303      	movs	r3, #3
 8002418:	e004      	b.n	8002424 <HAL_GPIO_Init+0x228>
 800241a:	2302      	movs	r3, #2
 800241c:	e002      	b.n	8002424 <HAL_GPIO_Init+0x228>
 800241e:	2301      	movs	r3, #1
 8002420:	e000      	b.n	8002424 <HAL_GPIO_Init+0x228>
 8002422:	2300      	movs	r3, #0
 8002424:	69fa      	ldr	r2, [r7, #28]
 8002426:	f002 0203 	and.w	r2, r2, #3
 800242a:	0092      	lsls	r2, r2, #2
 800242c:	4093      	lsls	r3, r2
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4313      	orrs	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002434:	4935      	ldr	r1, [pc, #212]	@ (800250c <HAL_GPIO_Init+0x310>)
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	089b      	lsrs	r3, r3, #2
 800243a:	3302      	adds	r3, #2
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002442:	4b3b      	ldr	r3, [pc, #236]	@ (8002530 <HAL_GPIO_Init+0x334>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	43db      	mvns	r3, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4013      	ands	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	4313      	orrs	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002466:	4a32      	ldr	r2, [pc, #200]	@ (8002530 <HAL_GPIO_Init+0x334>)
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800246c:	4b30      	ldr	r3, [pc, #192]	@ (8002530 <HAL_GPIO_Init+0x334>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	43db      	mvns	r3, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	4313      	orrs	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002490:	4a27      	ldr	r2, [pc, #156]	@ (8002530 <HAL_GPIO_Init+0x334>)
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002496:	4b26      	ldr	r3, [pc, #152]	@ (8002530 <HAL_GPIO_Init+0x334>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	43db      	mvns	r3, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4013      	ands	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024ba:	4a1d      	ldr	r2, [pc, #116]	@ (8002530 <HAL_GPIO_Init+0x334>)
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002530 <HAL_GPIO_Init+0x334>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	43db      	mvns	r3, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4013      	ands	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024e4:	4a12      	ldr	r2, [pc, #72]	@ (8002530 <HAL_GPIO_Init+0x334>)
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	3301      	adds	r3, #1
 80024ee:	61fb      	str	r3, [r7, #28]
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	2b0f      	cmp	r3, #15
 80024f4:	f67f ae90 	bls.w	8002218 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024f8:	bf00      	nop
 80024fa:	bf00      	nop
 80024fc:	3724      	adds	r7, #36	@ 0x24
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	40023800 	.word	0x40023800
 800250c:	40013800 	.word	0x40013800
 8002510:	40020000 	.word	0x40020000
 8002514:	40020400 	.word	0x40020400
 8002518:	40020800 	.word	0x40020800
 800251c:	40020c00 	.word	0x40020c00
 8002520:	40021000 	.word	0x40021000
 8002524:	40021400 	.word	0x40021400
 8002528:	40021800 	.word	0x40021800
 800252c:	40021c00 	.word	0x40021c00
 8002530:	40013c00 	.word	0x40013c00

08002534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	460b      	mov	r3, r1
 800253e:	807b      	strh	r3, [r7, #2]
 8002540:	4613      	mov	r3, r2
 8002542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002544:	787b      	ldrb	r3, [r7, #1]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800254a:	887a      	ldrh	r2, [r7, #2]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002550:	e003      	b.n	800255a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002552:	887b      	ldrh	r3, [r7, #2]
 8002554:	041a      	lsls	r2, r3, #16
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	619a      	str	r2, [r3, #24]
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b086      	sub	sp, #24
 800256a:	af02      	add	r7, sp, #8
 800256c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e059      	b.n	800262c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d106      	bne.n	8002598 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f006 ff9a 	bl	80094cc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2203      	movs	r2, #3
 800259c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025a6:	d102      	bne.n	80025ae <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f003 fdb4 	bl	8006120 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6818      	ldr	r0, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	7c1a      	ldrb	r2, [r3, #16]
 80025c0:	f88d 2000 	strb.w	r2, [sp]
 80025c4:	3304      	adds	r3, #4
 80025c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025c8:	f003 fd35 	bl	8006036 <USB_CoreInit>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d005      	beq.n	80025de <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2202      	movs	r2, #2
 80025d6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e026      	b.n	800262c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2101      	movs	r1, #1
 80025e4:	4618      	mov	r0, r3
 80025e6:	f003 fdac 	bl	8006142 <USB_SetCurrentMode>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d005      	beq.n	80025fc <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2202      	movs	r2, #2
 80025f4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e017      	b.n	800262c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6818      	ldr	r0, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	7c1a      	ldrb	r2, [r3, #16]
 8002604:	f88d 2000 	strb.w	r2, [sp]
 8002608:	3304      	adds	r3, #4
 800260a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800260c:	f003 ff4e 	bl	80064ac <USB_HostInit>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d005      	beq.n	8002622 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2202      	movs	r2, #2
 800261a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e004      	b.n	800262c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002634:	b590      	push	{r4, r7, lr}
 8002636:	b08b      	sub	sp, #44	@ 0x2c
 8002638:	af04      	add	r7, sp, #16
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	4608      	mov	r0, r1
 800263e:	4611      	mov	r1, r2
 8002640:	461a      	mov	r2, r3
 8002642:	4603      	mov	r3, r0
 8002644:	70fb      	strb	r3, [r7, #3]
 8002646:	460b      	mov	r3, r1
 8002648:	70bb      	strb	r3, [r7, #2]
 800264a:	4613      	mov	r3, r2
 800264c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800264e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002650:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002658:	2b01      	cmp	r3, #1
 800265a:	d101      	bne.n	8002660 <HAL_HCD_HC_Init+0x2c>
 800265c:	2302      	movs	r3, #2
 800265e:	e09d      	b.n	800279c <HAL_HCD_HC_Init+0x168>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002668:	78fa      	ldrb	r2, [r7, #3]
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	4613      	mov	r3, r2
 800266e:	011b      	lsls	r3, r3, #4
 8002670:	1a9b      	subs	r3, r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	440b      	add	r3, r1
 8002676:	3319      	adds	r3, #25
 8002678:	2200      	movs	r2, #0
 800267a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800267c:	78fa      	ldrb	r2, [r7, #3]
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	4613      	mov	r3, r2
 8002682:	011b      	lsls	r3, r3, #4
 8002684:	1a9b      	subs	r3, r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	440b      	add	r3, r1
 800268a:	3314      	adds	r3, #20
 800268c:	787a      	ldrb	r2, [r7, #1]
 800268e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002690:	78fa      	ldrb	r2, [r7, #3]
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	4613      	mov	r3, r2
 8002696:	011b      	lsls	r3, r3, #4
 8002698:	1a9b      	subs	r3, r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	440b      	add	r3, r1
 800269e:	3315      	adds	r3, #21
 80026a0:	78fa      	ldrb	r2, [r7, #3]
 80026a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80026a4:	78fa      	ldrb	r2, [r7, #3]
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	4613      	mov	r3, r2
 80026aa:	011b      	lsls	r3, r3, #4
 80026ac:	1a9b      	subs	r3, r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	3326      	adds	r3, #38	@ 0x26
 80026b4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80026b8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80026ba:	78fa      	ldrb	r2, [r7, #3]
 80026bc:	78bb      	ldrb	r3, [r7, #2]
 80026be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80026c2:	b2d8      	uxtb	r0, r3
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	4613      	mov	r3, r2
 80026c8:	011b      	lsls	r3, r3, #4
 80026ca:	1a9b      	subs	r3, r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	440b      	add	r3, r1
 80026d0:	3316      	adds	r3, #22
 80026d2:	4602      	mov	r2, r0
 80026d4:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80026d6:	78fb      	ldrb	r3, [r7, #3]
 80026d8:	4619      	mov	r1, r3
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 fbc8 	bl	8002e70 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80026e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	da0a      	bge.n	80026fe <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80026e8:	78fa      	ldrb	r2, [r7, #3]
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	4613      	mov	r3, r2
 80026ee:	011b      	lsls	r3, r3, #4
 80026f0:	1a9b      	subs	r3, r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	440b      	add	r3, r1
 80026f6:	3317      	adds	r3, #23
 80026f8:	2201      	movs	r2, #1
 80026fa:	701a      	strb	r2, [r3, #0]
 80026fc:	e009      	b.n	8002712 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80026fe:	78fa      	ldrb	r2, [r7, #3]
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	4613      	mov	r3, r2
 8002704:	011b      	lsls	r3, r3, #4
 8002706:	1a9b      	subs	r3, r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	440b      	add	r3, r1
 800270c:	3317      	adds	r3, #23
 800270e:	2200      	movs	r2, #0
 8002710:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f004 f82c 	bl	8006774 <USB_GetHostSpeed>
 800271c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800271e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002722:	2b01      	cmp	r3, #1
 8002724:	d10b      	bne.n	800273e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002726:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800272a:	2b01      	cmp	r3, #1
 800272c:	d107      	bne.n	800273e <HAL_HCD_HC_Init+0x10a>
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d104      	bne.n	800273e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	2bbc      	cmp	r3, #188	@ 0xbc
 8002738:	d901      	bls.n	800273e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800273a:	23bc      	movs	r3, #188	@ 0xbc
 800273c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800273e:	78fa      	ldrb	r2, [r7, #3]
 8002740:	6879      	ldr	r1, [r7, #4]
 8002742:	4613      	mov	r3, r2
 8002744:	011b      	lsls	r3, r3, #4
 8002746:	1a9b      	subs	r3, r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	440b      	add	r3, r1
 800274c:	3318      	adds	r3, #24
 800274e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002752:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002754:	78fa      	ldrb	r2, [r7, #3]
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	b298      	uxth	r0, r3
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	4613      	mov	r3, r2
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	1a9b      	subs	r3, r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	3328      	adds	r3, #40	@ 0x28
 8002768:	4602      	mov	r2, r0
 800276a:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6818      	ldr	r0, [r3, #0]
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	b29b      	uxth	r3, r3
 8002774:	787c      	ldrb	r4, [r7, #1]
 8002776:	78ba      	ldrb	r2, [r7, #2]
 8002778:	78f9      	ldrb	r1, [r7, #3]
 800277a:	9302      	str	r3, [sp, #8]
 800277c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002780:	9301      	str	r3, [sp, #4]
 8002782:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	4623      	mov	r3, r4
 800278a:	f004 f81b 	bl	80067c4 <USB_HC_Init>
 800278e:	4603      	mov	r3, r0
 8002790:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800279a:	7bfb      	ldrb	r3, [r7, #15]
}
 800279c:	4618      	mov	r0, r3
 800279e:	371c      	adds	r7, #28
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd90      	pop	{r4, r7, pc}

080027a4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	460b      	mov	r3, r1
 80027ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80027b0:	2300      	movs	r3, #0
 80027b2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d101      	bne.n	80027c2 <HAL_HCD_HC_Halt+0x1e>
 80027be:	2302      	movs	r3, #2
 80027c0:	e00f      	b.n	80027e2 <HAL_HCD_HC_Halt+0x3e>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	78fa      	ldrb	r2, [r7, #3]
 80027d0:	4611      	mov	r1, r2
 80027d2:	4618      	mov	r0, r3
 80027d4:	f004 fbad 	bl	8006f32 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80027e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
	...

080027ec <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	4608      	mov	r0, r1
 80027f6:	4611      	mov	r1, r2
 80027f8:	461a      	mov	r2, r3
 80027fa:	4603      	mov	r3, r0
 80027fc:	70fb      	strb	r3, [r7, #3]
 80027fe:	460b      	mov	r3, r1
 8002800:	70bb      	strb	r3, [r7, #2]
 8002802:	4613      	mov	r3, r2
 8002804:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002806:	78fa      	ldrb	r2, [r7, #3]
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	4613      	mov	r3, r2
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	1a9b      	subs	r3, r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	440b      	add	r3, r1
 8002814:	3317      	adds	r3, #23
 8002816:	78ba      	ldrb	r2, [r7, #2]
 8002818:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800281a:	78fa      	ldrb	r2, [r7, #3]
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	4613      	mov	r3, r2
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	1a9b      	subs	r3, r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	440b      	add	r3, r1
 8002828:	3326      	adds	r3, #38	@ 0x26
 800282a:	787a      	ldrb	r2, [r7, #1]
 800282c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800282e:	7c3b      	ldrb	r3, [r7, #16]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d114      	bne.n	800285e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002834:	78fa      	ldrb	r2, [r7, #3]
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	4613      	mov	r3, r2
 800283a:	011b      	lsls	r3, r3, #4
 800283c:	1a9b      	subs	r3, r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	440b      	add	r3, r1
 8002842:	332a      	adds	r3, #42	@ 0x2a
 8002844:	2203      	movs	r2, #3
 8002846:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002848:	78fa      	ldrb	r2, [r7, #3]
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	4613      	mov	r3, r2
 800284e:	011b      	lsls	r3, r3, #4
 8002850:	1a9b      	subs	r3, r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	440b      	add	r3, r1
 8002856:	3319      	adds	r3, #25
 8002858:	7f3a      	ldrb	r2, [r7, #28]
 800285a:	701a      	strb	r2, [r3, #0]
 800285c:	e009      	b.n	8002872 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800285e:	78fa      	ldrb	r2, [r7, #3]
 8002860:	6879      	ldr	r1, [r7, #4]
 8002862:	4613      	mov	r3, r2
 8002864:	011b      	lsls	r3, r3, #4
 8002866:	1a9b      	subs	r3, r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	440b      	add	r3, r1
 800286c:	332a      	adds	r3, #42	@ 0x2a
 800286e:	2202      	movs	r2, #2
 8002870:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002872:	787b      	ldrb	r3, [r7, #1]
 8002874:	2b03      	cmp	r3, #3
 8002876:	f200 8102 	bhi.w	8002a7e <HAL_HCD_HC_SubmitRequest+0x292>
 800287a:	a201      	add	r2, pc, #4	@ (adr r2, 8002880 <HAL_HCD_HC_SubmitRequest+0x94>)
 800287c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002880:	08002891 	.word	0x08002891
 8002884:	08002a69 	.word	0x08002a69
 8002888:	08002955 	.word	0x08002955
 800288c:	080029df 	.word	0x080029df
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002890:	7c3b      	ldrb	r3, [r7, #16]
 8002892:	2b01      	cmp	r3, #1
 8002894:	f040 80f5 	bne.w	8002a82 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002898:	78bb      	ldrb	r3, [r7, #2]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d12d      	bne.n	80028fa <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800289e:	8b3b      	ldrh	r3, [r7, #24]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d109      	bne.n	80028b8 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80028a4:	78fa      	ldrb	r2, [r7, #3]
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	4613      	mov	r3, r2
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	1a9b      	subs	r3, r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	333d      	adds	r3, #61	@ 0x3d
 80028b4:	2201      	movs	r2, #1
 80028b6:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80028b8:	78fa      	ldrb	r2, [r7, #3]
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	4613      	mov	r3, r2
 80028be:	011b      	lsls	r3, r3, #4
 80028c0:	1a9b      	subs	r3, r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	440b      	add	r3, r1
 80028c6:	333d      	adds	r3, #61	@ 0x3d
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10a      	bne.n	80028e4 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028ce:	78fa      	ldrb	r2, [r7, #3]
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	011b      	lsls	r3, r3, #4
 80028d6:	1a9b      	subs	r3, r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	440b      	add	r3, r1
 80028dc:	332a      	adds	r3, #42	@ 0x2a
 80028de:	2200      	movs	r2, #0
 80028e0:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80028e2:	e0ce      	b.n	8002a82 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028e4:	78fa      	ldrb	r2, [r7, #3]
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	1a9b      	subs	r3, r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	332a      	adds	r3, #42	@ 0x2a
 80028f4:	2202      	movs	r2, #2
 80028f6:	701a      	strb	r2, [r3, #0]
      break;
 80028f8:	e0c3      	b.n	8002a82 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80028fa:	78fa      	ldrb	r2, [r7, #3]
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	4613      	mov	r3, r2
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	1a9b      	subs	r3, r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	440b      	add	r3, r1
 8002908:	331a      	adds	r3, #26
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b01      	cmp	r3, #1
 800290e:	f040 80b8 	bne.w	8002a82 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002912:	78fa      	ldrb	r2, [r7, #3]
 8002914:	6879      	ldr	r1, [r7, #4]
 8002916:	4613      	mov	r3, r2
 8002918:	011b      	lsls	r3, r3, #4
 800291a:	1a9b      	subs	r3, r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	440b      	add	r3, r1
 8002920:	333c      	adds	r3, #60	@ 0x3c
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10a      	bne.n	800293e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002928:	78fa      	ldrb	r2, [r7, #3]
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	4613      	mov	r3, r2
 800292e:	011b      	lsls	r3, r3, #4
 8002930:	1a9b      	subs	r3, r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	440b      	add	r3, r1
 8002936:	332a      	adds	r3, #42	@ 0x2a
 8002938:	2200      	movs	r2, #0
 800293a:	701a      	strb	r2, [r3, #0]
      break;
 800293c:	e0a1      	b.n	8002a82 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800293e:	78fa      	ldrb	r2, [r7, #3]
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	4613      	mov	r3, r2
 8002944:	011b      	lsls	r3, r3, #4
 8002946:	1a9b      	subs	r3, r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	440b      	add	r3, r1
 800294c:	332a      	adds	r3, #42	@ 0x2a
 800294e:	2202      	movs	r2, #2
 8002950:	701a      	strb	r2, [r3, #0]
      break;
 8002952:	e096      	b.n	8002a82 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002954:	78bb      	ldrb	r3, [r7, #2]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d120      	bne.n	800299c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800295a:	78fa      	ldrb	r2, [r7, #3]
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	4613      	mov	r3, r2
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	1a9b      	subs	r3, r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	440b      	add	r3, r1
 8002968:	333d      	adds	r3, #61	@ 0x3d
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10a      	bne.n	8002986 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002970:	78fa      	ldrb	r2, [r7, #3]
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	4613      	mov	r3, r2
 8002976:	011b      	lsls	r3, r3, #4
 8002978:	1a9b      	subs	r3, r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	440b      	add	r3, r1
 800297e:	332a      	adds	r3, #42	@ 0x2a
 8002980:	2200      	movs	r2, #0
 8002982:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002984:	e07e      	b.n	8002a84 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002986:	78fa      	ldrb	r2, [r7, #3]
 8002988:	6879      	ldr	r1, [r7, #4]
 800298a:	4613      	mov	r3, r2
 800298c:	011b      	lsls	r3, r3, #4
 800298e:	1a9b      	subs	r3, r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	440b      	add	r3, r1
 8002994:	332a      	adds	r3, #42	@ 0x2a
 8002996:	2202      	movs	r2, #2
 8002998:	701a      	strb	r2, [r3, #0]
      break;
 800299a:	e073      	b.n	8002a84 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800299c:	78fa      	ldrb	r2, [r7, #3]
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	4613      	mov	r3, r2
 80029a2:	011b      	lsls	r3, r3, #4
 80029a4:	1a9b      	subs	r3, r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	333c      	adds	r3, #60	@ 0x3c
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10a      	bne.n	80029c8 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029b2:	78fa      	ldrb	r2, [r7, #3]
 80029b4:	6879      	ldr	r1, [r7, #4]
 80029b6:	4613      	mov	r3, r2
 80029b8:	011b      	lsls	r3, r3, #4
 80029ba:	1a9b      	subs	r3, r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	440b      	add	r3, r1
 80029c0:	332a      	adds	r3, #42	@ 0x2a
 80029c2:	2200      	movs	r2, #0
 80029c4:	701a      	strb	r2, [r3, #0]
      break;
 80029c6:	e05d      	b.n	8002a84 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029c8:	78fa      	ldrb	r2, [r7, #3]
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	4613      	mov	r3, r2
 80029ce:	011b      	lsls	r3, r3, #4
 80029d0:	1a9b      	subs	r3, r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	332a      	adds	r3, #42	@ 0x2a
 80029d8:	2202      	movs	r2, #2
 80029da:	701a      	strb	r2, [r3, #0]
      break;
 80029dc:	e052      	b.n	8002a84 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80029de:	78bb      	ldrb	r3, [r7, #2]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d120      	bne.n	8002a26 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80029e4:	78fa      	ldrb	r2, [r7, #3]
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	4613      	mov	r3, r2
 80029ea:	011b      	lsls	r3, r3, #4
 80029ec:	1a9b      	subs	r3, r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	440b      	add	r3, r1
 80029f2:	333d      	adds	r3, #61	@ 0x3d
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10a      	bne.n	8002a10 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029fa:	78fa      	ldrb	r2, [r7, #3]
 80029fc:	6879      	ldr	r1, [r7, #4]
 80029fe:	4613      	mov	r3, r2
 8002a00:	011b      	lsls	r3, r3, #4
 8002a02:	1a9b      	subs	r3, r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	440b      	add	r3, r1
 8002a08:	332a      	adds	r3, #42	@ 0x2a
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002a0e:	e039      	b.n	8002a84 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a10:	78fa      	ldrb	r2, [r7, #3]
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	4613      	mov	r3, r2
 8002a16:	011b      	lsls	r3, r3, #4
 8002a18:	1a9b      	subs	r3, r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	332a      	adds	r3, #42	@ 0x2a
 8002a20:	2202      	movs	r2, #2
 8002a22:	701a      	strb	r2, [r3, #0]
      break;
 8002a24:	e02e      	b.n	8002a84 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002a26:	78fa      	ldrb	r2, [r7, #3]
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	011b      	lsls	r3, r3, #4
 8002a2e:	1a9b      	subs	r3, r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	440b      	add	r3, r1
 8002a34:	333c      	adds	r3, #60	@ 0x3c
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10a      	bne.n	8002a52 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a3c:	78fa      	ldrb	r2, [r7, #3]
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	4613      	mov	r3, r2
 8002a42:	011b      	lsls	r3, r3, #4
 8002a44:	1a9b      	subs	r3, r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	332a      	adds	r3, #42	@ 0x2a
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	701a      	strb	r2, [r3, #0]
      break;
 8002a50:	e018      	b.n	8002a84 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a52:	78fa      	ldrb	r2, [r7, #3]
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	4613      	mov	r3, r2
 8002a58:	011b      	lsls	r3, r3, #4
 8002a5a:	1a9b      	subs	r3, r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	440b      	add	r3, r1
 8002a60:	332a      	adds	r3, #42	@ 0x2a
 8002a62:	2202      	movs	r2, #2
 8002a64:	701a      	strb	r2, [r3, #0]
      break;
 8002a66:	e00d      	b.n	8002a84 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a68:	78fa      	ldrb	r2, [r7, #3]
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	011b      	lsls	r3, r3, #4
 8002a70:	1a9b      	subs	r3, r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	332a      	adds	r3, #42	@ 0x2a
 8002a78:	2200      	movs	r2, #0
 8002a7a:	701a      	strb	r2, [r3, #0]
      break;
 8002a7c:	e002      	b.n	8002a84 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002a7e:	bf00      	nop
 8002a80:	e000      	b.n	8002a84 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002a82:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002a84:	78fa      	ldrb	r2, [r7, #3]
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	011b      	lsls	r3, r3, #4
 8002a8c:	1a9b      	subs	r3, r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	440b      	add	r3, r1
 8002a92:	332c      	adds	r3, #44	@ 0x2c
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002a98:	78fa      	ldrb	r2, [r7, #3]
 8002a9a:	8b39      	ldrh	r1, [r7, #24]
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	011b      	lsls	r3, r3, #4
 8002aa2:	1a9b      	subs	r3, r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4403      	add	r3, r0
 8002aa8:	3334      	adds	r3, #52	@ 0x34
 8002aaa:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002aac:	78fa      	ldrb	r2, [r7, #3]
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	011b      	lsls	r3, r3, #4
 8002ab4:	1a9b      	subs	r3, r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	440b      	add	r3, r1
 8002aba:	334c      	adds	r3, #76	@ 0x4c
 8002abc:	2200      	movs	r2, #0
 8002abe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002ac0:	78fa      	ldrb	r2, [r7, #3]
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	011b      	lsls	r3, r3, #4
 8002ac8:	1a9b      	subs	r3, r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	440b      	add	r3, r1
 8002ace:	3338      	adds	r3, #56	@ 0x38
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002ad4:	78fa      	ldrb	r2, [r7, #3]
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	011b      	lsls	r3, r3, #4
 8002adc:	1a9b      	subs	r3, r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	3315      	adds	r3, #21
 8002ae4:	78fa      	ldrb	r2, [r7, #3]
 8002ae6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002ae8:	78fa      	ldrb	r2, [r7, #3]
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	4613      	mov	r3, r2
 8002aee:	011b      	lsls	r3, r3, #4
 8002af0:	1a9b      	subs	r3, r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	334d      	adds	r3, #77	@ 0x4d
 8002af8:	2200      	movs	r2, #0
 8002afa:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6818      	ldr	r0, [r3, #0]
 8002b00:	78fa      	ldrb	r2, [r7, #3]
 8002b02:	4613      	mov	r3, r2
 8002b04:	011b      	lsls	r3, r3, #4
 8002b06:	1a9b      	subs	r3, r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	3310      	adds	r3, #16
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	4413      	add	r3, r2
 8002b10:	1d19      	adds	r1, r3, #4
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	799b      	ldrb	r3, [r3, #6]
 8002b16:	461a      	mov	r2, r3
 8002b18:	f003 ff80 	bl	8006a1c <USB_HC_StartXfer>
 8002b1c:	4603      	mov	r3, r0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop

08002b28 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f003 fc75 	bl	800642e <USB_GetMode>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	f040 80fb 	bne.w	8002d42 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f003 fc38 	bl	80063c6 <USB_ReadInterrupts>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 80f1 	beq.w	8002d40 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f003 fc2f 	bl	80063c6 <USB_ReadInterrupts>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b72:	d104      	bne.n	8002b7e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002b7c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f003 fc1f 	bl	80063c6 <USB_ReadInterrupts>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b92:	d104      	bne.n	8002b9e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002b9c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f003 fc0f 	bl	80063c6 <USB_ReadInterrupts>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002bae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002bb2:	d104      	bne.n	8002bbe <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002bbc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f003 fbff 	bl	80063c6 <USB_ReadInterrupts>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d103      	bne.n	8002bda <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f003 fbf1 	bl	80063c6 <USB_ReadInterrupts>
 8002be4:	4603      	mov	r3, r0
 8002be6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002bea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bee:	d120      	bne.n	8002c32 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002bf8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d113      	bne.n	8002c32 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002c0a:	2110      	movs	r1, #16
 8002c0c:	6938      	ldr	r0, [r7, #16]
 8002c0e:	f003 fae4 	bl	80061da <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002c12:	6938      	ldr	r0, [r7, #16]
 8002c14:	f003 fb13 	bl	800623e <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	7a5b      	ldrb	r3, [r3, #9]
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d105      	bne.n	8002c2c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2101      	movs	r1, #1
 8002c26:	4618      	mov	r0, r3
 8002c28:	f003 fd04 	bl	8006634 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f006 fccb 	bl	80095c8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f003 fbc5 	bl	80063c6 <USB_ReadInterrupts>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c46:	d102      	bne.n	8002c4e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f001 fd4d 	bl	80046e8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f003 fbb7 	bl	80063c6 <USB_ReadInterrupts>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	f003 0308 	and.w	r3, r3, #8
 8002c5e:	2b08      	cmp	r3, #8
 8002c60:	d106      	bne.n	8002c70 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f006 fc94 	bl	8009590 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2208      	movs	r2, #8
 8002c6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f003 fba6 	bl	80063c6 <USB_ReadInterrupts>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c84:	d139      	bne.n	8002cfa <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f004 f940 	bl	8006f10 <USB_HC_ReadInterrupt>
 8002c90:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002c92:	2300      	movs	r3, #0
 8002c94:	617b      	str	r3, [r7, #20]
 8002c96:	e025      	b.n	8002ce4 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d018      	beq.n	8002cde <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	015a      	lsls	r2, r3, #5
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002cbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cc2:	d106      	bne.n	8002cd2 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	4619      	mov	r1, r3
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 f905 	bl	8002eda <HCD_HC_IN_IRQHandler>
 8002cd0:	e005      	b.n	8002cde <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 ff67 	bl	8003bac <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	795b      	ldrb	r3, [r3, #5]
 8002ce8:	461a      	mov	r2, r3
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d3d3      	bcc.n	8002c98 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002cf8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f003 fb61 	bl	80063c6 <USB_ReadInterrupts>
 8002d04:	4603      	mov	r3, r0
 8002d06:	f003 0310 	and.w	r3, r3, #16
 8002d0a:	2b10      	cmp	r3, #16
 8002d0c:	d101      	bne.n	8002d12 <HAL_HCD_IRQHandler+0x1ea>
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <HAL_HCD_IRQHandler+0x1ec>
 8002d12:	2300      	movs	r3, #0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d014      	beq.n	8002d42 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	699a      	ldr	r2, [r3, #24]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 0210 	bic.w	r2, r2, #16
 8002d26:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f001 fbfe 	bl	800452a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	699a      	ldr	r2, [r3, #24]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f042 0210 	orr.w	r2, r2, #16
 8002d3c:	619a      	str	r2, [r3, #24]
 8002d3e:	e000      	b.n	8002d42 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002d40:	bf00      	nop
    }
  }
}
 8002d42:	3718      	adds	r7, #24
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d101      	bne.n	8002d5e <HAL_HCD_Start+0x16>
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	e013      	b.n	8002d86 <HAL_HCD_Start+0x3e>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f003 fcc8 	bl	8006702 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f003 f9c1 	bl	80060fe <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b082      	sub	sp, #8
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d101      	bne.n	8002da4 <HAL_HCD_Stop+0x16>
 8002da0:	2302      	movs	r3, #2
 8002da2:	e00d      	b.n	8002dc0 <HAL_HCD_Stop+0x32>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f004 fa1b 	bl	80071ec <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f003 fc6a 	bl	80066ae <USB_ResetPort>
 8002dda:	4603      	mov	r3, r0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002df0:	78fa      	ldrb	r2, [r7, #3]
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	4613      	mov	r3, r2
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	1a9b      	subs	r3, r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	334c      	adds	r3, #76	@ 0x4c
 8002e00:	781b      	ldrb	r3, [r3, #0]
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
 8002e16:	460b      	mov	r3, r1
 8002e18:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002e1a:	78fa      	ldrb	r2, [r7, #3]
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	011b      	lsls	r3, r3, #4
 8002e22:	1a9b      	subs	r3, r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	440b      	add	r3, r1
 8002e28:	3338      	adds	r3, #56	@ 0x38
 8002e2a:	681b      	ldr	r3, [r3, #0]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f003 fcac 	bl	80067a2 <USB_GetCurrentFrame>
 8002e4a:	4603      	mov	r3, r0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f003 fc87 	bl	8006774 <USB_GetHostSpeed>
 8002e66:	4603      	mov	r3, r0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3708      	adds	r7, #8
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	460b      	mov	r3, r1
 8002e7a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002e7c:	78fa      	ldrb	r2, [r7, #3]
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	011b      	lsls	r3, r3, #4
 8002e84:	1a9b      	subs	r3, r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	331a      	adds	r3, #26
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002e90:	78fa      	ldrb	r2, [r7, #3]
 8002e92:	6879      	ldr	r1, [r7, #4]
 8002e94:	4613      	mov	r3, r2
 8002e96:	011b      	lsls	r3, r3, #4
 8002e98:	1a9b      	subs	r3, r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	440b      	add	r3, r1
 8002e9e:	331b      	adds	r3, #27
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002ea4:	78fa      	ldrb	r2, [r7, #3]
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	011b      	lsls	r3, r3, #4
 8002eac:	1a9b      	subs	r3, r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	3325      	adds	r3, #37	@ 0x25
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002eb8:	78fa      	ldrb	r2, [r7, #3]
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	011b      	lsls	r3, r3, #4
 8002ec0:	1a9b      	subs	r3, r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	3324      	adds	r3, #36	@ 0x24
 8002ec8:	2200      	movs	r2, #0
 8002eca:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b086      	sub	sp, #24
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	78fa      	ldrb	r2, [r7, #3]
 8002ef6:	4611      	mov	r1, r2
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f003 fa77 	bl	80063ec <USB_ReadChInterrupts>
 8002efe:	4603      	mov	r3, r0
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	d11a      	bne.n	8002f3e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002f08:	78fb      	ldrb	r3, [r7, #3]
 8002f0a:	015a      	lsls	r2, r3, #5
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	4413      	add	r3, r2
 8002f10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f14:	461a      	mov	r2, r3
 8002f16:	2304      	movs	r3, #4
 8002f18:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002f1a:	78fa      	ldrb	r2, [r7, #3]
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	011b      	lsls	r3, r3, #4
 8002f22:	1a9b      	subs	r3, r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	440b      	add	r3, r1
 8002f28:	334d      	adds	r3, #77	@ 0x4d
 8002f2a:	2207      	movs	r2, #7
 8002f2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	78fa      	ldrb	r2, [r7, #3]
 8002f34:	4611      	mov	r1, r2
 8002f36:	4618      	mov	r0, r3
 8002f38:	f003 fffb 	bl	8006f32 <USB_HC_Halt>
 8002f3c:	e09e      	b.n	800307c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	78fa      	ldrb	r2, [r7, #3]
 8002f44:	4611      	mov	r1, r2
 8002f46:	4618      	mov	r0, r3
 8002f48:	f003 fa50 	bl	80063ec <USB_ReadChInterrupts>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f56:	d11b      	bne.n	8002f90 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002f58:	78fb      	ldrb	r3, [r7, #3]
 8002f5a:	015a      	lsls	r2, r3, #5
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	4413      	add	r3, r2
 8002f60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f64:	461a      	mov	r2, r3
 8002f66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f6a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002f6c:	78fa      	ldrb	r2, [r7, #3]
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	4613      	mov	r3, r2
 8002f72:	011b      	lsls	r3, r3, #4
 8002f74:	1a9b      	subs	r3, r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	334d      	adds	r3, #77	@ 0x4d
 8002f7c:	2208      	movs	r2, #8
 8002f7e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	78fa      	ldrb	r2, [r7, #3]
 8002f86:	4611      	mov	r1, r2
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f003 ffd2 	bl	8006f32 <USB_HC_Halt>
 8002f8e:	e075      	b.n	800307c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	78fa      	ldrb	r2, [r7, #3]
 8002f96:	4611      	mov	r1, r2
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f003 fa27 	bl	80063ec <USB_ReadChInterrupts>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	f003 0308 	and.w	r3, r3, #8
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	d11a      	bne.n	8002fde <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002fa8:	78fb      	ldrb	r3, [r7, #3]
 8002faa:	015a      	lsls	r2, r3, #5
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	4413      	add	r3, r2
 8002fb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	2308      	movs	r3, #8
 8002fb8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002fba:	78fa      	ldrb	r2, [r7, #3]
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	011b      	lsls	r3, r3, #4
 8002fc2:	1a9b      	subs	r3, r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	440b      	add	r3, r1
 8002fc8:	334d      	adds	r3, #77	@ 0x4d
 8002fca:	2206      	movs	r2, #6
 8002fcc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	78fa      	ldrb	r2, [r7, #3]
 8002fd4:	4611      	mov	r1, r2
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f003 ffab 	bl	8006f32 <USB_HC_Halt>
 8002fdc:	e04e      	b.n	800307c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	78fa      	ldrb	r2, [r7, #3]
 8002fe4:	4611      	mov	r1, r2
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f003 fa00 	bl	80063ec <USB_ReadChInterrupts>
 8002fec:	4603      	mov	r3, r0
 8002fee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ff2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ff6:	d11b      	bne.n	8003030 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002ff8:	78fb      	ldrb	r3, [r7, #3]
 8002ffa:	015a      	lsls	r2, r3, #5
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	4413      	add	r3, r2
 8003000:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003004:	461a      	mov	r2, r3
 8003006:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800300a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800300c:	78fa      	ldrb	r2, [r7, #3]
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	1a9b      	subs	r3, r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	334d      	adds	r3, #77	@ 0x4d
 800301c:	2209      	movs	r2, #9
 800301e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	78fa      	ldrb	r2, [r7, #3]
 8003026:	4611      	mov	r1, r2
 8003028:	4618      	mov	r0, r3
 800302a:	f003 ff82 	bl	8006f32 <USB_HC_Halt>
 800302e:	e025      	b.n	800307c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	78fa      	ldrb	r2, [r7, #3]
 8003036:	4611      	mov	r1, r2
 8003038:	4618      	mov	r0, r3
 800303a:	f003 f9d7 	bl	80063ec <USB_ReadChInterrupts>
 800303e:	4603      	mov	r3, r0
 8003040:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003044:	2b80      	cmp	r3, #128	@ 0x80
 8003046:	d119      	bne.n	800307c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003048:	78fb      	ldrb	r3, [r7, #3]
 800304a:	015a      	lsls	r2, r3, #5
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	4413      	add	r3, r2
 8003050:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003054:	461a      	mov	r2, r3
 8003056:	2380      	movs	r3, #128	@ 0x80
 8003058:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800305a:	78fa      	ldrb	r2, [r7, #3]
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	4613      	mov	r3, r2
 8003060:	011b      	lsls	r3, r3, #4
 8003062:	1a9b      	subs	r3, r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	440b      	add	r3, r1
 8003068:	334d      	adds	r3, #77	@ 0x4d
 800306a:	2207      	movs	r2, #7
 800306c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	78fa      	ldrb	r2, [r7, #3]
 8003074:	4611      	mov	r1, r2
 8003076:	4618      	mov	r0, r3
 8003078:	f003 ff5b 	bl	8006f32 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	78fa      	ldrb	r2, [r7, #3]
 8003082:	4611      	mov	r1, r2
 8003084:	4618      	mov	r0, r3
 8003086:	f003 f9b1 	bl	80063ec <USB_ReadChInterrupts>
 800308a:	4603      	mov	r3, r0
 800308c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003090:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003094:	d112      	bne.n	80030bc <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	78fa      	ldrb	r2, [r7, #3]
 800309c:	4611      	mov	r1, r2
 800309e:	4618      	mov	r0, r3
 80030a0:	f003 ff47 	bl	8006f32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80030a4:	78fb      	ldrb	r3, [r7, #3]
 80030a6:	015a      	lsls	r2, r3, #5
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	4413      	add	r3, r2
 80030ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030b0:	461a      	mov	r2, r3
 80030b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80030b6:	6093      	str	r3, [r2, #8]
 80030b8:	f000 bd75 	b.w	8003ba6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	78fa      	ldrb	r2, [r7, #3]
 80030c2:	4611      	mov	r1, r2
 80030c4:	4618      	mov	r0, r3
 80030c6:	f003 f991 	bl	80063ec <USB_ReadChInterrupts>
 80030ca:	4603      	mov	r3, r0
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	f040 8128 	bne.w	8003326 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80030d6:	78fb      	ldrb	r3, [r7, #3]
 80030d8:	015a      	lsls	r2, r3, #5
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	4413      	add	r3, r2
 80030de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030e2:	461a      	mov	r2, r3
 80030e4:	2320      	movs	r3, #32
 80030e6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80030e8:	78fa      	ldrb	r2, [r7, #3]
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	4613      	mov	r3, r2
 80030ee:	011b      	lsls	r3, r3, #4
 80030f0:	1a9b      	subs	r3, r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	331b      	adds	r3, #27
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d119      	bne.n	8003132 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80030fe:	78fa      	ldrb	r2, [r7, #3]
 8003100:	6879      	ldr	r1, [r7, #4]
 8003102:	4613      	mov	r3, r2
 8003104:	011b      	lsls	r3, r3, #4
 8003106:	1a9b      	subs	r3, r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	440b      	add	r3, r1
 800310c:	331b      	adds	r3, #27
 800310e:	2200      	movs	r2, #0
 8003110:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003112:	78fb      	ldrb	r3, [r7, #3]
 8003114:	015a      	lsls	r2, r3, #5
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	4413      	add	r3, r2
 800311a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	78fa      	ldrb	r2, [r7, #3]
 8003122:	0151      	lsls	r1, r2, #5
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	440a      	add	r2, r1
 8003128:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800312c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003130:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	799b      	ldrb	r3, [r3, #6]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d01b      	beq.n	8003172 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800313a:	78fa      	ldrb	r2, [r7, #3]
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	4613      	mov	r3, r2
 8003140:	011b      	lsls	r3, r3, #4
 8003142:	1a9b      	subs	r3, r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	440b      	add	r3, r1
 8003148:	3330      	adds	r3, #48	@ 0x30
 800314a:	6819      	ldr	r1, [r3, #0]
 800314c:	78fb      	ldrb	r3, [r7, #3]
 800314e:	015a      	lsls	r2, r3, #5
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	4413      	add	r3, r2
 8003154:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800315e:	78fa      	ldrb	r2, [r7, #3]
 8003160:	1ac9      	subs	r1, r1, r3
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	4613      	mov	r3, r2
 8003166:	011b      	lsls	r3, r3, #4
 8003168:	1a9b      	subs	r3, r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4403      	add	r3, r0
 800316e:	3338      	adds	r3, #56	@ 0x38
 8003170:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003172:	78fa      	ldrb	r2, [r7, #3]
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	4613      	mov	r3, r2
 8003178:	011b      	lsls	r3, r3, #4
 800317a:	1a9b      	subs	r3, r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	440b      	add	r3, r1
 8003180:	334d      	adds	r3, #77	@ 0x4d
 8003182:	2201      	movs	r2, #1
 8003184:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003186:	78fa      	ldrb	r2, [r7, #3]
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	1a9b      	subs	r3, r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	3344      	adds	r3, #68	@ 0x44
 8003196:	2200      	movs	r2, #0
 8003198:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800319a:	78fb      	ldrb	r3, [r7, #3]
 800319c:	015a      	lsls	r2, r3, #5
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	4413      	add	r3, r2
 80031a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031a6:	461a      	mov	r2, r3
 80031a8:	2301      	movs	r3, #1
 80031aa:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80031ac:	78fa      	ldrb	r2, [r7, #3]
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	011b      	lsls	r3, r3, #4
 80031b4:	1a9b      	subs	r3, r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	3326      	adds	r3, #38	@ 0x26
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00a      	beq.n	80031d8 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80031c2:	78fa      	ldrb	r2, [r7, #3]
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	1a9b      	subs	r3, r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	440b      	add	r3, r1
 80031d0:	3326      	adds	r3, #38	@ 0x26
 80031d2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d110      	bne.n	80031fa <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	78fa      	ldrb	r2, [r7, #3]
 80031de:	4611      	mov	r1, r2
 80031e0:	4618      	mov	r0, r3
 80031e2:	f003 fea6 	bl	8006f32 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80031e6:	78fb      	ldrb	r3, [r7, #3]
 80031e8:	015a      	lsls	r2, r3, #5
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	4413      	add	r3, r2
 80031ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031f2:	461a      	mov	r2, r3
 80031f4:	2310      	movs	r3, #16
 80031f6:	6093      	str	r3, [r2, #8]
 80031f8:	e03d      	b.n	8003276 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80031fa:	78fa      	ldrb	r2, [r7, #3]
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	4613      	mov	r3, r2
 8003200:	011b      	lsls	r3, r3, #4
 8003202:	1a9b      	subs	r3, r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	440b      	add	r3, r1
 8003208:	3326      	adds	r3, #38	@ 0x26
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	2b03      	cmp	r3, #3
 800320e:	d00a      	beq.n	8003226 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003210:	78fa      	ldrb	r2, [r7, #3]
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	4613      	mov	r3, r2
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	1a9b      	subs	r3, r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	3326      	adds	r3, #38	@ 0x26
 8003220:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003222:	2b01      	cmp	r3, #1
 8003224:	d127      	bne.n	8003276 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003226:	78fb      	ldrb	r3, [r7, #3]
 8003228:	015a      	lsls	r2, r3, #5
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	4413      	add	r3, r2
 800322e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	78fa      	ldrb	r2, [r7, #3]
 8003236:	0151      	lsls	r1, r2, #5
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	440a      	add	r2, r1
 800323c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003240:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003244:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003246:	78fa      	ldrb	r2, [r7, #3]
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	4613      	mov	r3, r2
 800324c:	011b      	lsls	r3, r3, #4
 800324e:	1a9b      	subs	r3, r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	440b      	add	r3, r1
 8003254:	334c      	adds	r3, #76	@ 0x4c
 8003256:	2201      	movs	r2, #1
 8003258:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800325a:	78fa      	ldrb	r2, [r7, #3]
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	4613      	mov	r3, r2
 8003260:	011b      	lsls	r3, r3, #4
 8003262:	1a9b      	subs	r3, r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	440b      	add	r3, r1
 8003268:	334c      	adds	r3, #76	@ 0x4c
 800326a:	781a      	ldrb	r2, [r3, #0]
 800326c:	78fb      	ldrb	r3, [r7, #3]
 800326e:	4619      	mov	r1, r3
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f006 f9b7 	bl	80095e4 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	799b      	ldrb	r3, [r3, #6]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d13b      	bne.n	80032f6 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800327e:	78fa      	ldrb	r2, [r7, #3]
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	4613      	mov	r3, r2
 8003284:	011b      	lsls	r3, r3, #4
 8003286:	1a9b      	subs	r3, r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	440b      	add	r3, r1
 800328c:	3338      	adds	r3, #56	@ 0x38
 800328e:	6819      	ldr	r1, [r3, #0]
 8003290:	78fa      	ldrb	r2, [r7, #3]
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	4613      	mov	r3, r2
 8003296:	011b      	lsls	r3, r3, #4
 8003298:	1a9b      	subs	r3, r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4403      	add	r3, r0
 800329e:	3328      	adds	r3, #40	@ 0x28
 80032a0:	881b      	ldrh	r3, [r3, #0]
 80032a2:	440b      	add	r3, r1
 80032a4:	1e59      	subs	r1, r3, #1
 80032a6:	78fa      	ldrb	r2, [r7, #3]
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	1a9b      	subs	r3, r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4403      	add	r3, r0
 80032b4:	3328      	adds	r3, #40	@ 0x28
 80032b6:	881b      	ldrh	r3, [r3, #0]
 80032b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 8470 	beq.w	8003ba6 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80032c6:	78fa      	ldrb	r2, [r7, #3]
 80032c8:	6879      	ldr	r1, [r7, #4]
 80032ca:	4613      	mov	r3, r2
 80032cc:	011b      	lsls	r3, r3, #4
 80032ce:	1a9b      	subs	r3, r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	440b      	add	r3, r1
 80032d4:	333c      	adds	r3, #60	@ 0x3c
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	78fa      	ldrb	r2, [r7, #3]
 80032da:	f083 0301 	eor.w	r3, r3, #1
 80032de:	b2d8      	uxtb	r0, r3
 80032e0:	6879      	ldr	r1, [r7, #4]
 80032e2:	4613      	mov	r3, r2
 80032e4:	011b      	lsls	r3, r3, #4
 80032e6:	1a9b      	subs	r3, r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	440b      	add	r3, r1
 80032ec:	333c      	adds	r3, #60	@ 0x3c
 80032ee:	4602      	mov	r2, r0
 80032f0:	701a      	strb	r2, [r3, #0]
 80032f2:	f000 bc58 	b.w	8003ba6 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80032f6:	78fa      	ldrb	r2, [r7, #3]
 80032f8:	6879      	ldr	r1, [r7, #4]
 80032fa:	4613      	mov	r3, r2
 80032fc:	011b      	lsls	r3, r3, #4
 80032fe:	1a9b      	subs	r3, r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	440b      	add	r3, r1
 8003304:	333c      	adds	r3, #60	@ 0x3c
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	78fa      	ldrb	r2, [r7, #3]
 800330a:	f083 0301 	eor.w	r3, r3, #1
 800330e:	b2d8      	uxtb	r0, r3
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	4613      	mov	r3, r2
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	1a9b      	subs	r3, r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	440b      	add	r3, r1
 800331c:	333c      	adds	r3, #60	@ 0x3c
 800331e:	4602      	mov	r2, r0
 8003320:	701a      	strb	r2, [r3, #0]
 8003322:	f000 bc40 	b.w	8003ba6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	78fa      	ldrb	r2, [r7, #3]
 800332c:	4611      	mov	r1, r2
 800332e:	4618      	mov	r0, r3
 8003330:	f003 f85c 	bl	80063ec <USB_ReadChInterrupts>
 8003334:	4603      	mov	r3, r0
 8003336:	f003 0320 	and.w	r3, r3, #32
 800333a:	2b20      	cmp	r3, #32
 800333c:	d131      	bne.n	80033a2 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800333e:	78fb      	ldrb	r3, [r7, #3]
 8003340:	015a      	lsls	r2, r3, #5
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	4413      	add	r3, r2
 8003346:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800334a:	461a      	mov	r2, r3
 800334c:	2320      	movs	r3, #32
 800334e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003350:	78fa      	ldrb	r2, [r7, #3]
 8003352:	6879      	ldr	r1, [r7, #4]
 8003354:	4613      	mov	r3, r2
 8003356:	011b      	lsls	r3, r3, #4
 8003358:	1a9b      	subs	r3, r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	331a      	adds	r3, #26
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	2b01      	cmp	r3, #1
 8003364:	f040 841f 	bne.w	8003ba6 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003368:	78fa      	ldrb	r2, [r7, #3]
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	4613      	mov	r3, r2
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	1a9b      	subs	r3, r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	331b      	adds	r3, #27
 8003378:	2201      	movs	r2, #1
 800337a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800337c:	78fa      	ldrb	r2, [r7, #3]
 800337e:	6879      	ldr	r1, [r7, #4]
 8003380:	4613      	mov	r3, r2
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	1a9b      	subs	r3, r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	440b      	add	r3, r1
 800338a:	334d      	adds	r3, #77	@ 0x4d
 800338c:	2203      	movs	r2, #3
 800338e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	78fa      	ldrb	r2, [r7, #3]
 8003396:	4611      	mov	r1, r2
 8003398:	4618      	mov	r0, r3
 800339a:	f003 fdca 	bl	8006f32 <USB_HC_Halt>
 800339e:	f000 bc02 	b.w	8003ba6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	78fa      	ldrb	r2, [r7, #3]
 80033a8:	4611      	mov	r1, r2
 80033aa:	4618      	mov	r0, r3
 80033ac:	f003 f81e 	bl	80063ec <USB_ReadChInterrupts>
 80033b0:	4603      	mov	r3, r0
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	f040 8305 	bne.w	80039c6 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80033bc:	78fb      	ldrb	r3, [r7, #3]
 80033be:	015a      	lsls	r2, r3, #5
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	4413      	add	r3, r2
 80033c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033c8:	461a      	mov	r2, r3
 80033ca:	2302      	movs	r3, #2
 80033cc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80033ce:	78fa      	ldrb	r2, [r7, #3]
 80033d0:	6879      	ldr	r1, [r7, #4]
 80033d2:	4613      	mov	r3, r2
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	1a9b      	subs	r3, r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	440b      	add	r3, r1
 80033dc:	334d      	adds	r3, #77	@ 0x4d
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d114      	bne.n	800340e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033e4:	78fa      	ldrb	r2, [r7, #3]
 80033e6:	6879      	ldr	r1, [r7, #4]
 80033e8:	4613      	mov	r3, r2
 80033ea:	011b      	lsls	r3, r3, #4
 80033ec:	1a9b      	subs	r3, r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	334d      	adds	r3, #77	@ 0x4d
 80033f4:	2202      	movs	r2, #2
 80033f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80033f8:	78fa      	ldrb	r2, [r7, #3]
 80033fa:	6879      	ldr	r1, [r7, #4]
 80033fc:	4613      	mov	r3, r2
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	1a9b      	subs	r3, r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	440b      	add	r3, r1
 8003406:	334c      	adds	r3, #76	@ 0x4c
 8003408:	2201      	movs	r2, #1
 800340a:	701a      	strb	r2, [r3, #0]
 800340c:	e2cc      	b.n	80039a8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800340e:	78fa      	ldrb	r2, [r7, #3]
 8003410:	6879      	ldr	r1, [r7, #4]
 8003412:	4613      	mov	r3, r2
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	1a9b      	subs	r3, r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	440b      	add	r3, r1
 800341c:	334d      	adds	r3, #77	@ 0x4d
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	2b06      	cmp	r3, #6
 8003422:	d114      	bne.n	800344e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003424:	78fa      	ldrb	r2, [r7, #3]
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	4613      	mov	r3, r2
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	1a9b      	subs	r3, r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	440b      	add	r3, r1
 8003432:	334d      	adds	r3, #77	@ 0x4d
 8003434:	2202      	movs	r2, #2
 8003436:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003438:	78fa      	ldrb	r2, [r7, #3]
 800343a:	6879      	ldr	r1, [r7, #4]
 800343c:	4613      	mov	r3, r2
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	1a9b      	subs	r3, r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	440b      	add	r3, r1
 8003446:	334c      	adds	r3, #76	@ 0x4c
 8003448:	2205      	movs	r2, #5
 800344a:	701a      	strb	r2, [r3, #0]
 800344c:	e2ac      	b.n	80039a8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800344e:	78fa      	ldrb	r2, [r7, #3]
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	4613      	mov	r3, r2
 8003454:	011b      	lsls	r3, r3, #4
 8003456:	1a9b      	subs	r3, r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	440b      	add	r3, r1
 800345c:	334d      	adds	r3, #77	@ 0x4d
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b07      	cmp	r3, #7
 8003462:	d00b      	beq.n	800347c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003464:	78fa      	ldrb	r2, [r7, #3]
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	4613      	mov	r3, r2
 800346a:	011b      	lsls	r3, r3, #4
 800346c:	1a9b      	subs	r3, r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	334d      	adds	r3, #77	@ 0x4d
 8003474:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003476:	2b09      	cmp	r3, #9
 8003478:	f040 80a6 	bne.w	80035c8 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800347c:	78fa      	ldrb	r2, [r7, #3]
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	4613      	mov	r3, r2
 8003482:	011b      	lsls	r3, r3, #4
 8003484:	1a9b      	subs	r3, r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	334d      	adds	r3, #77	@ 0x4d
 800348c:	2202      	movs	r2, #2
 800348e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003490:	78fa      	ldrb	r2, [r7, #3]
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	4613      	mov	r3, r2
 8003496:	011b      	lsls	r3, r3, #4
 8003498:	1a9b      	subs	r3, r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	3344      	adds	r3, #68	@ 0x44
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	1c59      	adds	r1, r3, #1
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	4613      	mov	r3, r2
 80034a8:	011b      	lsls	r3, r3, #4
 80034aa:	1a9b      	subs	r3, r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4403      	add	r3, r0
 80034b0:	3344      	adds	r3, #68	@ 0x44
 80034b2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034b4:	78fa      	ldrb	r2, [r7, #3]
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	4613      	mov	r3, r2
 80034ba:	011b      	lsls	r3, r3, #4
 80034bc:	1a9b      	subs	r3, r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	3344      	adds	r3, #68	@ 0x44
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d943      	bls.n	8003552 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80034ca:	78fa      	ldrb	r2, [r7, #3]
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	4613      	mov	r3, r2
 80034d0:	011b      	lsls	r3, r3, #4
 80034d2:	1a9b      	subs	r3, r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	440b      	add	r3, r1
 80034d8:	3344      	adds	r3, #68	@ 0x44
 80034da:	2200      	movs	r2, #0
 80034dc:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80034de:	78fa      	ldrb	r2, [r7, #3]
 80034e0:	6879      	ldr	r1, [r7, #4]
 80034e2:	4613      	mov	r3, r2
 80034e4:	011b      	lsls	r3, r3, #4
 80034e6:	1a9b      	subs	r3, r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	440b      	add	r3, r1
 80034ec:	331a      	adds	r3, #26
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d123      	bne.n	800353c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80034f4:	78fa      	ldrb	r2, [r7, #3]
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	4613      	mov	r3, r2
 80034fa:	011b      	lsls	r3, r3, #4
 80034fc:	1a9b      	subs	r3, r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	440b      	add	r3, r1
 8003502:	331b      	adds	r3, #27
 8003504:	2200      	movs	r2, #0
 8003506:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003508:	78fa      	ldrb	r2, [r7, #3]
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	4613      	mov	r3, r2
 800350e:	011b      	lsls	r3, r3, #4
 8003510:	1a9b      	subs	r3, r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	331c      	adds	r3, #28
 8003518:	2200      	movs	r2, #0
 800351a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800351c:	78fb      	ldrb	r3, [r7, #3]
 800351e:	015a      	lsls	r2, r3, #5
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	4413      	add	r3, r2
 8003524:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	78fa      	ldrb	r2, [r7, #3]
 800352c:	0151      	lsls	r1, r2, #5
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	440a      	add	r2, r1
 8003532:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003536:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800353a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800353c:	78fa      	ldrb	r2, [r7, #3]
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	4613      	mov	r3, r2
 8003542:	011b      	lsls	r3, r3, #4
 8003544:	1a9b      	subs	r3, r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	334c      	adds	r3, #76	@ 0x4c
 800354c:	2204      	movs	r2, #4
 800354e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003550:	e229      	b.n	80039a6 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003552:	78fa      	ldrb	r2, [r7, #3]
 8003554:	6879      	ldr	r1, [r7, #4]
 8003556:	4613      	mov	r3, r2
 8003558:	011b      	lsls	r3, r3, #4
 800355a:	1a9b      	subs	r3, r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	440b      	add	r3, r1
 8003560:	334c      	adds	r3, #76	@ 0x4c
 8003562:	2202      	movs	r2, #2
 8003564:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003566:	78fa      	ldrb	r2, [r7, #3]
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	4613      	mov	r3, r2
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	1a9b      	subs	r3, r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	3326      	adds	r3, #38	@ 0x26
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00b      	beq.n	8003594 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800357c:	78fa      	ldrb	r2, [r7, #3]
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	4613      	mov	r3, r2
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	1a9b      	subs	r3, r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	3326      	adds	r3, #38	@ 0x26
 800358c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800358e:	2b02      	cmp	r3, #2
 8003590:	f040 8209 	bne.w	80039a6 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003594:	78fb      	ldrb	r3, [r7, #3]
 8003596:	015a      	lsls	r2, r3, #5
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	4413      	add	r3, r2
 800359c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80035aa:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035b2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80035b4:	78fb      	ldrb	r3, [r7, #3]
 80035b6:	015a      	lsls	r2, r3, #5
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	4413      	add	r3, r2
 80035bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035c0:	461a      	mov	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80035c6:	e1ee      	b.n	80039a6 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80035c8:	78fa      	ldrb	r2, [r7, #3]
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	4613      	mov	r3, r2
 80035ce:	011b      	lsls	r3, r3, #4
 80035d0:	1a9b      	subs	r3, r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	440b      	add	r3, r1
 80035d6:	334d      	adds	r3, #77	@ 0x4d
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	2b05      	cmp	r3, #5
 80035dc:	f040 80c8 	bne.w	8003770 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035e0:	78fa      	ldrb	r2, [r7, #3]
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	4613      	mov	r3, r2
 80035e6:	011b      	lsls	r3, r3, #4
 80035e8:	1a9b      	subs	r3, r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	334d      	adds	r3, #77	@ 0x4d
 80035f0:	2202      	movs	r2, #2
 80035f2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80035f4:	78fa      	ldrb	r2, [r7, #3]
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	4613      	mov	r3, r2
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	1a9b      	subs	r3, r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	331b      	adds	r3, #27
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	2b01      	cmp	r3, #1
 8003608:	f040 81ce 	bne.w	80039a8 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800360c:	78fa      	ldrb	r2, [r7, #3]
 800360e:	6879      	ldr	r1, [r7, #4]
 8003610:	4613      	mov	r3, r2
 8003612:	011b      	lsls	r3, r3, #4
 8003614:	1a9b      	subs	r3, r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	440b      	add	r3, r1
 800361a:	3326      	adds	r3, #38	@ 0x26
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	2b03      	cmp	r3, #3
 8003620:	d16b      	bne.n	80036fa <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003622:	78fa      	ldrb	r2, [r7, #3]
 8003624:	6879      	ldr	r1, [r7, #4]
 8003626:	4613      	mov	r3, r2
 8003628:	011b      	lsls	r3, r3, #4
 800362a:	1a9b      	subs	r3, r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	440b      	add	r3, r1
 8003630:	3348      	adds	r3, #72	@ 0x48
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	1c59      	adds	r1, r3, #1
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	4613      	mov	r3, r2
 800363a:	011b      	lsls	r3, r3, #4
 800363c:	1a9b      	subs	r3, r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	4403      	add	r3, r0
 8003642:	3348      	adds	r3, #72	@ 0x48
 8003644:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003646:	78fa      	ldrb	r2, [r7, #3]
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	4613      	mov	r3, r2
 800364c:	011b      	lsls	r3, r3, #4
 800364e:	1a9b      	subs	r3, r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	440b      	add	r3, r1
 8003654:	3348      	adds	r3, #72	@ 0x48
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2b02      	cmp	r3, #2
 800365a:	d943      	bls.n	80036e4 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800365c:	78fa      	ldrb	r2, [r7, #3]
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	4613      	mov	r3, r2
 8003662:	011b      	lsls	r3, r3, #4
 8003664:	1a9b      	subs	r3, r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	3348      	adds	r3, #72	@ 0x48
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003670:	78fa      	ldrb	r2, [r7, #3]
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	4613      	mov	r3, r2
 8003676:	011b      	lsls	r3, r3, #4
 8003678:	1a9b      	subs	r3, r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	440b      	add	r3, r1
 800367e:	331b      	adds	r3, #27
 8003680:	2200      	movs	r2, #0
 8003682:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003684:	78fa      	ldrb	r2, [r7, #3]
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	4613      	mov	r3, r2
 800368a:	011b      	lsls	r3, r3, #4
 800368c:	1a9b      	subs	r3, r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	3344      	adds	r3, #68	@ 0x44
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2b02      	cmp	r3, #2
 8003698:	d809      	bhi.n	80036ae <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800369a:	78fa      	ldrb	r2, [r7, #3]
 800369c:	6879      	ldr	r1, [r7, #4]
 800369e:	4613      	mov	r3, r2
 80036a0:	011b      	lsls	r3, r3, #4
 80036a2:	1a9b      	subs	r3, r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	440b      	add	r3, r1
 80036a8:	331c      	adds	r3, #28
 80036aa:	2201      	movs	r2, #1
 80036ac:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80036ae:	78fb      	ldrb	r3, [r7, #3]
 80036b0:	015a      	lsls	r2, r3, #5
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	4413      	add	r3, r2
 80036b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	78fa      	ldrb	r2, [r7, #3]
 80036be:	0151      	lsls	r1, r2, #5
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	440a      	add	r2, r1
 80036c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036cc:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80036ce:	78fa      	ldrb	r2, [r7, #3]
 80036d0:	6879      	ldr	r1, [r7, #4]
 80036d2:	4613      	mov	r3, r2
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	1a9b      	subs	r3, r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	440b      	add	r3, r1
 80036dc:	334c      	adds	r3, #76	@ 0x4c
 80036de:	2204      	movs	r2, #4
 80036e0:	701a      	strb	r2, [r3, #0]
 80036e2:	e014      	b.n	800370e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80036e4:	78fa      	ldrb	r2, [r7, #3]
 80036e6:	6879      	ldr	r1, [r7, #4]
 80036e8:	4613      	mov	r3, r2
 80036ea:	011b      	lsls	r3, r3, #4
 80036ec:	1a9b      	subs	r3, r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	440b      	add	r3, r1
 80036f2:	334c      	adds	r3, #76	@ 0x4c
 80036f4:	2202      	movs	r2, #2
 80036f6:	701a      	strb	r2, [r3, #0]
 80036f8:	e009      	b.n	800370e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80036fa:	78fa      	ldrb	r2, [r7, #3]
 80036fc:	6879      	ldr	r1, [r7, #4]
 80036fe:	4613      	mov	r3, r2
 8003700:	011b      	lsls	r3, r3, #4
 8003702:	1a9b      	subs	r3, r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	440b      	add	r3, r1
 8003708:	334c      	adds	r3, #76	@ 0x4c
 800370a:	2202      	movs	r2, #2
 800370c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800370e:	78fa      	ldrb	r2, [r7, #3]
 8003710:	6879      	ldr	r1, [r7, #4]
 8003712:	4613      	mov	r3, r2
 8003714:	011b      	lsls	r3, r3, #4
 8003716:	1a9b      	subs	r3, r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	440b      	add	r3, r1
 800371c:	3326      	adds	r3, #38	@ 0x26
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00b      	beq.n	800373c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003724:	78fa      	ldrb	r2, [r7, #3]
 8003726:	6879      	ldr	r1, [r7, #4]
 8003728:	4613      	mov	r3, r2
 800372a:	011b      	lsls	r3, r3, #4
 800372c:	1a9b      	subs	r3, r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	3326      	adds	r3, #38	@ 0x26
 8003734:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003736:	2b02      	cmp	r3, #2
 8003738:	f040 8136 	bne.w	80039a8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800373c:	78fb      	ldrb	r3, [r7, #3]
 800373e:	015a      	lsls	r2, r3, #5
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	4413      	add	r3, r2
 8003744:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003752:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800375a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800375c:	78fb      	ldrb	r3, [r7, #3]
 800375e:	015a      	lsls	r2, r3, #5
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	4413      	add	r3, r2
 8003764:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003768:	461a      	mov	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6013      	str	r3, [r2, #0]
 800376e:	e11b      	b.n	80039a8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003770:	78fa      	ldrb	r2, [r7, #3]
 8003772:	6879      	ldr	r1, [r7, #4]
 8003774:	4613      	mov	r3, r2
 8003776:	011b      	lsls	r3, r3, #4
 8003778:	1a9b      	subs	r3, r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	440b      	add	r3, r1
 800377e:	334d      	adds	r3, #77	@ 0x4d
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	2b03      	cmp	r3, #3
 8003784:	f040 8081 	bne.w	800388a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003788:	78fa      	ldrb	r2, [r7, #3]
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	4613      	mov	r3, r2
 800378e:	011b      	lsls	r3, r3, #4
 8003790:	1a9b      	subs	r3, r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	440b      	add	r3, r1
 8003796:	334d      	adds	r3, #77	@ 0x4d
 8003798:	2202      	movs	r2, #2
 800379a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800379c:	78fa      	ldrb	r2, [r7, #3]
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	4613      	mov	r3, r2
 80037a2:	011b      	lsls	r3, r3, #4
 80037a4:	1a9b      	subs	r3, r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	331b      	adds	r3, #27
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	f040 80fa 	bne.w	80039a8 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80037b4:	78fa      	ldrb	r2, [r7, #3]
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	4613      	mov	r3, r2
 80037ba:	011b      	lsls	r3, r3, #4
 80037bc:	1a9b      	subs	r3, r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	440b      	add	r3, r1
 80037c2:	334c      	adds	r3, #76	@ 0x4c
 80037c4:	2202      	movs	r2, #2
 80037c6:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80037c8:	78fb      	ldrb	r3, [r7, #3]
 80037ca:	015a      	lsls	r2, r3, #5
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	4413      	add	r3, r2
 80037d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	78fa      	ldrb	r2, [r7, #3]
 80037d8:	0151      	lsls	r1, r2, #5
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	440a      	add	r2, r1
 80037de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80037e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037e6:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80037e8:	78fb      	ldrb	r3, [r7, #3]
 80037ea:	015a      	lsls	r2, r3, #5
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	4413      	add	r3, r2
 80037f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	78fa      	ldrb	r2, [r7, #3]
 80037f8:	0151      	lsls	r1, r2, #5
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	440a      	add	r2, r1
 80037fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003802:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003806:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003808:	78fb      	ldrb	r3, [r7, #3]
 800380a:	015a      	lsls	r2, r3, #5
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	4413      	add	r3, r2
 8003810:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	78fa      	ldrb	r2, [r7, #3]
 8003818:	0151      	lsls	r1, r2, #5
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	440a      	add	r2, r1
 800381e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003822:	f023 0320 	bic.w	r3, r3, #32
 8003826:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003828:	78fa      	ldrb	r2, [r7, #3]
 800382a:	6879      	ldr	r1, [r7, #4]
 800382c:	4613      	mov	r3, r2
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	1a9b      	subs	r3, r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	3326      	adds	r3, #38	@ 0x26
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00b      	beq.n	8003856 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800383e:	78fa      	ldrb	r2, [r7, #3]
 8003840:	6879      	ldr	r1, [r7, #4]
 8003842:	4613      	mov	r3, r2
 8003844:	011b      	lsls	r3, r3, #4
 8003846:	1a9b      	subs	r3, r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	440b      	add	r3, r1
 800384c:	3326      	adds	r3, #38	@ 0x26
 800384e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003850:	2b02      	cmp	r3, #2
 8003852:	f040 80a9 	bne.w	80039a8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003856:	78fb      	ldrb	r3, [r7, #3]
 8003858:	015a      	lsls	r2, r3, #5
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	4413      	add	r3, r2
 800385e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800386c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003874:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003876:	78fb      	ldrb	r3, [r7, #3]
 8003878:	015a      	lsls	r2, r3, #5
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	4413      	add	r3, r2
 800387e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003882:	461a      	mov	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6013      	str	r3, [r2, #0]
 8003888:	e08e      	b.n	80039a8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800388a:	78fa      	ldrb	r2, [r7, #3]
 800388c:	6879      	ldr	r1, [r7, #4]
 800388e:	4613      	mov	r3, r2
 8003890:	011b      	lsls	r3, r3, #4
 8003892:	1a9b      	subs	r3, r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	440b      	add	r3, r1
 8003898:	334d      	adds	r3, #77	@ 0x4d
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b04      	cmp	r3, #4
 800389e:	d143      	bne.n	8003928 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80038a0:	78fa      	ldrb	r2, [r7, #3]
 80038a2:	6879      	ldr	r1, [r7, #4]
 80038a4:	4613      	mov	r3, r2
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	1a9b      	subs	r3, r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	440b      	add	r3, r1
 80038ae:	334d      	adds	r3, #77	@ 0x4d
 80038b0:	2202      	movs	r2, #2
 80038b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80038b4:	78fa      	ldrb	r2, [r7, #3]
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	4613      	mov	r3, r2
 80038ba:	011b      	lsls	r3, r3, #4
 80038bc:	1a9b      	subs	r3, r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	334c      	adds	r3, #76	@ 0x4c
 80038c4:	2202      	movs	r2, #2
 80038c6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038c8:	78fa      	ldrb	r2, [r7, #3]
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	4613      	mov	r3, r2
 80038ce:	011b      	lsls	r3, r3, #4
 80038d0:	1a9b      	subs	r3, r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	440b      	add	r3, r1
 80038d6:	3326      	adds	r3, #38	@ 0x26
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00a      	beq.n	80038f4 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80038de:	78fa      	ldrb	r2, [r7, #3]
 80038e0:	6879      	ldr	r1, [r7, #4]
 80038e2:	4613      	mov	r3, r2
 80038e4:	011b      	lsls	r3, r3, #4
 80038e6:	1a9b      	subs	r3, r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	440b      	add	r3, r1
 80038ec:	3326      	adds	r3, #38	@ 0x26
 80038ee:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d159      	bne.n	80039a8 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80038f4:	78fb      	ldrb	r3, [r7, #3]
 80038f6:	015a      	lsls	r2, r3, #5
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	4413      	add	r3, r2
 80038fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800390a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003912:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003914:	78fb      	ldrb	r3, [r7, #3]
 8003916:	015a      	lsls	r2, r3, #5
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	4413      	add	r3, r2
 800391c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003920:	461a      	mov	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6013      	str	r3, [r2, #0]
 8003926:	e03f      	b.n	80039a8 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003928:	78fa      	ldrb	r2, [r7, #3]
 800392a:	6879      	ldr	r1, [r7, #4]
 800392c:	4613      	mov	r3, r2
 800392e:	011b      	lsls	r3, r3, #4
 8003930:	1a9b      	subs	r3, r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	440b      	add	r3, r1
 8003936:	334d      	adds	r3, #77	@ 0x4d
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	2b08      	cmp	r3, #8
 800393c:	d126      	bne.n	800398c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800393e:	78fa      	ldrb	r2, [r7, #3]
 8003940:	6879      	ldr	r1, [r7, #4]
 8003942:	4613      	mov	r3, r2
 8003944:	011b      	lsls	r3, r3, #4
 8003946:	1a9b      	subs	r3, r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	440b      	add	r3, r1
 800394c:	334d      	adds	r3, #77	@ 0x4d
 800394e:	2202      	movs	r2, #2
 8003950:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003952:	78fa      	ldrb	r2, [r7, #3]
 8003954:	6879      	ldr	r1, [r7, #4]
 8003956:	4613      	mov	r3, r2
 8003958:	011b      	lsls	r3, r3, #4
 800395a:	1a9b      	subs	r3, r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	440b      	add	r3, r1
 8003960:	3344      	adds	r3, #68	@ 0x44
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	1c59      	adds	r1, r3, #1
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	4613      	mov	r3, r2
 800396a:	011b      	lsls	r3, r3, #4
 800396c:	1a9b      	subs	r3, r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	4403      	add	r3, r0
 8003972:	3344      	adds	r3, #68	@ 0x44
 8003974:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003976:	78fa      	ldrb	r2, [r7, #3]
 8003978:	6879      	ldr	r1, [r7, #4]
 800397a:	4613      	mov	r3, r2
 800397c:	011b      	lsls	r3, r3, #4
 800397e:	1a9b      	subs	r3, r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	440b      	add	r3, r1
 8003984:	334c      	adds	r3, #76	@ 0x4c
 8003986:	2204      	movs	r2, #4
 8003988:	701a      	strb	r2, [r3, #0]
 800398a:	e00d      	b.n	80039a8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800398c:	78fa      	ldrb	r2, [r7, #3]
 800398e:	6879      	ldr	r1, [r7, #4]
 8003990:	4613      	mov	r3, r2
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	1a9b      	subs	r3, r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	440b      	add	r3, r1
 800399a:	334d      	adds	r3, #77	@ 0x4d
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	2b02      	cmp	r3, #2
 80039a0:	f000 8100 	beq.w	8003ba4 <HCD_HC_IN_IRQHandler+0xcca>
 80039a4:	e000      	b.n	80039a8 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80039a6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80039a8:	78fa      	ldrb	r2, [r7, #3]
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	4613      	mov	r3, r2
 80039ae:	011b      	lsls	r3, r3, #4
 80039b0:	1a9b      	subs	r3, r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	334c      	adds	r3, #76	@ 0x4c
 80039b8:	781a      	ldrb	r2, [r3, #0]
 80039ba:	78fb      	ldrb	r3, [r7, #3]
 80039bc:	4619      	mov	r1, r3
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f005 fe10 	bl	80095e4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80039c4:	e0ef      	b.n	8003ba6 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	78fa      	ldrb	r2, [r7, #3]
 80039cc:	4611      	mov	r1, r2
 80039ce:	4618      	mov	r0, r3
 80039d0:	f002 fd0c 	bl	80063ec <USB_ReadChInterrupts>
 80039d4:	4603      	mov	r3, r0
 80039d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039da:	2b40      	cmp	r3, #64	@ 0x40
 80039dc:	d12f      	bne.n	8003a3e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80039de:	78fb      	ldrb	r3, [r7, #3]
 80039e0:	015a      	lsls	r2, r3, #5
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	4413      	add	r3, r2
 80039e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039ea:	461a      	mov	r2, r3
 80039ec:	2340      	movs	r3, #64	@ 0x40
 80039ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80039f0:	78fa      	ldrb	r2, [r7, #3]
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	4613      	mov	r3, r2
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	1a9b      	subs	r3, r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	440b      	add	r3, r1
 80039fe:	334d      	adds	r3, #77	@ 0x4d
 8003a00:	2205      	movs	r2, #5
 8003a02:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003a04:	78fa      	ldrb	r2, [r7, #3]
 8003a06:	6879      	ldr	r1, [r7, #4]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	011b      	lsls	r3, r3, #4
 8003a0c:	1a9b      	subs	r3, r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	440b      	add	r3, r1
 8003a12:	331a      	adds	r3, #26
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d109      	bne.n	8003a2e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003a1a:	78fa      	ldrb	r2, [r7, #3]
 8003a1c:	6879      	ldr	r1, [r7, #4]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	011b      	lsls	r3, r3, #4
 8003a22:	1a9b      	subs	r3, r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	440b      	add	r3, r1
 8003a28:	3344      	adds	r3, #68	@ 0x44
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	78fa      	ldrb	r2, [r7, #3]
 8003a34:	4611      	mov	r1, r2
 8003a36:	4618      	mov	r0, r3
 8003a38:	f003 fa7b 	bl	8006f32 <USB_HC_Halt>
 8003a3c:	e0b3      	b.n	8003ba6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	78fa      	ldrb	r2, [r7, #3]
 8003a44:	4611      	mov	r1, r2
 8003a46:	4618      	mov	r0, r3
 8003a48:	f002 fcd0 	bl	80063ec <USB_ReadChInterrupts>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	f003 0310 	and.w	r3, r3, #16
 8003a52:	2b10      	cmp	r3, #16
 8003a54:	f040 80a7 	bne.w	8003ba6 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003a58:	78fa      	ldrb	r2, [r7, #3]
 8003a5a:	6879      	ldr	r1, [r7, #4]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	011b      	lsls	r3, r3, #4
 8003a60:	1a9b      	subs	r3, r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	440b      	add	r3, r1
 8003a66:	3326      	adds	r3, #38	@ 0x26
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	2b03      	cmp	r3, #3
 8003a6c:	d11b      	bne.n	8003aa6 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003a6e:	78fa      	ldrb	r2, [r7, #3]
 8003a70:	6879      	ldr	r1, [r7, #4]
 8003a72:	4613      	mov	r3, r2
 8003a74:	011b      	lsls	r3, r3, #4
 8003a76:	1a9b      	subs	r3, r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	440b      	add	r3, r1
 8003a7c:	3344      	adds	r3, #68	@ 0x44
 8003a7e:	2200      	movs	r2, #0
 8003a80:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003a82:	78fa      	ldrb	r2, [r7, #3]
 8003a84:	6879      	ldr	r1, [r7, #4]
 8003a86:	4613      	mov	r3, r2
 8003a88:	011b      	lsls	r3, r3, #4
 8003a8a:	1a9b      	subs	r3, r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	440b      	add	r3, r1
 8003a90:	334d      	adds	r3, #77	@ 0x4d
 8003a92:	2204      	movs	r2, #4
 8003a94:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	78fa      	ldrb	r2, [r7, #3]
 8003a9c:	4611      	mov	r1, r2
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f003 fa47 	bl	8006f32 <USB_HC_Halt>
 8003aa4:	e03f      	b.n	8003b26 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003aa6:	78fa      	ldrb	r2, [r7, #3]
 8003aa8:	6879      	ldr	r1, [r7, #4]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	011b      	lsls	r3, r3, #4
 8003aae:	1a9b      	subs	r3, r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	440b      	add	r3, r1
 8003ab4:	3326      	adds	r3, #38	@ 0x26
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00a      	beq.n	8003ad2 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003abc:	78fa      	ldrb	r2, [r7, #3]
 8003abe:	6879      	ldr	r1, [r7, #4]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	011b      	lsls	r3, r3, #4
 8003ac4:	1a9b      	subs	r3, r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	3326      	adds	r3, #38	@ 0x26
 8003acc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d129      	bne.n	8003b26 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003ad2:	78fa      	ldrb	r2, [r7, #3]
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	1a9b      	subs	r3, r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	440b      	add	r3, r1
 8003ae0:	3344      	adds	r3, #68	@ 0x44
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	799b      	ldrb	r3, [r3, #6]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00a      	beq.n	8003b04 <HCD_HC_IN_IRQHandler+0xc2a>
 8003aee:	78fa      	ldrb	r2, [r7, #3]
 8003af0:	6879      	ldr	r1, [r7, #4]
 8003af2:	4613      	mov	r3, r2
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	1a9b      	subs	r3, r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	440b      	add	r3, r1
 8003afc:	331b      	adds	r3, #27
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d110      	bne.n	8003b26 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003b04:	78fa      	ldrb	r2, [r7, #3]
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	011b      	lsls	r3, r3, #4
 8003b0c:	1a9b      	subs	r3, r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	334d      	adds	r3, #77	@ 0x4d
 8003b14:	2204      	movs	r2, #4
 8003b16:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	78fa      	ldrb	r2, [r7, #3]
 8003b1e:	4611      	mov	r1, r2
 8003b20:	4618      	mov	r0, r3
 8003b22:	f003 fa06 	bl	8006f32 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003b26:	78fa      	ldrb	r2, [r7, #3]
 8003b28:	6879      	ldr	r1, [r7, #4]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	1a9b      	subs	r3, r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	440b      	add	r3, r1
 8003b34:	331b      	adds	r3, #27
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d129      	bne.n	8003b90 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003b3c:	78fa      	ldrb	r2, [r7, #3]
 8003b3e:	6879      	ldr	r1, [r7, #4]
 8003b40:	4613      	mov	r3, r2
 8003b42:	011b      	lsls	r3, r3, #4
 8003b44:	1a9b      	subs	r3, r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	440b      	add	r3, r1
 8003b4a:	331b      	adds	r3, #27
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003b50:	78fb      	ldrb	r3, [r7, #3]
 8003b52:	015a      	lsls	r2, r3, #5
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	4413      	add	r3, r2
 8003b58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	78fa      	ldrb	r2, [r7, #3]
 8003b60:	0151      	lsls	r1, r2, #5
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	440a      	add	r2, r1
 8003b66:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b6e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003b70:	78fb      	ldrb	r3, [r7, #3]
 8003b72:	015a      	lsls	r2, r3, #5
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	4413      	add	r3, r2
 8003b78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	78fa      	ldrb	r2, [r7, #3]
 8003b80:	0151      	lsls	r1, r2, #5
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	440a      	add	r2, r1
 8003b86:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b8a:	f043 0320 	orr.w	r3, r3, #32
 8003b8e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003b90:	78fb      	ldrb	r3, [r7, #3]
 8003b92:	015a      	lsls	r2, r3, #5
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	4413      	add	r3, r2
 8003b98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	2310      	movs	r3, #16
 8003ba0:	6093      	str	r3, [r2, #8]
 8003ba2:	e000      	b.n	8003ba6 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003ba4:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003ba6:	3718      	adds	r7, #24
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	78fa      	ldrb	r2, [r7, #3]
 8003bc8:	4611      	mov	r1, r2
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f002 fc0e 	bl	80063ec <USB_ReadChInterrupts>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	f003 0304 	and.w	r3, r3, #4
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d11b      	bne.n	8003c12 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003bda:	78fb      	ldrb	r3, [r7, #3]
 8003bdc:	015a      	lsls	r2, r3, #5
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	4413      	add	r3, r2
 8003be2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003be6:	461a      	mov	r2, r3
 8003be8:	2304      	movs	r3, #4
 8003bea:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003bec:	78fa      	ldrb	r2, [r7, #3]
 8003bee:	6879      	ldr	r1, [r7, #4]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	011b      	lsls	r3, r3, #4
 8003bf4:	1a9b      	subs	r3, r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	440b      	add	r3, r1
 8003bfa:	334d      	adds	r3, #77	@ 0x4d
 8003bfc:	2207      	movs	r2, #7
 8003bfe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	78fa      	ldrb	r2, [r7, #3]
 8003c06:	4611      	mov	r1, r2
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f003 f992 	bl	8006f32 <USB_HC_Halt>
 8003c0e:	f000 bc89 	b.w	8004524 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	78fa      	ldrb	r2, [r7, #3]
 8003c18:	4611      	mov	r1, r2
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f002 fbe6 	bl	80063ec <USB_ReadChInterrupts>
 8003c20:	4603      	mov	r3, r0
 8003c22:	f003 0320 	and.w	r3, r3, #32
 8003c26:	2b20      	cmp	r3, #32
 8003c28:	f040 8082 	bne.w	8003d30 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003c2c:	78fb      	ldrb	r3, [r7, #3]
 8003c2e:	015a      	lsls	r2, r3, #5
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	4413      	add	r3, r2
 8003c34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c38:	461a      	mov	r2, r3
 8003c3a:	2320      	movs	r3, #32
 8003c3c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003c3e:	78fa      	ldrb	r2, [r7, #3]
 8003c40:	6879      	ldr	r1, [r7, #4]
 8003c42:	4613      	mov	r3, r2
 8003c44:	011b      	lsls	r3, r3, #4
 8003c46:	1a9b      	subs	r3, r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	440b      	add	r3, r1
 8003c4c:	3319      	adds	r3, #25
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d124      	bne.n	8003c9e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003c54:	78fa      	ldrb	r2, [r7, #3]
 8003c56:	6879      	ldr	r1, [r7, #4]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	011b      	lsls	r3, r3, #4
 8003c5c:	1a9b      	subs	r3, r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	440b      	add	r3, r1
 8003c62:	3319      	adds	r3, #25
 8003c64:	2200      	movs	r2, #0
 8003c66:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c68:	78fa      	ldrb	r2, [r7, #3]
 8003c6a:	6879      	ldr	r1, [r7, #4]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	011b      	lsls	r3, r3, #4
 8003c70:	1a9b      	subs	r3, r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	440b      	add	r3, r1
 8003c76:	334c      	adds	r3, #76	@ 0x4c
 8003c78:	2202      	movs	r2, #2
 8003c7a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003c7c:	78fa      	ldrb	r2, [r7, #3]
 8003c7e:	6879      	ldr	r1, [r7, #4]
 8003c80:	4613      	mov	r3, r2
 8003c82:	011b      	lsls	r3, r3, #4
 8003c84:	1a9b      	subs	r3, r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	440b      	add	r3, r1
 8003c8a:	334d      	adds	r3, #77	@ 0x4d
 8003c8c:	2203      	movs	r2, #3
 8003c8e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	78fa      	ldrb	r2, [r7, #3]
 8003c96:	4611      	mov	r1, r2
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f003 f94a 	bl	8006f32 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003c9e:	78fa      	ldrb	r2, [r7, #3]
 8003ca0:	6879      	ldr	r1, [r7, #4]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	011b      	lsls	r3, r3, #4
 8003ca6:	1a9b      	subs	r3, r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	440b      	add	r3, r1
 8003cac:	331a      	adds	r3, #26
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	f040 8437 	bne.w	8004524 <HCD_HC_OUT_IRQHandler+0x978>
 8003cb6:	78fa      	ldrb	r2, [r7, #3]
 8003cb8:	6879      	ldr	r1, [r7, #4]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	011b      	lsls	r3, r3, #4
 8003cbe:	1a9b      	subs	r3, r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	440b      	add	r3, r1
 8003cc4:	331b      	adds	r3, #27
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f040 842b 	bne.w	8004524 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003cce:	78fa      	ldrb	r2, [r7, #3]
 8003cd0:	6879      	ldr	r1, [r7, #4]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	011b      	lsls	r3, r3, #4
 8003cd6:	1a9b      	subs	r3, r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	440b      	add	r3, r1
 8003cdc:	3326      	adds	r3, #38	@ 0x26
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d009      	beq.n	8003cf8 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003ce4:	78fa      	ldrb	r2, [r7, #3]
 8003ce6:	6879      	ldr	r1, [r7, #4]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	011b      	lsls	r3, r3, #4
 8003cec:	1a9b      	subs	r3, r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	440b      	add	r3, r1
 8003cf2:	331b      	adds	r3, #27
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003cf8:	78fa      	ldrb	r2, [r7, #3]
 8003cfa:	6879      	ldr	r1, [r7, #4]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	1a9b      	subs	r3, r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	440b      	add	r3, r1
 8003d06:	334d      	adds	r3, #77	@ 0x4d
 8003d08:	2203      	movs	r2, #3
 8003d0a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	78fa      	ldrb	r2, [r7, #3]
 8003d12:	4611      	mov	r1, r2
 8003d14:	4618      	mov	r0, r3
 8003d16:	f003 f90c 	bl	8006f32 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003d1a:	78fa      	ldrb	r2, [r7, #3]
 8003d1c:	6879      	ldr	r1, [r7, #4]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	011b      	lsls	r3, r3, #4
 8003d22:	1a9b      	subs	r3, r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	440b      	add	r3, r1
 8003d28:	3344      	adds	r3, #68	@ 0x44
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	e3f9      	b.n	8004524 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	78fa      	ldrb	r2, [r7, #3]
 8003d36:	4611      	mov	r1, r2
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f002 fb57 	bl	80063ec <USB_ReadChInterrupts>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d48:	d111      	bne.n	8003d6e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003d4a:	78fb      	ldrb	r3, [r7, #3]
 8003d4c:	015a      	lsls	r2, r3, #5
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	4413      	add	r3, r2
 8003d52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d56:	461a      	mov	r2, r3
 8003d58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d5c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	78fa      	ldrb	r2, [r7, #3]
 8003d64:	4611      	mov	r1, r2
 8003d66:	4618      	mov	r0, r3
 8003d68:	f003 f8e3 	bl	8006f32 <USB_HC_Halt>
 8003d6c:	e3da      	b.n	8004524 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	78fa      	ldrb	r2, [r7, #3]
 8003d74:	4611      	mov	r1, r2
 8003d76:	4618      	mov	r0, r3
 8003d78:	f002 fb38 	bl	80063ec <USB_ReadChInterrupts>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d168      	bne.n	8003e58 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003d86:	78fa      	ldrb	r2, [r7, #3]
 8003d88:	6879      	ldr	r1, [r7, #4]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	011b      	lsls	r3, r3, #4
 8003d8e:	1a9b      	subs	r3, r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	440b      	add	r3, r1
 8003d94:	3344      	adds	r3, #68	@ 0x44
 8003d96:	2200      	movs	r2, #0
 8003d98:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	78fa      	ldrb	r2, [r7, #3]
 8003da0:	4611      	mov	r1, r2
 8003da2:	4618      	mov	r0, r3
 8003da4:	f002 fb22 	bl	80063ec <USB_ReadChInterrupts>
 8003da8:	4603      	mov	r3, r0
 8003daa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dae:	2b40      	cmp	r3, #64	@ 0x40
 8003db0:	d112      	bne.n	8003dd8 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003db2:	78fa      	ldrb	r2, [r7, #3]
 8003db4:	6879      	ldr	r1, [r7, #4]
 8003db6:	4613      	mov	r3, r2
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	1a9b      	subs	r3, r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	440b      	add	r3, r1
 8003dc0:	3319      	adds	r3, #25
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003dc6:	78fb      	ldrb	r3, [r7, #3]
 8003dc8:	015a      	lsls	r2, r3, #5
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	4413      	add	r3, r2
 8003dce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	2340      	movs	r3, #64	@ 0x40
 8003dd6:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003dd8:	78fa      	ldrb	r2, [r7, #3]
 8003dda:	6879      	ldr	r1, [r7, #4]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	011b      	lsls	r3, r3, #4
 8003de0:	1a9b      	subs	r3, r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	440b      	add	r3, r1
 8003de6:	331b      	adds	r3, #27
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d019      	beq.n	8003e22 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003dee:	78fa      	ldrb	r2, [r7, #3]
 8003df0:	6879      	ldr	r1, [r7, #4]
 8003df2:	4613      	mov	r3, r2
 8003df4:	011b      	lsls	r3, r3, #4
 8003df6:	1a9b      	subs	r3, r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	440b      	add	r3, r1
 8003dfc:	331b      	adds	r3, #27
 8003dfe:	2200      	movs	r2, #0
 8003e00:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003e02:	78fb      	ldrb	r3, [r7, #3]
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	78fa      	ldrb	r2, [r7, #3]
 8003e12:	0151      	lsls	r1, r2, #5
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	440a      	add	r2, r1
 8003e18:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e20:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003e22:	78fb      	ldrb	r3, [r7, #3]
 8003e24:	015a      	lsls	r2, r3, #5
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	4413      	add	r3, r2
 8003e2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e2e:	461a      	mov	r2, r3
 8003e30:	2301      	movs	r3, #1
 8003e32:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003e34:	78fa      	ldrb	r2, [r7, #3]
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	011b      	lsls	r3, r3, #4
 8003e3c:	1a9b      	subs	r3, r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	440b      	add	r3, r1
 8003e42:	334d      	adds	r3, #77	@ 0x4d
 8003e44:	2201      	movs	r2, #1
 8003e46:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	78fa      	ldrb	r2, [r7, #3]
 8003e4e:	4611      	mov	r1, r2
 8003e50:	4618      	mov	r0, r3
 8003e52:	f003 f86e 	bl	8006f32 <USB_HC_Halt>
 8003e56:	e365      	b.n	8004524 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	78fa      	ldrb	r2, [r7, #3]
 8003e5e:	4611      	mov	r1, r2
 8003e60:	4618      	mov	r0, r3
 8003e62:	f002 fac3 	bl	80063ec <USB_ReadChInterrupts>
 8003e66:	4603      	mov	r3, r0
 8003e68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e6c:	2b40      	cmp	r3, #64	@ 0x40
 8003e6e:	d139      	bne.n	8003ee4 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003e70:	78fa      	ldrb	r2, [r7, #3]
 8003e72:	6879      	ldr	r1, [r7, #4]
 8003e74:	4613      	mov	r3, r2
 8003e76:	011b      	lsls	r3, r3, #4
 8003e78:	1a9b      	subs	r3, r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	334d      	adds	r3, #77	@ 0x4d
 8003e80:	2205      	movs	r2, #5
 8003e82:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003e84:	78fa      	ldrb	r2, [r7, #3]
 8003e86:	6879      	ldr	r1, [r7, #4]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	011b      	lsls	r3, r3, #4
 8003e8c:	1a9b      	subs	r3, r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	440b      	add	r3, r1
 8003e92:	331a      	adds	r3, #26
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d109      	bne.n	8003eae <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003e9a:	78fa      	ldrb	r2, [r7, #3]
 8003e9c:	6879      	ldr	r1, [r7, #4]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	011b      	lsls	r3, r3, #4
 8003ea2:	1a9b      	subs	r3, r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	440b      	add	r3, r1
 8003ea8:	3319      	adds	r3, #25
 8003eaa:	2201      	movs	r2, #1
 8003eac:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003eae:	78fa      	ldrb	r2, [r7, #3]
 8003eb0:	6879      	ldr	r1, [r7, #4]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	011b      	lsls	r3, r3, #4
 8003eb6:	1a9b      	subs	r3, r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	440b      	add	r3, r1
 8003ebc:	3344      	adds	r3, #68	@ 0x44
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	78fa      	ldrb	r2, [r7, #3]
 8003ec8:	4611      	mov	r1, r2
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f003 f831 	bl	8006f32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003ed0:	78fb      	ldrb	r3, [r7, #3]
 8003ed2:	015a      	lsls	r2, r3, #5
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003edc:	461a      	mov	r2, r3
 8003ede:	2340      	movs	r3, #64	@ 0x40
 8003ee0:	6093      	str	r3, [r2, #8]
 8003ee2:	e31f      	b.n	8004524 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	78fa      	ldrb	r2, [r7, #3]
 8003eea:	4611      	mov	r1, r2
 8003eec:	4618      	mov	r0, r3
 8003eee:	f002 fa7d 	bl	80063ec <USB_ReadChInterrupts>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	f003 0308 	and.w	r3, r3, #8
 8003ef8:	2b08      	cmp	r3, #8
 8003efa:	d11a      	bne.n	8003f32 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003efc:	78fb      	ldrb	r3, [r7, #3]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f08:	461a      	mov	r2, r3
 8003f0a:	2308      	movs	r3, #8
 8003f0c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003f0e:	78fa      	ldrb	r2, [r7, #3]
 8003f10:	6879      	ldr	r1, [r7, #4]
 8003f12:	4613      	mov	r3, r2
 8003f14:	011b      	lsls	r3, r3, #4
 8003f16:	1a9b      	subs	r3, r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	440b      	add	r3, r1
 8003f1c:	334d      	adds	r3, #77	@ 0x4d
 8003f1e:	2206      	movs	r2, #6
 8003f20:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	78fa      	ldrb	r2, [r7, #3]
 8003f28:	4611      	mov	r1, r2
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f003 f801 	bl	8006f32 <USB_HC_Halt>
 8003f30:	e2f8      	b.n	8004524 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	78fa      	ldrb	r2, [r7, #3]
 8003f38:	4611      	mov	r1, r2
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f002 fa56 	bl	80063ec <USB_ReadChInterrupts>
 8003f40:	4603      	mov	r3, r0
 8003f42:	f003 0310 	and.w	r3, r3, #16
 8003f46:	2b10      	cmp	r3, #16
 8003f48:	d144      	bne.n	8003fd4 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003f4a:	78fa      	ldrb	r2, [r7, #3]
 8003f4c:	6879      	ldr	r1, [r7, #4]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	011b      	lsls	r3, r3, #4
 8003f52:	1a9b      	subs	r3, r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	440b      	add	r3, r1
 8003f58:	3344      	adds	r3, #68	@ 0x44
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003f5e:	78fa      	ldrb	r2, [r7, #3]
 8003f60:	6879      	ldr	r1, [r7, #4]
 8003f62:	4613      	mov	r3, r2
 8003f64:	011b      	lsls	r3, r3, #4
 8003f66:	1a9b      	subs	r3, r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	440b      	add	r3, r1
 8003f6c:	334d      	adds	r3, #77	@ 0x4d
 8003f6e:	2204      	movs	r2, #4
 8003f70:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003f72:	78fa      	ldrb	r2, [r7, #3]
 8003f74:	6879      	ldr	r1, [r7, #4]
 8003f76:	4613      	mov	r3, r2
 8003f78:	011b      	lsls	r3, r3, #4
 8003f7a:	1a9b      	subs	r3, r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	440b      	add	r3, r1
 8003f80:	3319      	adds	r3, #25
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d114      	bne.n	8003fb2 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003f88:	78fa      	ldrb	r2, [r7, #3]
 8003f8a:	6879      	ldr	r1, [r7, #4]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	011b      	lsls	r3, r3, #4
 8003f90:	1a9b      	subs	r3, r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	440b      	add	r3, r1
 8003f96:	3318      	adds	r3, #24
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d109      	bne.n	8003fb2 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003f9e:	78fa      	ldrb	r2, [r7, #3]
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	011b      	lsls	r3, r3, #4
 8003fa6:	1a9b      	subs	r3, r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	440b      	add	r3, r1
 8003fac:	3319      	adds	r3, #25
 8003fae:	2201      	movs	r2, #1
 8003fb0:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	78fa      	ldrb	r2, [r7, #3]
 8003fb8:	4611      	mov	r1, r2
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f002 ffb9 	bl	8006f32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003fc0:	78fb      	ldrb	r3, [r7, #3]
 8003fc2:	015a      	lsls	r2, r3, #5
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fcc:	461a      	mov	r2, r3
 8003fce:	2310      	movs	r3, #16
 8003fd0:	6093      	str	r3, [r2, #8]
 8003fd2:	e2a7      	b.n	8004524 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	78fa      	ldrb	r2, [r7, #3]
 8003fda:	4611      	mov	r1, r2
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f002 fa05 	bl	80063ec <USB_ReadChInterrupts>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fe8:	2b80      	cmp	r3, #128	@ 0x80
 8003fea:	f040 8083 	bne.w	80040f4 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	799b      	ldrb	r3, [r3, #6]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d111      	bne.n	800401a <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003ff6:	78fa      	ldrb	r2, [r7, #3]
 8003ff8:	6879      	ldr	r1, [r7, #4]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	011b      	lsls	r3, r3, #4
 8003ffe:	1a9b      	subs	r3, r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	440b      	add	r3, r1
 8004004:	334d      	adds	r3, #77	@ 0x4d
 8004006:	2207      	movs	r2, #7
 8004008:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	78fa      	ldrb	r2, [r7, #3]
 8004010:	4611      	mov	r1, r2
 8004012:	4618      	mov	r0, r3
 8004014:	f002 ff8d 	bl	8006f32 <USB_HC_Halt>
 8004018:	e062      	b.n	80040e0 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800401a:	78fa      	ldrb	r2, [r7, #3]
 800401c:	6879      	ldr	r1, [r7, #4]
 800401e:	4613      	mov	r3, r2
 8004020:	011b      	lsls	r3, r3, #4
 8004022:	1a9b      	subs	r3, r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	440b      	add	r3, r1
 8004028:	3344      	adds	r3, #68	@ 0x44
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	1c59      	adds	r1, r3, #1
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	4613      	mov	r3, r2
 8004032:	011b      	lsls	r3, r3, #4
 8004034:	1a9b      	subs	r3, r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4403      	add	r3, r0
 800403a:	3344      	adds	r3, #68	@ 0x44
 800403c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800403e:	78fa      	ldrb	r2, [r7, #3]
 8004040:	6879      	ldr	r1, [r7, #4]
 8004042:	4613      	mov	r3, r2
 8004044:	011b      	lsls	r3, r3, #4
 8004046:	1a9b      	subs	r3, r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	440b      	add	r3, r1
 800404c:	3344      	adds	r3, #68	@ 0x44
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2b02      	cmp	r3, #2
 8004052:	d922      	bls.n	800409a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004054:	78fa      	ldrb	r2, [r7, #3]
 8004056:	6879      	ldr	r1, [r7, #4]
 8004058:	4613      	mov	r3, r2
 800405a:	011b      	lsls	r3, r3, #4
 800405c:	1a9b      	subs	r3, r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	440b      	add	r3, r1
 8004062:	3344      	adds	r3, #68	@ 0x44
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004068:	78fa      	ldrb	r2, [r7, #3]
 800406a:	6879      	ldr	r1, [r7, #4]
 800406c:	4613      	mov	r3, r2
 800406e:	011b      	lsls	r3, r3, #4
 8004070:	1a9b      	subs	r3, r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	440b      	add	r3, r1
 8004076:	334c      	adds	r3, #76	@ 0x4c
 8004078:	2204      	movs	r2, #4
 800407a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800407c:	78fa      	ldrb	r2, [r7, #3]
 800407e:	6879      	ldr	r1, [r7, #4]
 8004080:	4613      	mov	r3, r2
 8004082:	011b      	lsls	r3, r3, #4
 8004084:	1a9b      	subs	r3, r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	440b      	add	r3, r1
 800408a:	334c      	adds	r3, #76	@ 0x4c
 800408c:	781a      	ldrb	r2, [r3, #0]
 800408e:	78fb      	ldrb	r3, [r7, #3]
 8004090:	4619      	mov	r1, r3
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f005 faa6 	bl	80095e4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004098:	e022      	b.n	80040e0 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800409a:	78fa      	ldrb	r2, [r7, #3]
 800409c:	6879      	ldr	r1, [r7, #4]
 800409e:	4613      	mov	r3, r2
 80040a0:	011b      	lsls	r3, r3, #4
 80040a2:	1a9b      	subs	r3, r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	440b      	add	r3, r1
 80040a8:	334c      	adds	r3, #76	@ 0x4c
 80040aa:	2202      	movs	r2, #2
 80040ac:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80040ae:	78fb      	ldrb	r3, [r7, #3]
 80040b0:	015a      	lsls	r2, r3, #5
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	4413      	add	r3, r2
 80040b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80040c4:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80040cc:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80040ce:	78fb      	ldrb	r3, [r7, #3]
 80040d0:	015a      	lsls	r2, r3, #5
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	4413      	add	r3, r2
 80040d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040da:	461a      	mov	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80040e0:	78fb      	ldrb	r3, [r7, #3]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040ec:	461a      	mov	r2, r3
 80040ee:	2380      	movs	r3, #128	@ 0x80
 80040f0:	6093      	str	r3, [r2, #8]
 80040f2:	e217      	b.n	8004524 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	78fa      	ldrb	r2, [r7, #3]
 80040fa:	4611      	mov	r1, r2
 80040fc:	4618      	mov	r0, r3
 80040fe:	f002 f975 	bl	80063ec <USB_ReadChInterrupts>
 8004102:	4603      	mov	r3, r0
 8004104:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004108:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800410c:	d11b      	bne.n	8004146 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800410e:	78fa      	ldrb	r2, [r7, #3]
 8004110:	6879      	ldr	r1, [r7, #4]
 8004112:	4613      	mov	r3, r2
 8004114:	011b      	lsls	r3, r3, #4
 8004116:	1a9b      	subs	r3, r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	440b      	add	r3, r1
 800411c:	334d      	adds	r3, #77	@ 0x4d
 800411e:	2209      	movs	r2, #9
 8004120:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	78fa      	ldrb	r2, [r7, #3]
 8004128:	4611      	mov	r1, r2
 800412a:	4618      	mov	r0, r3
 800412c:	f002 ff01 	bl	8006f32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004130:	78fb      	ldrb	r3, [r7, #3]
 8004132:	015a      	lsls	r2, r3, #5
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	4413      	add	r3, r2
 8004138:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800413c:	461a      	mov	r2, r3
 800413e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004142:	6093      	str	r3, [r2, #8]
 8004144:	e1ee      	b.n	8004524 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	78fa      	ldrb	r2, [r7, #3]
 800414c:	4611      	mov	r1, r2
 800414e:	4618      	mov	r0, r3
 8004150:	f002 f94c 	bl	80063ec <USB_ReadChInterrupts>
 8004154:	4603      	mov	r3, r0
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b02      	cmp	r3, #2
 800415c:	f040 81df 	bne.w	800451e <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004160:	78fb      	ldrb	r3, [r7, #3]
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	4413      	add	r3, r2
 8004168:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800416c:	461a      	mov	r2, r3
 800416e:	2302      	movs	r3, #2
 8004170:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004172:	78fa      	ldrb	r2, [r7, #3]
 8004174:	6879      	ldr	r1, [r7, #4]
 8004176:	4613      	mov	r3, r2
 8004178:	011b      	lsls	r3, r3, #4
 800417a:	1a9b      	subs	r3, r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	440b      	add	r3, r1
 8004180:	334d      	adds	r3, #77	@ 0x4d
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	2b01      	cmp	r3, #1
 8004186:	f040 8093 	bne.w	80042b0 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800418a:	78fa      	ldrb	r2, [r7, #3]
 800418c:	6879      	ldr	r1, [r7, #4]
 800418e:	4613      	mov	r3, r2
 8004190:	011b      	lsls	r3, r3, #4
 8004192:	1a9b      	subs	r3, r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	440b      	add	r3, r1
 8004198:	334d      	adds	r3, #77	@ 0x4d
 800419a:	2202      	movs	r2, #2
 800419c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800419e:	78fa      	ldrb	r2, [r7, #3]
 80041a0:	6879      	ldr	r1, [r7, #4]
 80041a2:	4613      	mov	r3, r2
 80041a4:	011b      	lsls	r3, r3, #4
 80041a6:	1a9b      	subs	r3, r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	440b      	add	r3, r1
 80041ac:	334c      	adds	r3, #76	@ 0x4c
 80041ae:	2201      	movs	r2, #1
 80041b0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80041b2:	78fa      	ldrb	r2, [r7, #3]
 80041b4:	6879      	ldr	r1, [r7, #4]
 80041b6:	4613      	mov	r3, r2
 80041b8:	011b      	lsls	r3, r3, #4
 80041ba:	1a9b      	subs	r3, r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	440b      	add	r3, r1
 80041c0:	3326      	adds	r3, #38	@ 0x26
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d00b      	beq.n	80041e0 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80041c8:	78fa      	ldrb	r2, [r7, #3]
 80041ca:	6879      	ldr	r1, [r7, #4]
 80041cc:	4613      	mov	r3, r2
 80041ce:	011b      	lsls	r3, r3, #4
 80041d0:	1a9b      	subs	r3, r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	440b      	add	r3, r1
 80041d6:	3326      	adds	r3, #38	@ 0x26
 80041d8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80041da:	2b03      	cmp	r3, #3
 80041dc:	f040 8190 	bne.w	8004500 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	799b      	ldrb	r3, [r3, #6]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d115      	bne.n	8004214 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80041e8:	78fa      	ldrb	r2, [r7, #3]
 80041ea:	6879      	ldr	r1, [r7, #4]
 80041ec:	4613      	mov	r3, r2
 80041ee:	011b      	lsls	r3, r3, #4
 80041f0:	1a9b      	subs	r3, r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	440b      	add	r3, r1
 80041f6:	333d      	adds	r3, #61	@ 0x3d
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	78fa      	ldrb	r2, [r7, #3]
 80041fc:	f083 0301 	eor.w	r3, r3, #1
 8004200:	b2d8      	uxtb	r0, r3
 8004202:	6879      	ldr	r1, [r7, #4]
 8004204:	4613      	mov	r3, r2
 8004206:	011b      	lsls	r3, r3, #4
 8004208:	1a9b      	subs	r3, r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	440b      	add	r3, r1
 800420e:	333d      	adds	r3, #61	@ 0x3d
 8004210:	4602      	mov	r2, r0
 8004212:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	799b      	ldrb	r3, [r3, #6]
 8004218:	2b01      	cmp	r3, #1
 800421a:	f040 8171 	bne.w	8004500 <HCD_HC_OUT_IRQHandler+0x954>
 800421e:	78fa      	ldrb	r2, [r7, #3]
 8004220:	6879      	ldr	r1, [r7, #4]
 8004222:	4613      	mov	r3, r2
 8004224:	011b      	lsls	r3, r3, #4
 8004226:	1a9b      	subs	r3, r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	440b      	add	r3, r1
 800422c:	3334      	adds	r3, #52	@ 0x34
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 8165 	beq.w	8004500 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004236:	78fa      	ldrb	r2, [r7, #3]
 8004238:	6879      	ldr	r1, [r7, #4]
 800423a:	4613      	mov	r3, r2
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	1a9b      	subs	r3, r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	440b      	add	r3, r1
 8004244:	3334      	adds	r3, #52	@ 0x34
 8004246:	6819      	ldr	r1, [r3, #0]
 8004248:	78fa      	ldrb	r2, [r7, #3]
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	4613      	mov	r3, r2
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	1a9b      	subs	r3, r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4403      	add	r3, r0
 8004256:	3328      	adds	r3, #40	@ 0x28
 8004258:	881b      	ldrh	r3, [r3, #0]
 800425a:	440b      	add	r3, r1
 800425c:	1e59      	subs	r1, r3, #1
 800425e:	78fa      	ldrb	r2, [r7, #3]
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	4613      	mov	r3, r2
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	1a9b      	subs	r3, r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4403      	add	r3, r0
 800426c:	3328      	adds	r3, #40	@ 0x28
 800426e:	881b      	ldrh	r3, [r3, #0]
 8004270:	fbb1 f3f3 	udiv	r3, r1, r3
 8004274:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b00      	cmp	r3, #0
 800427e:	f000 813f 	beq.w	8004500 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004282:	78fa      	ldrb	r2, [r7, #3]
 8004284:	6879      	ldr	r1, [r7, #4]
 8004286:	4613      	mov	r3, r2
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	1a9b      	subs	r3, r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	440b      	add	r3, r1
 8004290:	333d      	adds	r3, #61	@ 0x3d
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	78fa      	ldrb	r2, [r7, #3]
 8004296:	f083 0301 	eor.w	r3, r3, #1
 800429a:	b2d8      	uxtb	r0, r3
 800429c:	6879      	ldr	r1, [r7, #4]
 800429e:	4613      	mov	r3, r2
 80042a0:	011b      	lsls	r3, r3, #4
 80042a2:	1a9b      	subs	r3, r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	440b      	add	r3, r1
 80042a8:	333d      	adds	r3, #61	@ 0x3d
 80042aa:	4602      	mov	r2, r0
 80042ac:	701a      	strb	r2, [r3, #0]
 80042ae:	e127      	b.n	8004500 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80042b0:	78fa      	ldrb	r2, [r7, #3]
 80042b2:	6879      	ldr	r1, [r7, #4]
 80042b4:	4613      	mov	r3, r2
 80042b6:	011b      	lsls	r3, r3, #4
 80042b8:	1a9b      	subs	r3, r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	440b      	add	r3, r1
 80042be:	334d      	adds	r3, #77	@ 0x4d
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	2b03      	cmp	r3, #3
 80042c4:	d120      	bne.n	8004308 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80042c6:	78fa      	ldrb	r2, [r7, #3]
 80042c8:	6879      	ldr	r1, [r7, #4]
 80042ca:	4613      	mov	r3, r2
 80042cc:	011b      	lsls	r3, r3, #4
 80042ce:	1a9b      	subs	r3, r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	440b      	add	r3, r1
 80042d4:	334d      	adds	r3, #77	@ 0x4d
 80042d6:	2202      	movs	r2, #2
 80042d8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80042da:	78fa      	ldrb	r2, [r7, #3]
 80042dc:	6879      	ldr	r1, [r7, #4]
 80042de:	4613      	mov	r3, r2
 80042e0:	011b      	lsls	r3, r3, #4
 80042e2:	1a9b      	subs	r3, r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	440b      	add	r3, r1
 80042e8:	331b      	adds	r3, #27
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	f040 8107 	bne.w	8004500 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80042f2:	78fa      	ldrb	r2, [r7, #3]
 80042f4:	6879      	ldr	r1, [r7, #4]
 80042f6:	4613      	mov	r3, r2
 80042f8:	011b      	lsls	r3, r3, #4
 80042fa:	1a9b      	subs	r3, r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	440b      	add	r3, r1
 8004300:	334c      	adds	r3, #76	@ 0x4c
 8004302:	2202      	movs	r2, #2
 8004304:	701a      	strb	r2, [r3, #0]
 8004306:	e0fb      	b.n	8004500 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004308:	78fa      	ldrb	r2, [r7, #3]
 800430a:	6879      	ldr	r1, [r7, #4]
 800430c:	4613      	mov	r3, r2
 800430e:	011b      	lsls	r3, r3, #4
 8004310:	1a9b      	subs	r3, r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	440b      	add	r3, r1
 8004316:	334d      	adds	r3, #77	@ 0x4d
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	2b04      	cmp	r3, #4
 800431c:	d13a      	bne.n	8004394 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800431e:	78fa      	ldrb	r2, [r7, #3]
 8004320:	6879      	ldr	r1, [r7, #4]
 8004322:	4613      	mov	r3, r2
 8004324:	011b      	lsls	r3, r3, #4
 8004326:	1a9b      	subs	r3, r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	440b      	add	r3, r1
 800432c:	334d      	adds	r3, #77	@ 0x4d
 800432e:	2202      	movs	r2, #2
 8004330:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004332:	78fa      	ldrb	r2, [r7, #3]
 8004334:	6879      	ldr	r1, [r7, #4]
 8004336:	4613      	mov	r3, r2
 8004338:	011b      	lsls	r3, r3, #4
 800433a:	1a9b      	subs	r3, r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	440b      	add	r3, r1
 8004340:	334c      	adds	r3, #76	@ 0x4c
 8004342:	2202      	movs	r2, #2
 8004344:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004346:	78fa      	ldrb	r2, [r7, #3]
 8004348:	6879      	ldr	r1, [r7, #4]
 800434a:	4613      	mov	r3, r2
 800434c:	011b      	lsls	r3, r3, #4
 800434e:	1a9b      	subs	r3, r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	440b      	add	r3, r1
 8004354:	331b      	adds	r3, #27
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	2b01      	cmp	r3, #1
 800435a:	f040 80d1 	bne.w	8004500 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800435e:	78fa      	ldrb	r2, [r7, #3]
 8004360:	6879      	ldr	r1, [r7, #4]
 8004362:	4613      	mov	r3, r2
 8004364:	011b      	lsls	r3, r3, #4
 8004366:	1a9b      	subs	r3, r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	440b      	add	r3, r1
 800436c:	331b      	adds	r3, #27
 800436e:	2200      	movs	r2, #0
 8004370:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004372:	78fb      	ldrb	r3, [r7, #3]
 8004374:	015a      	lsls	r2, r3, #5
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	4413      	add	r3, r2
 800437a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	78fa      	ldrb	r2, [r7, #3]
 8004382:	0151      	lsls	r1, r2, #5
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	440a      	add	r2, r1
 8004388:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800438c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004390:	6053      	str	r3, [r2, #4]
 8004392:	e0b5      	b.n	8004500 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004394:	78fa      	ldrb	r2, [r7, #3]
 8004396:	6879      	ldr	r1, [r7, #4]
 8004398:	4613      	mov	r3, r2
 800439a:	011b      	lsls	r3, r3, #4
 800439c:	1a9b      	subs	r3, r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	440b      	add	r3, r1
 80043a2:	334d      	adds	r3, #77	@ 0x4d
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	2b05      	cmp	r3, #5
 80043a8:	d114      	bne.n	80043d4 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80043aa:	78fa      	ldrb	r2, [r7, #3]
 80043ac:	6879      	ldr	r1, [r7, #4]
 80043ae:	4613      	mov	r3, r2
 80043b0:	011b      	lsls	r3, r3, #4
 80043b2:	1a9b      	subs	r3, r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	440b      	add	r3, r1
 80043b8:	334d      	adds	r3, #77	@ 0x4d
 80043ba:	2202      	movs	r2, #2
 80043bc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80043be:	78fa      	ldrb	r2, [r7, #3]
 80043c0:	6879      	ldr	r1, [r7, #4]
 80043c2:	4613      	mov	r3, r2
 80043c4:	011b      	lsls	r3, r3, #4
 80043c6:	1a9b      	subs	r3, r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	440b      	add	r3, r1
 80043cc:	334c      	adds	r3, #76	@ 0x4c
 80043ce:	2202      	movs	r2, #2
 80043d0:	701a      	strb	r2, [r3, #0]
 80043d2:	e095      	b.n	8004500 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80043d4:	78fa      	ldrb	r2, [r7, #3]
 80043d6:	6879      	ldr	r1, [r7, #4]
 80043d8:	4613      	mov	r3, r2
 80043da:	011b      	lsls	r3, r3, #4
 80043dc:	1a9b      	subs	r3, r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	440b      	add	r3, r1
 80043e2:	334d      	adds	r3, #77	@ 0x4d
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	2b06      	cmp	r3, #6
 80043e8:	d114      	bne.n	8004414 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80043ea:	78fa      	ldrb	r2, [r7, #3]
 80043ec:	6879      	ldr	r1, [r7, #4]
 80043ee:	4613      	mov	r3, r2
 80043f0:	011b      	lsls	r3, r3, #4
 80043f2:	1a9b      	subs	r3, r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	440b      	add	r3, r1
 80043f8:	334d      	adds	r3, #77	@ 0x4d
 80043fa:	2202      	movs	r2, #2
 80043fc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80043fe:	78fa      	ldrb	r2, [r7, #3]
 8004400:	6879      	ldr	r1, [r7, #4]
 8004402:	4613      	mov	r3, r2
 8004404:	011b      	lsls	r3, r3, #4
 8004406:	1a9b      	subs	r3, r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	440b      	add	r3, r1
 800440c:	334c      	adds	r3, #76	@ 0x4c
 800440e:	2205      	movs	r2, #5
 8004410:	701a      	strb	r2, [r3, #0]
 8004412:	e075      	b.n	8004500 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004414:	78fa      	ldrb	r2, [r7, #3]
 8004416:	6879      	ldr	r1, [r7, #4]
 8004418:	4613      	mov	r3, r2
 800441a:	011b      	lsls	r3, r3, #4
 800441c:	1a9b      	subs	r3, r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	440b      	add	r3, r1
 8004422:	334d      	adds	r3, #77	@ 0x4d
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	2b07      	cmp	r3, #7
 8004428:	d00a      	beq.n	8004440 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800442a:	78fa      	ldrb	r2, [r7, #3]
 800442c:	6879      	ldr	r1, [r7, #4]
 800442e:	4613      	mov	r3, r2
 8004430:	011b      	lsls	r3, r3, #4
 8004432:	1a9b      	subs	r3, r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	440b      	add	r3, r1
 8004438:	334d      	adds	r3, #77	@ 0x4d
 800443a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800443c:	2b09      	cmp	r3, #9
 800443e:	d170      	bne.n	8004522 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004440:	78fa      	ldrb	r2, [r7, #3]
 8004442:	6879      	ldr	r1, [r7, #4]
 8004444:	4613      	mov	r3, r2
 8004446:	011b      	lsls	r3, r3, #4
 8004448:	1a9b      	subs	r3, r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	440b      	add	r3, r1
 800444e:	334d      	adds	r3, #77	@ 0x4d
 8004450:	2202      	movs	r2, #2
 8004452:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004454:	78fa      	ldrb	r2, [r7, #3]
 8004456:	6879      	ldr	r1, [r7, #4]
 8004458:	4613      	mov	r3, r2
 800445a:	011b      	lsls	r3, r3, #4
 800445c:	1a9b      	subs	r3, r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	440b      	add	r3, r1
 8004462:	3344      	adds	r3, #68	@ 0x44
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	1c59      	adds	r1, r3, #1
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	4613      	mov	r3, r2
 800446c:	011b      	lsls	r3, r3, #4
 800446e:	1a9b      	subs	r3, r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	4403      	add	r3, r0
 8004474:	3344      	adds	r3, #68	@ 0x44
 8004476:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004478:	78fa      	ldrb	r2, [r7, #3]
 800447a:	6879      	ldr	r1, [r7, #4]
 800447c:	4613      	mov	r3, r2
 800447e:	011b      	lsls	r3, r3, #4
 8004480:	1a9b      	subs	r3, r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	440b      	add	r3, r1
 8004486:	3344      	adds	r3, #68	@ 0x44
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2b02      	cmp	r3, #2
 800448c:	d914      	bls.n	80044b8 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800448e:	78fa      	ldrb	r2, [r7, #3]
 8004490:	6879      	ldr	r1, [r7, #4]
 8004492:	4613      	mov	r3, r2
 8004494:	011b      	lsls	r3, r3, #4
 8004496:	1a9b      	subs	r3, r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	440b      	add	r3, r1
 800449c:	3344      	adds	r3, #68	@ 0x44
 800449e:	2200      	movs	r2, #0
 80044a0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80044a2:	78fa      	ldrb	r2, [r7, #3]
 80044a4:	6879      	ldr	r1, [r7, #4]
 80044a6:	4613      	mov	r3, r2
 80044a8:	011b      	lsls	r3, r3, #4
 80044aa:	1a9b      	subs	r3, r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	440b      	add	r3, r1
 80044b0:	334c      	adds	r3, #76	@ 0x4c
 80044b2:	2204      	movs	r2, #4
 80044b4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80044b6:	e022      	b.n	80044fe <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80044b8:	78fa      	ldrb	r2, [r7, #3]
 80044ba:	6879      	ldr	r1, [r7, #4]
 80044bc:	4613      	mov	r3, r2
 80044be:	011b      	lsls	r3, r3, #4
 80044c0:	1a9b      	subs	r3, r3, r2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	440b      	add	r3, r1
 80044c6:	334c      	adds	r3, #76	@ 0x4c
 80044c8:	2202      	movs	r2, #2
 80044ca:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80044cc:	78fb      	ldrb	r3, [r7, #3]
 80044ce:	015a      	lsls	r2, r3, #5
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	4413      	add	r3, r2
 80044d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80044e2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80044ea:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80044ec:	78fb      	ldrb	r3, [r7, #3]
 80044ee:	015a      	lsls	r2, r3, #5
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	4413      	add	r3, r2
 80044f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044f8:	461a      	mov	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80044fe:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004500:	78fa      	ldrb	r2, [r7, #3]
 8004502:	6879      	ldr	r1, [r7, #4]
 8004504:	4613      	mov	r3, r2
 8004506:	011b      	lsls	r3, r3, #4
 8004508:	1a9b      	subs	r3, r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	440b      	add	r3, r1
 800450e:	334c      	adds	r3, #76	@ 0x4c
 8004510:	781a      	ldrb	r2, [r3, #0]
 8004512:	78fb      	ldrb	r3, [r7, #3]
 8004514:	4619      	mov	r1, r3
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f005 f864 	bl	80095e4 <HAL_HCD_HC_NotifyURBChange_Callback>
 800451c:	e002      	b.n	8004524 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800451e:	bf00      	nop
 8004520:	e000      	b.n	8004524 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8004522:	bf00      	nop
  }
}
 8004524:	3718      	adds	r7, #24
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b08a      	sub	sp, #40	@ 0x28
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	f003 030f 	and.w	r3, r3, #15
 800454a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	0c5b      	lsrs	r3, r3, #17
 8004550:	f003 030f 	and.w	r3, r3, #15
 8004554:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	091b      	lsrs	r3, r3, #4
 800455a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800455e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	2b02      	cmp	r3, #2
 8004564:	d004      	beq.n	8004570 <HCD_RXQLVL_IRQHandler+0x46>
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	2b05      	cmp	r3, #5
 800456a:	f000 80b6 	beq.w	80046da <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800456e:	e0b7      	b.n	80046e0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	2b00      	cmp	r3, #0
 8004574:	f000 80b3 	beq.w	80046de <HCD_RXQLVL_IRQHandler+0x1b4>
 8004578:	6879      	ldr	r1, [r7, #4]
 800457a:	69ba      	ldr	r2, [r7, #24]
 800457c:	4613      	mov	r3, r2
 800457e:	011b      	lsls	r3, r3, #4
 8004580:	1a9b      	subs	r3, r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	440b      	add	r3, r1
 8004586:	332c      	adds	r3, #44	@ 0x2c
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	f000 80a7 	beq.w	80046de <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004590:	6879      	ldr	r1, [r7, #4]
 8004592:	69ba      	ldr	r2, [r7, #24]
 8004594:	4613      	mov	r3, r2
 8004596:	011b      	lsls	r3, r3, #4
 8004598:	1a9b      	subs	r3, r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	440b      	add	r3, r1
 800459e:	3338      	adds	r3, #56	@ 0x38
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	18d1      	adds	r1, r2, r3
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	4613      	mov	r3, r2
 80045ac:	011b      	lsls	r3, r3, #4
 80045ae:	1a9b      	subs	r3, r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	4403      	add	r3, r0
 80045b4:	3334      	adds	r3, #52	@ 0x34
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4299      	cmp	r1, r3
 80045ba:	f200 8083 	bhi.w	80046c4 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6818      	ldr	r0, [r3, #0]
 80045c2:	6879      	ldr	r1, [r7, #4]
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	4613      	mov	r3, r2
 80045c8:	011b      	lsls	r3, r3, #4
 80045ca:	1a9b      	subs	r3, r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	440b      	add	r3, r1
 80045d0:	332c      	adds	r3, #44	@ 0x2c
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	b292      	uxth	r2, r2
 80045d8:	4619      	mov	r1, r3
 80045da:	f001 fe9c 	bl	8006316 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80045de:	6879      	ldr	r1, [r7, #4]
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	4613      	mov	r3, r2
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	1a9b      	subs	r3, r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	440b      	add	r3, r1
 80045ec:	332c      	adds	r3, #44	@ 0x2c
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	18d1      	adds	r1, r2, r3
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	4613      	mov	r3, r2
 80045fa:	011b      	lsls	r3, r3, #4
 80045fc:	1a9b      	subs	r3, r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4403      	add	r3, r0
 8004602:	332c      	adds	r3, #44	@ 0x2c
 8004604:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004606:	6879      	ldr	r1, [r7, #4]
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	4613      	mov	r3, r2
 800460c:	011b      	lsls	r3, r3, #4
 800460e:	1a9b      	subs	r3, r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	440b      	add	r3, r1
 8004614:	3338      	adds	r3, #56	@ 0x38
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	18d1      	adds	r1, r2, r3
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	4613      	mov	r3, r2
 8004622:	011b      	lsls	r3, r3, #4
 8004624:	1a9b      	subs	r3, r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	4403      	add	r3, r0
 800462a:	3338      	adds	r3, #56	@ 0x38
 800462c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	015a      	lsls	r2, r3, #5
 8004632:	6a3b      	ldr	r3, [r7, #32]
 8004634:	4413      	add	r3, r2
 8004636:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	0cdb      	lsrs	r3, r3, #19
 800463e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004642:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004644:	6879      	ldr	r1, [r7, #4]
 8004646:	69ba      	ldr	r2, [r7, #24]
 8004648:	4613      	mov	r3, r2
 800464a:	011b      	lsls	r3, r3, #4
 800464c:	1a9b      	subs	r3, r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	440b      	add	r3, r1
 8004652:	3328      	adds	r3, #40	@ 0x28
 8004654:	881b      	ldrh	r3, [r3, #0]
 8004656:	461a      	mov	r2, r3
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	4293      	cmp	r3, r2
 800465c:	d13f      	bne.n	80046de <HCD_RXQLVL_IRQHandler+0x1b4>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d03c      	beq.n	80046de <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	015a      	lsls	r2, r3, #5
 8004668:	6a3b      	ldr	r3, [r7, #32]
 800466a:	4413      	add	r3, r2
 800466c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800467a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004682:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	015a      	lsls	r2, r3, #5
 8004688:	6a3b      	ldr	r3, [r7, #32]
 800468a:	4413      	add	r3, r2
 800468c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004690:	461a      	mov	r2, r3
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004696:	6879      	ldr	r1, [r7, #4]
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	4613      	mov	r3, r2
 800469c:	011b      	lsls	r3, r3, #4
 800469e:	1a9b      	subs	r3, r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	440b      	add	r3, r1
 80046a4:	333c      	adds	r3, #60	@ 0x3c
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	f083 0301 	eor.w	r3, r3, #1
 80046ac:	b2d8      	uxtb	r0, r3
 80046ae:	6879      	ldr	r1, [r7, #4]
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	4613      	mov	r3, r2
 80046b4:	011b      	lsls	r3, r3, #4
 80046b6:	1a9b      	subs	r3, r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	440b      	add	r3, r1
 80046bc:	333c      	adds	r3, #60	@ 0x3c
 80046be:	4602      	mov	r2, r0
 80046c0:	701a      	strb	r2, [r3, #0]
      break;
 80046c2:	e00c      	b.n	80046de <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80046c4:	6879      	ldr	r1, [r7, #4]
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	4613      	mov	r3, r2
 80046ca:	011b      	lsls	r3, r3, #4
 80046cc:	1a9b      	subs	r3, r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	440b      	add	r3, r1
 80046d2:	334c      	adds	r3, #76	@ 0x4c
 80046d4:	2204      	movs	r2, #4
 80046d6:	701a      	strb	r2, [r3, #0]
      break;
 80046d8:	e001      	b.n	80046de <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80046da:	bf00      	nop
 80046dc:	e000      	b.n	80046e0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80046de:	bf00      	nop
  }
}
 80046e0:	bf00      	nop
 80046e2:	3728      	adds	r7, #40	@ 0x28
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004714:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b02      	cmp	r3, #2
 800471e:	d10b      	bne.n	8004738 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b01      	cmp	r3, #1
 8004728:	d102      	bne.n	8004730 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f004 ff3e 	bl	80095ac <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	f043 0302 	orr.w	r3, r3, #2
 8004736:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f003 0308 	and.w	r3, r3, #8
 800473e:	2b08      	cmp	r3, #8
 8004740:	d132      	bne.n	80047a8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	f043 0308 	orr.w	r3, r3, #8
 8004748:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f003 0304 	and.w	r3, r3, #4
 8004750:	2b04      	cmp	r3, #4
 8004752:	d126      	bne.n	80047a2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	7a5b      	ldrb	r3, [r3, #9]
 8004758:	2b02      	cmp	r3, #2
 800475a:	d113      	bne.n	8004784 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004762:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004766:	d106      	bne.n	8004776 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2102      	movs	r1, #2
 800476e:	4618      	mov	r0, r3
 8004770:	f001 ff60 	bl	8006634 <USB_InitFSLSPClkSel>
 8004774:	e011      	b.n	800479a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2101      	movs	r1, #1
 800477c:	4618      	mov	r0, r3
 800477e:	f001 ff59 	bl	8006634 <USB_InitFSLSPClkSel>
 8004782:	e00a      	b.n	800479a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	79db      	ldrb	r3, [r3, #7]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d106      	bne.n	800479a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004792:	461a      	mov	r2, r3
 8004794:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004798:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f004 ff30 	bl	8009600 <HAL_HCD_PortEnabled_Callback>
 80047a0:	e002      	b.n	80047a8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f004 ff3a 	bl	800961c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f003 0320 	and.w	r3, r3, #32
 80047ae:	2b20      	cmp	r3, #32
 80047b0:	d103      	bne.n	80047ba <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	f043 0320 	orr.w	r3, r3, #32
 80047b8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80047c0:	461a      	mov	r2, r3
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	6013      	str	r3, [r2, #0]
}
 80047c6:	bf00      	nop
 80047c8:	3718      	adds	r7, #24
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
	...

080047d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e12b      	b.n	8004a3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d106      	bne.n	80047fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f7fc fa1a 	bl	8000c30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2224      	movs	r2, #36	@ 0x24
 8004800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f022 0201 	bic.w	r2, r2, #1
 8004812:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004822:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004832:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004834:	f001 fa20 	bl	8005c78 <HAL_RCC_GetPCLK1Freq>
 8004838:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	4a81      	ldr	r2, [pc, #516]	@ (8004a44 <HAL_I2C_Init+0x274>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d807      	bhi.n	8004854 <HAL_I2C_Init+0x84>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4a80      	ldr	r2, [pc, #512]	@ (8004a48 <HAL_I2C_Init+0x278>)
 8004848:	4293      	cmp	r3, r2
 800484a:	bf94      	ite	ls
 800484c:	2301      	movls	r3, #1
 800484e:	2300      	movhi	r3, #0
 8004850:	b2db      	uxtb	r3, r3
 8004852:	e006      	b.n	8004862 <HAL_I2C_Init+0x92>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	4a7d      	ldr	r2, [pc, #500]	@ (8004a4c <HAL_I2C_Init+0x27c>)
 8004858:	4293      	cmp	r3, r2
 800485a:	bf94      	ite	ls
 800485c:	2301      	movls	r3, #1
 800485e:	2300      	movhi	r3, #0
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d001      	beq.n	800486a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e0e7      	b.n	8004a3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	4a78      	ldr	r2, [pc, #480]	@ (8004a50 <HAL_I2C_Init+0x280>)
 800486e:	fba2 2303 	umull	r2, r3, r2, r3
 8004872:	0c9b      	lsrs	r3, r3, #18
 8004874:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	430a      	orrs	r2, r1
 8004888:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	4a6a      	ldr	r2, [pc, #424]	@ (8004a44 <HAL_I2C_Init+0x274>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d802      	bhi.n	80048a4 <HAL_I2C_Init+0xd4>
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	3301      	adds	r3, #1
 80048a2:	e009      	b.n	80048b8 <HAL_I2C_Init+0xe8>
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80048aa:	fb02 f303 	mul.w	r3, r2, r3
 80048ae:	4a69      	ldr	r2, [pc, #420]	@ (8004a54 <HAL_I2C_Init+0x284>)
 80048b0:	fba2 2303 	umull	r2, r3, r2, r3
 80048b4:	099b      	lsrs	r3, r3, #6
 80048b6:	3301      	adds	r3, #1
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	6812      	ldr	r2, [r2, #0]
 80048bc:	430b      	orrs	r3, r1
 80048be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	69db      	ldr	r3, [r3, #28]
 80048c6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80048ca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	495c      	ldr	r1, [pc, #368]	@ (8004a44 <HAL_I2C_Init+0x274>)
 80048d4:	428b      	cmp	r3, r1
 80048d6:	d819      	bhi.n	800490c <HAL_I2C_Init+0x13c>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	1e59      	subs	r1, r3, #1
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80048e6:	1c59      	adds	r1, r3, #1
 80048e8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80048ec:	400b      	ands	r3, r1
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00a      	beq.n	8004908 <HAL_I2C_Init+0x138>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	1e59      	subs	r1, r3, #1
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004900:	3301      	adds	r3, #1
 8004902:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004906:	e051      	b.n	80049ac <HAL_I2C_Init+0x1dc>
 8004908:	2304      	movs	r3, #4
 800490a:	e04f      	b.n	80049ac <HAL_I2C_Init+0x1dc>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d111      	bne.n	8004938 <HAL_I2C_Init+0x168>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	1e58      	subs	r0, r3, #1
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6859      	ldr	r1, [r3, #4]
 800491c:	460b      	mov	r3, r1
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	440b      	add	r3, r1
 8004922:	fbb0 f3f3 	udiv	r3, r0, r3
 8004926:	3301      	adds	r3, #1
 8004928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800492c:	2b00      	cmp	r3, #0
 800492e:	bf0c      	ite	eq
 8004930:	2301      	moveq	r3, #1
 8004932:	2300      	movne	r3, #0
 8004934:	b2db      	uxtb	r3, r3
 8004936:	e012      	b.n	800495e <HAL_I2C_Init+0x18e>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	1e58      	subs	r0, r3, #1
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6859      	ldr	r1, [r3, #4]
 8004940:	460b      	mov	r3, r1
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	440b      	add	r3, r1
 8004946:	0099      	lsls	r1, r3, #2
 8004948:	440b      	add	r3, r1
 800494a:	fbb0 f3f3 	udiv	r3, r0, r3
 800494e:	3301      	adds	r3, #1
 8004950:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004954:	2b00      	cmp	r3, #0
 8004956:	bf0c      	ite	eq
 8004958:	2301      	moveq	r3, #1
 800495a:	2300      	movne	r3, #0
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d001      	beq.n	8004966 <HAL_I2C_Init+0x196>
 8004962:	2301      	movs	r3, #1
 8004964:	e022      	b.n	80049ac <HAL_I2C_Init+0x1dc>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10e      	bne.n	800498c <HAL_I2C_Init+0x1bc>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	1e58      	subs	r0, r3, #1
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6859      	ldr	r1, [r3, #4]
 8004976:	460b      	mov	r3, r1
 8004978:	005b      	lsls	r3, r3, #1
 800497a:	440b      	add	r3, r1
 800497c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004980:	3301      	adds	r3, #1
 8004982:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004986:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800498a:	e00f      	b.n	80049ac <HAL_I2C_Init+0x1dc>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	1e58      	subs	r0, r3, #1
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6859      	ldr	r1, [r3, #4]
 8004994:	460b      	mov	r3, r1
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	440b      	add	r3, r1
 800499a:	0099      	lsls	r1, r3, #2
 800499c:	440b      	add	r3, r1
 800499e:	fbb0 f3f3 	udiv	r3, r0, r3
 80049a2:	3301      	adds	r3, #1
 80049a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049ac:	6879      	ldr	r1, [r7, #4]
 80049ae:	6809      	ldr	r1, [r1, #0]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	69da      	ldr	r2, [r3, #28]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	431a      	orrs	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	430a      	orrs	r2, r1
 80049ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80049da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	6911      	ldr	r1, [r2, #16]
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	68d2      	ldr	r2, [r2, #12]
 80049e6:	4311      	orrs	r1, r2
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	6812      	ldr	r2, [r2, #0]
 80049ec:	430b      	orrs	r3, r1
 80049ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	695a      	ldr	r2, [r3, #20]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	431a      	orrs	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f042 0201 	orr.w	r2, r2, #1
 8004a1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2220      	movs	r2, #32
 8004a26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	000186a0 	.word	0x000186a0
 8004a48:	001e847f 	.word	0x001e847f
 8004a4c:	003d08ff 	.word	0x003d08ff
 8004a50:	431bde83 	.word	0x431bde83
 8004a54:	10624dd3 	.word	0x10624dd3

08004a58 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b088      	sub	sp, #32
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e128      	b.n	8004cbc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d109      	bne.n	8004a8a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a90      	ldr	r2, [pc, #576]	@ (8004cc4 <HAL_I2S_Init+0x26c>)
 8004a82:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f7fc f91b 	bl	8000cc0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2202      	movs	r2, #2
 8004a8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	69db      	ldr	r3, [r3, #28]
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	6812      	ldr	r2, [r2, #0]
 8004a9c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004aa0:	f023 030f 	bic.w	r3, r3, #15
 8004aa4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d060      	beq.n	8004b78 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d102      	bne.n	8004ac4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004abe:	2310      	movs	r3, #16
 8004ac0:	617b      	str	r3, [r7, #20]
 8004ac2:	e001      	b.n	8004ac8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004ac4:	2320      	movs	r3, #32
 8004ac6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	2b20      	cmp	r3, #32
 8004ace:	d802      	bhi.n	8004ad6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004ad6:	2001      	movs	r0, #1
 8004ad8:	f001 f9c4 	bl	8005e64 <HAL_RCCEx_GetPeriphCLKFreq>
 8004adc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ae6:	d125      	bne.n	8004b34 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d010      	beq.n	8004b12 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	fbb2 f2f3 	udiv	r2, r2, r3
 8004afa:	4613      	mov	r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	461a      	mov	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b0c:	3305      	adds	r3, #5
 8004b0e:	613b      	str	r3, [r7, #16]
 8004b10:	e01f      	b.n	8004b52 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	00db      	lsls	r3, r3, #3
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	005b      	lsls	r3, r3, #1
 8004b24:	461a      	mov	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b2e:	3305      	adds	r3, #5
 8004b30:	613b      	str	r3, [r7, #16]
 8004b32:	e00e      	b.n	8004b52 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4413      	add	r3, r2
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	461a      	mov	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b4e:	3305      	adds	r3, #5
 8004b50:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	4a5c      	ldr	r2, [pc, #368]	@ (8004cc8 <HAL_I2S_Init+0x270>)
 8004b56:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5a:	08db      	lsrs	r3, r3, #3
 8004b5c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	f003 0301 	and.w	r3, r3, #1
 8004b64:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	085b      	lsrs	r3, r3, #1
 8004b6e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	021b      	lsls	r3, r3, #8
 8004b74:	61bb      	str	r3, [r7, #24]
 8004b76:	e003      	b.n	8004b80 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004b78:	2302      	movs	r3, #2
 8004b7a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d902      	bls.n	8004b8c <HAL_I2S_Init+0x134>
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	2bff      	cmp	r3, #255	@ 0xff
 8004b8a:	d907      	bls.n	8004b9c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b90:	f043 0210 	orr.w	r2, r3, #16
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e08f      	b.n	8004cbc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	691a      	ldr	r2, [r3, #16]
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	ea42 0103 	orr.w	r1, r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	69fa      	ldr	r2, [r7, #28]
 8004bac:	430a      	orrs	r2, r1
 8004bae:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004bba:	f023 030f 	bic.w	r3, r3, #15
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	6851      	ldr	r1, [r2, #4]
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	6892      	ldr	r2, [r2, #8]
 8004bc6:	4311      	orrs	r1, r2
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	68d2      	ldr	r2, [r2, #12]
 8004bcc:	4311      	orrs	r1, r2
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	6992      	ldr	r2, [r2, #24]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	431a      	orrs	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bde:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d161      	bne.n	8004cac <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a38      	ldr	r2, [pc, #224]	@ (8004ccc <HAL_I2S_Init+0x274>)
 8004bec:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a37      	ldr	r2, [pc, #220]	@ (8004cd0 <HAL_I2S_Init+0x278>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d101      	bne.n	8004bfc <HAL_I2S_Init+0x1a4>
 8004bf8:	4b36      	ldr	r3, [pc, #216]	@ (8004cd4 <HAL_I2S_Init+0x27c>)
 8004bfa:	e001      	b.n	8004c00 <HAL_I2S_Init+0x1a8>
 8004bfc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c00:	69db      	ldr	r3, [r3, #28]
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	6812      	ldr	r2, [r2, #0]
 8004c06:	4932      	ldr	r1, [pc, #200]	@ (8004cd0 <HAL_I2S_Init+0x278>)
 8004c08:	428a      	cmp	r2, r1
 8004c0a:	d101      	bne.n	8004c10 <HAL_I2S_Init+0x1b8>
 8004c0c:	4a31      	ldr	r2, [pc, #196]	@ (8004cd4 <HAL_I2S_Init+0x27c>)
 8004c0e:	e001      	b.n	8004c14 <HAL_I2S_Init+0x1bc>
 8004c10:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004c14:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004c18:	f023 030f 	bic.w	r3, r3, #15
 8004c1c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a2b      	ldr	r2, [pc, #172]	@ (8004cd0 <HAL_I2S_Init+0x278>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d101      	bne.n	8004c2c <HAL_I2S_Init+0x1d4>
 8004c28:	4b2a      	ldr	r3, [pc, #168]	@ (8004cd4 <HAL_I2S_Init+0x27c>)
 8004c2a:	e001      	b.n	8004c30 <HAL_I2S_Init+0x1d8>
 8004c2c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c30:	2202      	movs	r2, #2
 8004c32:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a25      	ldr	r2, [pc, #148]	@ (8004cd0 <HAL_I2S_Init+0x278>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d101      	bne.n	8004c42 <HAL_I2S_Init+0x1ea>
 8004c3e:	4b25      	ldr	r3, [pc, #148]	@ (8004cd4 <HAL_I2S_Init+0x27c>)
 8004c40:	e001      	b.n	8004c46 <HAL_I2S_Init+0x1ee>
 8004c42:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c46:	69db      	ldr	r3, [r3, #28]
 8004c48:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c52:	d003      	beq.n	8004c5c <HAL_I2S_Init+0x204>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d103      	bne.n	8004c64 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004c5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c60:	613b      	str	r3, [r7, #16]
 8004c62:	e001      	b.n	8004c68 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004c64:	2300      	movs	r3, #0
 8004c66:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004c72:	4313      	orrs	r3, r2
 8004c74:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004c86:	4313      	orrs	r3, r2
 8004c88:	b29a      	uxth	r2, r3
 8004c8a:	897b      	ldrh	r3, [r7, #10]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004c94:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a0d      	ldr	r2, [pc, #52]	@ (8004cd0 <HAL_I2S_Init+0x278>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d101      	bne.n	8004ca4 <HAL_I2S_Init+0x24c>
 8004ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8004cd4 <HAL_I2S_Init+0x27c>)
 8004ca2:	e001      	b.n	8004ca8 <HAL_I2S_Init+0x250>
 8004ca4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004ca8:	897a      	ldrh	r2, [r7, #10]
 8004caa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3720      	adds	r7, #32
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	08004dcf 	.word	0x08004dcf
 8004cc8:	cccccccd 	.word	0xcccccccd
 8004ccc:	08004ee5 	.word	0x08004ee5
 8004cd0:	40003800 	.word	0x40003800
 8004cd4:	40003400 	.word	0x40003400

08004cd8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d20:	881a      	ldrh	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d2c:	1c9a      	adds	r2, r3, #2
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10e      	bne.n	8004d68 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	685a      	ldr	r2, [r3, #4]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004d58:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f7ff ffb8 	bl	8004cd8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004d68:	bf00      	nop
 8004d6a:	3708      	adds	r7, #8
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68da      	ldr	r2, [r3, #12]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d82:	b292      	uxth	r2, r2
 8004d84:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d8a:	1c9a      	adds	r2, r3, #2
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	3b01      	subs	r3, #1
 8004d98:	b29a      	uxth	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d10e      	bne.n	8004dc6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004db6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f7ff ff93 	bl	8004cec <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004dc6:	bf00      	nop
 8004dc8:	3708      	adds	r7, #8
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b086      	sub	sp, #24
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b04      	cmp	r3, #4
 8004de8:	d13a      	bne.n	8004e60 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f003 0301 	and.w	r3, r3, #1
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d109      	bne.n	8004e08 <I2S_IRQHandler+0x3a>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dfe:	2b40      	cmp	r3, #64	@ 0x40
 8004e00:	d102      	bne.n	8004e08 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f7ff ffb4 	bl	8004d70 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e0e:	2b40      	cmp	r3, #64	@ 0x40
 8004e10:	d126      	bne.n	8004e60 <I2S_IRQHandler+0x92>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f003 0320 	and.w	r3, r3, #32
 8004e1c:	2b20      	cmp	r3, #32
 8004e1e:	d11f      	bne.n	8004e60 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004e2e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004e30:	2300      	movs	r3, #0
 8004e32:	613b      	str	r3, [r7, #16]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	613b      	str	r3, [r7, #16]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	613b      	str	r3, [r7, #16]
 8004e44:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e52:	f043 0202 	orr.w	r2, r3, #2
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f7ff ff50 	bl	8004d00 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	2b03      	cmp	r3, #3
 8004e6a:	d136      	bne.n	8004eda <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d109      	bne.n	8004e8a <I2S_IRQHandler+0xbc>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e80:	2b80      	cmp	r3, #128	@ 0x80
 8004e82:	d102      	bne.n	8004e8a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f7ff ff45 	bl	8004d14 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	f003 0308 	and.w	r3, r3, #8
 8004e90:	2b08      	cmp	r3, #8
 8004e92:	d122      	bne.n	8004eda <I2S_IRQHandler+0x10c>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f003 0320 	and.w	r3, r3, #32
 8004e9e:	2b20      	cmp	r3, #32
 8004ea0:	d11b      	bne.n	8004eda <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685a      	ldr	r2, [r3, #4]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004eb0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	60fb      	str	r3, [r7, #12]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	60fb      	str	r3, [r7, #12]
 8004ebe:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ecc:	f043 0204 	orr.w	r2, r3, #4
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f7ff ff13 	bl	8004d00 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004eda:	bf00      	nop
 8004edc:	3718      	adds	r7, #24
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
	...

08004ee4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b088      	sub	sp, #32
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a92      	ldr	r2, [pc, #584]	@ (8005144 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d101      	bne.n	8004f02 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004efe:	4b92      	ldr	r3, [pc, #584]	@ (8005148 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f00:	e001      	b.n	8004f06 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004f02:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a8b      	ldr	r2, [pc, #556]	@ (8005144 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d101      	bne.n	8004f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004f1c:	4b8a      	ldr	r3, [pc, #552]	@ (8005148 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f1e:	e001      	b.n	8004f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004f20:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f30:	d004      	beq.n	8004f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f040 8099 	bne.w	800506e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d107      	bne.n	8004f56 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d002      	beq.n	8004f56 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 f925 	bl	80051a0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d107      	bne.n	8004f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d002      	beq.n	8004f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f9c8 	bl	8005300 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f76:	2b40      	cmp	r3, #64	@ 0x40
 8004f78:	d13a      	bne.n	8004ff0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	f003 0320 	and.w	r3, r3, #32
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d035      	beq.n	8004ff0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a6e      	ldr	r2, [pc, #440]	@ (8005144 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d101      	bne.n	8004f92 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004f8e:	4b6e      	ldr	r3, [pc, #440]	@ (8005148 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f90:	e001      	b.n	8004f96 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004f92:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f96:	685a      	ldr	r2, [r3, #4]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4969      	ldr	r1, [pc, #420]	@ (8005144 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f9e:	428b      	cmp	r3, r1
 8004fa0:	d101      	bne.n	8004fa6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004fa2:	4b69      	ldr	r3, [pc, #420]	@ (8005148 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004fa4:	e001      	b.n	8004faa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004fa6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004faa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004fae:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004fbe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	60fb      	str	r3, [r7, #12]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	60fb      	str	r3, [r7, #12]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	60fb      	str	r3, [r7, #12]
 8004fd4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fe2:	f043 0202 	orr.w	r2, r3, #2
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7ff fe88 	bl	8004d00 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	f003 0308 	and.w	r3, r3, #8
 8004ff6:	2b08      	cmp	r3, #8
 8004ff8:	f040 80c3 	bne.w	8005182 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	f003 0320 	and.w	r3, r3, #32
 8005002:	2b00      	cmp	r3, #0
 8005004:	f000 80bd 	beq.w	8005182 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005016:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a49      	ldr	r2, [pc, #292]	@ (8005144 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d101      	bne.n	8005026 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005022:	4b49      	ldr	r3, [pc, #292]	@ (8005148 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005024:	e001      	b.n	800502a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005026:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4944      	ldr	r1, [pc, #272]	@ (8005144 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005032:	428b      	cmp	r3, r1
 8005034:	d101      	bne.n	800503a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005036:	4b44      	ldr	r3, [pc, #272]	@ (8005148 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005038:	e001      	b.n	800503e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800503a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800503e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005042:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005044:	2300      	movs	r3, #0
 8005046:	60bb      	str	r3, [r7, #8]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	60bb      	str	r3, [r7, #8]
 8005050:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800505e:	f043 0204 	orr.w	r2, r3, #4
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f7ff fe4a 	bl	8004d00 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800506c:	e089      	b.n	8005182 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	f003 0302 	and.w	r3, r3, #2
 8005074:	2b02      	cmp	r3, #2
 8005076:	d107      	bne.n	8005088 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800507e:	2b00      	cmp	r3, #0
 8005080:	d002      	beq.n	8005088 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f8be 	bl	8005204 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b01      	cmp	r3, #1
 8005090:	d107      	bne.n	80050a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005098:	2b00      	cmp	r3, #0
 800509a:	d002      	beq.n	80050a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 f8fd 	bl	800529c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050a8:	2b40      	cmp	r3, #64	@ 0x40
 80050aa:	d12f      	bne.n	800510c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f003 0320 	and.w	r3, r3, #32
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d02a      	beq.n	800510c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80050c4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a1e      	ldr	r2, [pc, #120]	@ (8005144 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d101      	bne.n	80050d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80050d0:	4b1d      	ldr	r3, [pc, #116]	@ (8005148 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80050d2:	e001      	b.n	80050d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80050d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80050d8:	685a      	ldr	r2, [r3, #4]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4919      	ldr	r1, [pc, #100]	@ (8005144 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80050e0:	428b      	cmp	r3, r1
 80050e2:	d101      	bne.n	80050e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80050e4:	4b18      	ldr	r3, [pc, #96]	@ (8005148 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80050e6:	e001      	b.n	80050ec <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80050e8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80050ec:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80050f0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050fe:	f043 0202 	orr.w	r2, r3, #2
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7ff fdfa 	bl	8004d00 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	f003 0308 	and.w	r3, r3, #8
 8005112:	2b08      	cmp	r3, #8
 8005114:	d136      	bne.n	8005184 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	f003 0320 	and.w	r3, r3, #32
 800511c:	2b00      	cmp	r3, #0
 800511e:	d031      	beq.n	8005184 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a07      	ldr	r2, [pc, #28]	@ (8005144 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d101      	bne.n	800512e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800512a:	4b07      	ldr	r3, [pc, #28]	@ (8005148 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800512c:	e001      	b.n	8005132 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800512e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4902      	ldr	r1, [pc, #8]	@ (8005144 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800513a:	428b      	cmp	r3, r1
 800513c:	d106      	bne.n	800514c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800513e:	4b02      	ldr	r3, [pc, #8]	@ (8005148 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005140:	e006      	b.n	8005150 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005142:	bf00      	nop
 8005144:	40003800 	.word	0x40003800
 8005148:	40003400 	.word	0x40003400
 800514c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005150:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005154:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005164:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005172:	f043 0204 	orr.w	r2, r3, #4
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7ff fdc0 	bl	8004d00 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005180:	e000      	b.n	8005184 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005182:	bf00      	nop
}
 8005184:	bf00      	nop
 8005186:	3720      	adds	r7, #32
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ac:	1c99      	adds	r1, r3, #2
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	6251      	str	r1, [r2, #36]	@ 0x24
 80051b2:	881a      	ldrh	r2, [r3, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051be:	b29b      	uxth	r3, r3
 80051c0:	3b01      	subs	r3, #1
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d113      	bne.n	80051fa <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80051e0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d106      	bne.n	80051fa <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f7ff ffc9 	bl	800518c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80051fa:	bf00      	nop
 80051fc:	3708      	adds	r7, #8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
	...

08005204 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005210:	1c99      	adds	r1, r3, #2
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	6251      	str	r1, [r2, #36]	@ 0x24
 8005216:	8819      	ldrh	r1, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a1d      	ldr	r2, [pc, #116]	@ (8005294 <I2SEx_TxISR_I2SExt+0x90>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d101      	bne.n	8005226 <I2SEx_TxISR_I2SExt+0x22>
 8005222:	4b1d      	ldr	r3, [pc, #116]	@ (8005298 <I2SEx_TxISR_I2SExt+0x94>)
 8005224:	e001      	b.n	800522a <I2SEx_TxISR_I2SExt+0x26>
 8005226:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800522a:	460a      	mov	r2, r1
 800522c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005232:	b29b      	uxth	r3, r3
 8005234:	3b01      	subs	r3, #1
 8005236:	b29a      	uxth	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005240:	b29b      	uxth	r3, r3
 8005242:	2b00      	cmp	r3, #0
 8005244:	d121      	bne.n	800528a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a12      	ldr	r2, [pc, #72]	@ (8005294 <I2SEx_TxISR_I2SExt+0x90>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d101      	bne.n	8005254 <I2SEx_TxISR_I2SExt+0x50>
 8005250:	4b11      	ldr	r3, [pc, #68]	@ (8005298 <I2SEx_TxISR_I2SExt+0x94>)
 8005252:	e001      	b.n	8005258 <I2SEx_TxISR_I2SExt+0x54>
 8005254:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	490d      	ldr	r1, [pc, #52]	@ (8005294 <I2SEx_TxISR_I2SExt+0x90>)
 8005260:	428b      	cmp	r3, r1
 8005262:	d101      	bne.n	8005268 <I2SEx_TxISR_I2SExt+0x64>
 8005264:	4b0c      	ldr	r3, [pc, #48]	@ (8005298 <I2SEx_TxISR_I2SExt+0x94>)
 8005266:	e001      	b.n	800526c <I2SEx_TxISR_I2SExt+0x68>
 8005268:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800526c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005270:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005276:	b29b      	uxth	r3, r3
 8005278:	2b00      	cmp	r3, #0
 800527a:	d106      	bne.n	800528a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f7ff ff81 	bl	800518c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800528a:	bf00      	nop
 800528c:	3708      	adds	r7, #8
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	40003800 	.word	0x40003800
 8005298:	40003400 	.word	0x40003400

0800529c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68d8      	ldr	r0, [r3, #12]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ae:	1c99      	adds	r1, r3, #2
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80052b4:	b282      	uxth	r2, r0
 80052b6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80052bc:	b29b      	uxth	r3, r3
 80052be:	3b01      	subs	r3, #1
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d113      	bne.n	80052f8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	685a      	ldr	r2, [r3, #4]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80052de:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d106      	bne.n	80052f8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f7ff ff4a 	bl	800518c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80052f8:	bf00      	nop
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a20      	ldr	r2, [pc, #128]	@ (8005390 <I2SEx_RxISR_I2SExt+0x90>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d101      	bne.n	8005316 <I2SEx_RxISR_I2SExt+0x16>
 8005312:	4b20      	ldr	r3, [pc, #128]	@ (8005394 <I2SEx_RxISR_I2SExt+0x94>)
 8005314:	e001      	b.n	800531a <I2SEx_RxISR_I2SExt+0x1a>
 8005316:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800531a:	68d8      	ldr	r0, [r3, #12]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005320:	1c99      	adds	r1, r3, #2
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005326:	b282      	uxth	r2, r0
 8005328:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800532e:	b29b      	uxth	r3, r3
 8005330:	3b01      	subs	r3, #1
 8005332:	b29a      	uxth	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800533c:	b29b      	uxth	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d121      	bne.n	8005386 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a12      	ldr	r2, [pc, #72]	@ (8005390 <I2SEx_RxISR_I2SExt+0x90>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d101      	bne.n	8005350 <I2SEx_RxISR_I2SExt+0x50>
 800534c:	4b11      	ldr	r3, [pc, #68]	@ (8005394 <I2SEx_RxISR_I2SExt+0x94>)
 800534e:	e001      	b.n	8005354 <I2SEx_RxISR_I2SExt+0x54>
 8005350:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005354:	685a      	ldr	r2, [r3, #4]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	490d      	ldr	r1, [pc, #52]	@ (8005390 <I2SEx_RxISR_I2SExt+0x90>)
 800535c:	428b      	cmp	r3, r1
 800535e:	d101      	bne.n	8005364 <I2SEx_RxISR_I2SExt+0x64>
 8005360:	4b0c      	ldr	r3, [pc, #48]	@ (8005394 <I2SEx_RxISR_I2SExt+0x94>)
 8005362:	e001      	b.n	8005368 <I2SEx_RxISR_I2SExt+0x68>
 8005364:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005368:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800536c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005372:	b29b      	uxth	r3, r3
 8005374:	2b00      	cmp	r3, #0
 8005376:	d106      	bne.n	8005386 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f7ff ff03 	bl	800518c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005386:	bf00      	nop
 8005388:	3708      	adds	r7, #8
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	40003800 	.word	0x40003800
 8005394:	40003400 	.word	0x40003400

08005398 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b086      	sub	sp, #24
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d101      	bne.n	80053aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e267      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d075      	beq.n	80054a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80053b6:	4b88      	ldr	r3, [pc, #544]	@ (80055d8 <HAL_RCC_OscConfig+0x240>)
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f003 030c 	and.w	r3, r3, #12
 80053be:	2b04      	cmp	r3, #4
 80053c0:	d00c      	beq.n	80053dc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053c2:	4b85      	ldr	r3, [pc, #532]	@ (80055d8 <HAL_RCC_OscConfig+0x240>)
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80053ca:	2b08      	cmp	r3, #8
 80053cc:	d112      	bne.n	80053f4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053ce:	4b82      	ldr	r3, [pc, #520]	@ (80055d8 <HAL_RCC_OscConfig+0x240>)
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053da:	d10b      	bne.n	80053f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053dc:	4b7e      	ldr	r3, [pc, #504]	@ (80055d8 <HAL_RCC_OscConfig+0x240>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d05b      	beq.n	80054a0 <HAL_RCC_OscConfig+0x108>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d157      	bne.n	80054a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e242      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053fc:	d106      	bne.n	800540c <HAL_RCC_OscConfig+0x74>
 80053fe:	4b76      	ldr	r3, [pc, #472]	@ (80055d8 <HAL_RCC_OscConfig+0x240>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a75      	ldr	r2, [pc, #468]	@ (80055d8 <HAL_RCC_OscConfig+0x240>)
 8005404:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005408:	6013      	str	r3, [r2, #0]
 800540a:	e01d      	b.n	8005448 <HAL_RCC_OscConfig+0xb0>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005414:	d10c      	bne.n	8005430 <HAL_RCC_OscConfig+0x98>
 8005416:	4b70      	ldr	r3, [pc, #448]	@ (80055d8 <HAL_RCC_OscConfig+0x240>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a6f      	ldr	r2, [pc, #444]	@ (80055d8 <HAL_RCC_OscConfig+0x240>)
 800541c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005420:	6013      	str	r3, [r2, #0]
 8005422:	4b6d      	ldr	r3, [pc, #436]	@ (80055d8 <HAL_RCC_OscConfig+0x240>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a6c      	ldr	r2, [pc, #432]	@ (80055d8 <HAL_RCC_OscConfig+0x240>)
 8005428:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800542c:	6013      	str	r3, [r2, #0]
 800542e:	e00b      	b.n	8005448 <HAL_RCC_OscConfig+0xb0>
 8005430:	4b69      	ldr	r3, [pc, #420]	@ (80055d8 <HAL_RCC_OscConfig+0x240>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a68      	ldr	r2, [pc, #416]	@ (80055d8 <HAL_RCC_OscConfig+0x240>)
 8005436:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800543a:	6013      	str	r3, [r2, #0]
 800543c:	4b66      	ldr	r3, [pc, #408]	@ (80055d8 <HAL_RCC_OscConfig+0x240>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a65      	ldr	r2, [pc, #404]	@ (80055d8 <HAL_RCC_OscConfig+0x240>)
 8005442:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005446:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d013      	beq.n	8005478 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005450:	f7fb fe1a 	bl	8001088 <HAL_GetTick>
 8005454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005456:	e008      	b.n	800546a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005458:	f7fb fe16 	bl	8001088 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	2b64      	cmp	r3, #100	@ 0x64
 8005464:	d901      	bls.n	800546a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e207      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800546a:	4b5b      	ldr	r3, [pc, #364]	@ (80055d8 <HAL_RCC_OscConfig+0x240>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d0f0      	beq.n	8005458 <HAL_RCC_OscConfig+0xc0>
 8005476:	e014      	b.n	80054a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005478:	f7fb fe06 	bl	8001088 <HAL_GetTick>
 800547c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800547e:	e008      	b.n	8005492 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005480:	f7fb fe02 	bl	8001088 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	2b64      	cmp	r3, #100	@ 0x64
 800548c:	d901      	bls.n	8005492 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e1f3      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005492:	4b51      	ldr	r3, [pc, #324]	@ (80055d8 <HAL_RCC_OscConfig+0x240>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1f0      	bne.n	8005480 <HAL_RCC_OscConfig+0xe8>
 800549e:	e000      	b.n	80054a2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d063      	beq.n	8005576 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80054ae:	4b4a      	ldr	r3, [pc, #296]	@ (80055d8 <HAL_RCC_OscConfig+0x240>)
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f003 030c 	and.w	r3, r3, #12
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00b      	beq.n	80054d2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054ba:	4b47      	ldr	r3, [pc, #284]	@ (80055d8 <HAL_RCC_OscConfig+0x240>)
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80054c2:	2b08      	cmp	r3, #8
 80054c4:	d11c      	bne.n	8005500 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054c6:	4b44      	ldr	r3, [pc, #272]	@ (80055d8 <HAL_RCC_OscConfig+0x240>)
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d116      	bne.n	8005500 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054d2:	4b41      	ldr	r3, [pc, #260]	@ (80055d8 <HAL_RCC_OscConfig+0x240>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0302 	and.w	r3, r3, #2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d005      	beq.n	80054ea <HAL_RCC_OscConfig+0x152>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d001      	beq.n	80054ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e1c7      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ea:	4b3b      	ldr	r3, [pc, #236]	@ (80055d8 <HAL_RCC_OscConfig+0x240>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	00db      	lsls	r3, r3, #3
 80054f8:	4937      	ldr	r1, [pc, #220]	@ (80055d8 <HAL_RCC_OscConfig+0x240>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054fe:	e03a      	b.n	8005576 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d020      	beq.n	800554a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005508:	4b34      	ldr	r3, [pc, #208]	@ (80055dc <HAL_RCC_OscConfig+0x244>)
 800550a:	2201      	movs	r2, #1
 800550c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800550e:	f7fb fdbb 	bl	8001088 <HAL_GetTick>
 8005512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005514:	e008      	b.n	8005528 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005516:	f7fb fdb7 	bl	8001088 <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	2b02      	cmp	r3, #2
 8005522:	d901      	bls.n	8005528 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e1a8      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005528:	4b2b      	ldr	r3, [pc, #172]	@ (80055d8 <HAL_RCC_OscConfig+0x240>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0302 	and.w	r3, r3, #2
 8005530:	2b00      	cmp	r3, #0
 8005532:	d0f0      	beq.n	8005516 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005534:	4b28      	ldr	r3, [pc, #160]	@ (80055d8 <HAL_RCC_OscConfig+0x240>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	00db      	lsls	r3, r3, #3
 8005542:	4925      	ldr	r1, [pc, #148]	@ (80055d8 <HAL_RCC_OscConfig+0x240>)
 8005544:	4313      	orrs	r3, r2
 8005546:	600b      	str	r3, [r1, #0]
 8005548:	e015      	b.n	8005576 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800554a:	4b24      	ldr	r3, [pc, #144]	@ (80055dc <HAL_RCC_OscConfig+0x244>)
 800554c:	2200      	movs	r2, #0
 800554e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005550:	f7fb fd9a 	bl	8001088 <HAL_GetTick>
 8005554:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005556:	e008      	b.n	800556a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005558:	f7fb fd96 	bl	8001088 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	2b02      	cmp	r3, #2
 8005564:	d901      	bls.n	800556a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e187      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800556a:	4b1b      	ldr	r3, [pc, #108]	@ (80055d8 <HAL_RCC_OscConfig+0x240>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0302 	and.w	r3, r3, #2
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1f0      	bne.n	8005558 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0308 	and.w	r3, r3, #8
 800557e:	2b00      	cmp	r3, #0
 8005580:	d036      	beq.n	80055f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d016      	beq.n	80055b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800558a:	4b15      	ldr	r3, [pc, #84]	@ (80055e0 <HAL_RCC_OscConfig+0x248>)
 800558c:	2201      	movs	r2, #1
 800558e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005590:	f7fb fd7a 	bl	8001088 <HAL_GetTick>
 8005594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005596:	e008      	b.n	80055aa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005598:	f7fb fd76 	bl	8001088 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e167      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055aa:	4b0b      	ldr	r3, [pc, #44]	@ (80055d8 <HAL_RCC_OscConfig+0x240>)
 80055ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055ae:	f003 0302 	and.w	r3, r3, #2
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d0f0      	beq.n	8005598 <HAL_RCC_OscConfig+0x200>
 80055b6:	e01b      	b.n	80055f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055b8:	4b09      	ldr	r3, [pc, #36]	@ (80055e0 <HAL_RCC_OscConfig+0x248>)
 80055ba:	2200      	movs	r2, #0
 80055bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055be:	f7fb fd63 	bl	8001088 <HAL_GetTick>
 80055c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055c4:	e00e      	b.n	80055e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055c6:	f7fb fd5f 	bl	8001088 <HAL_GetTick>
 80055ca:	4602      	mov	r2, r0
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d907      	bls.n	80055e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	e150      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
 80055d8:	40023800 	.word	0x40023800
 80055dc:	42470000 	.word	0x42470000
 80055e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055e4:	4b88      	ldr	r3, [pc, #544]	@ (8005808 <HAL_RCC_OscConfig+0x470>)
 80055e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1ea      	bne.n	80055c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0304 	and.w	r3, r3, #4
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f000 8097 	beq.w	800572c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055fe:	2300      	movs	r3, #0
 8005600:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005602:	4b81      	ldr	r3, [pc, #516]	@ (8005808 <HAL_RCC_OscConfig+0x470>)
 8005604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005606:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10f      	bne.n	800562e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800560e:	2300      	movs	r3, #0
 8005610:	60bb      	str	r3, [r7, #8]
 8005612:	4b7d      	ldr	r3, [pc, #500]	@ (8005808 <HAL_RCC_OscConfig+0x470>)
 8005614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005616:	4a7c      	ldr	r2, [pc, #496]	@ (8005808 <HAL_RCC_OscConfig+0x470>)
 8005618:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800561c:	6413      	str	r3, [r2, #64]	@ 0x40
 800561e:	4b7a      	ldr	r3, [pc, #488]	@ (8005808 <HAL_RCC_OscConfig+0x470>)
 8005620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005626:	60bb      	str	r3, [r7, #8]
 8005628:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800562a:	2301      	movs	r3, #1
 800562c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800562e:	4b77      	ldr	r3, [pc, #476]	@ (800580c <HAL_RCC_OscConfig+0x474>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005636:	2b00      	cmp	r3, #0
 8005638:	d118      	bne.n	800566c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800563a:	4b74      	ldr	r3, [pc, #464]	@ (800580c <HAL_RCC_OscConfig+0x474>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a73      	ldr	r2, [pc, #460]	@ (800580c <HAL_RCC_OscConfig+0x474>)
 8005640:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005644:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005646:	f7fb fd1f 	bl	8001088 <HAL_GetTick>
 800564a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800564c:	e008      	b.n	8005660 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800564e:	f7fb fd1b 	bl	8001088 <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	2b02      	cmp	r3, #2
 800565a:	d901      	bls.n	8005660 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e10c      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005660:	4b6a      	ldr	r3, [pc, #424]	@ (800580c <HAL_RCC_OscConfig+0x474>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005668:	2b00      	cmp	r3, #0
 800566a:	d0f0      	beq.n	800564e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d106      	bne.n	8005682 <HAL_RCC_OscConfig+0x2ea>
 8005674:	4b64      	ldr	r3, [pc, #400]	@ (8005808 <HAL_RCC_OscConfig+0x470>)
 8005676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005678:	4a63      	ldr	r2, [pc, #396]	@ (8005808 <HAL_RCC_OscConfig+0x470>)
 800567a:	f043 0301 	orr.w	r3, r3, #1
 800567e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005680:	e01c      	b.n	80056bc <HAL_RCC_OscConfig+0x324>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	2b05      	cmp	r3, #5
 8005688:	d10c      	bne.n	80056a4 <HAL_RCC_OscConfig+0x30c>
 800568a:	4b5f      	ldr	r3, [pc, #380]	@ (8005808 <HAL_RCC_OscConfig+0x470>)
 800568c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800568e:	4a5e      	ldr	r2, [pc, #376]	@ (8005808 <HAL_RCC_OscConfig+0x470>)
 8005690:	f043 0304 	orr.w	r3, r3, #4
 8005694:	6713      	str	r3, [r2, #112]	@ 0x70
 8005696:	4b5c      	ldr	r3, [pc, #368]	@ (8005808 <HAL_RCC_OscConfig+0x470>)
 8005698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800569a:	4a5b      	ldr	r2, [pc, #364]	@ (8005808 <HAL_RCC_OscConfig+0x470>)
 800569c:	f043 0301 	orr.w	r3, r3, #1
 80056a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80056a2:	e00b      	b.n	80056bc <HAL_RCC_OscConfig+0x324>
 80056a4:	4b58      	ldr	r3, [pc, #352]	@ (8005808 <HAL_RCC_OscConfig+0x470>)
 80056a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056a8:	4a57      	ldr	r2, [pc, #348]	@ (8005808 <HAL_RCC_OscConfig+0x470>)
 80056aa:	f023 0301 	bic.w	r3, r3, #1
 80056ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80056b0:	4b55      	ldr	r3, [pc, #340]	@ (8005808 <HAL_RCC_OscConfig+0x470>)
 80056b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056b4:	4a54      	ldr	r2, [pc, #336]	@ (8005808 <HAL_RCC_OscConfig+0x470>)
 80056b6:	f023 0304 	bic.w	r3, r3, #4
 80056ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d015      	beq.n	80056f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056c4:	f7fb fce0 	bl	8001088 <HAL_GetTick>
 80056c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ca:	e00a      	b.n	80056e2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056cc:	f7fb fcdc 	bl	8001088 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056da:	4293      	cmp	r3, r2
 80056dc:	d901      	bls.n	80056e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e0cb      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056e2:	4b49      	ldr	r3, [pc, #292]	@ (8005808 <HAL_RCC_OscConfig+0x470>)
 80056e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056e6:	f003 0302 	and.w	r3, r3, #2
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d0ee      	beq.n	80056cc <HAL_RCC_OscConfig+0x334>
 80056ee:	e014      	b.n	800571a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056f0:	f7fb fcca 	bl	8001088 <HAL_GetTick>
 80056f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056f6:	e00a      	b.n	800570e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056f8:	f7fb fcc6 	bl	8001088 <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005706:	4293      	cmp	r3, r2
 8005708:	d901      	bls.n	800570e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e0b5      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800570e:	4b3e      	ldr	r3, [pc, #248]	@ (8005808 <HAL_RCC_OscConfig+0x470>)
 8005710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005712:	f003 0302 	and.w	r3, r3, #2
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1ee      	bne.n	80056f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800571a:	7dfb      	ldrb	r3, [r7, #23]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d105      	bne.n	800572c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005720:	4b39      	ldr	r3, [pc, #228]	@ (8005808 <HAL_RCC_OscConfig+0x470>)
 8005722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005724:	4a38      	ldr	r2, [pc, #224]	@ (8005808 <HAL_RCC_OscConfig+0x470>)
 8005726:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800572a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 80a1 	beq.w	8005878 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005736:	4b34      	ldr	r3, [pc, #208]	@ (8005808 <HAL_RCC_OscConfig+0x470>)
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f003 030c 	and.w	r3, r3, #12
 800573e:	2b08      	cmp	r3, #8
 8005740:	d05c      	beq.n	80057fc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	2b02      	cmp	r3, #2
 8005748:	d141      	bne.n	80057ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800574a:	4b31      	ldr	r3, [pc, #196]	@ (8005810 <HAL_RCC_OscConfig+0x478>)
 800574c:	2200      	movs	r2, #0
 800574e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005750:	f7fb fc9a 	bl	8001088 <HAL_GetTick>
 8005754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005756:	e008      	b.n	800576a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005758:	f7fb fc96 	bl	8001088 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	2b02      	cmp	r3, #2
 8005764:	d901      	bls.n	800576a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e087      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800576a:	4b27      	ldr	r3, [pc, #156]	@ (8005808 <HAL_RCC_OscConfig+0x470>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1f0      	bne.n	8005758 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	69da      	ldr	r2, [r3, #28]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	431a      	orrs	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005784:	019b      	lsls	r3, r3, #6
 8005786:	431a      	orrs	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800578c:	085b      	lsrs	r3, r3, #1
 800578e:	3b01      	subs	r3, #1
 8005790:	041b      	lsls	r3, r3, #16
 8005792:	431a      	orrs	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005798:	061b      	lsls	r3, r3, #24
 800579a:	491b      	ldr	r1, [pc, #108]	@ (8005808 <HAL_RCC_OscConfig+0x470>)
 800579c:	4313      	orrs	r3, r2
 800579e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057a0:	4b1b      	ldr	r3, [pc, #108]	@ (8005810 <HAL_RCC_OscConfig+0x478>)
 80057a2:	2201      	movs	r2, #1
 80057a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a6:	f7fb fc6f 	bl	8001088 <HAL_GetTick>
 80057aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057ac:	e008      	b.n	80057c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057ae:	f7fb fc6b 	bl	8001088 <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d901      	bls.n	80057c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e05c      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057c0:	4b11      	ldr	r3, [pc, #68]	@ (8005808 <HAL_RCC_OscConfig+0x470>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d0f0      	beq.n	80057ae <HAL_RCC_OscConfig+0x416>
 80057cc:	e054      	b.n	8005878 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057ce:	4b10      	ldr	r3, [pc, #64]	@ (8005810 <HAL_RCC_OscConfig+0x478>)
 80057d0:	2200      	movs	r2, #0
 80057d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057d4:	f7fb fc58 	bl	8001088 <HAL_GetTick>
 80057d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057da:	e008      	b.n	80057ee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057dc:	f7fb fc54 	bl	8001088 <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d901      	bls.n	80057ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e045      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057ee:	4b06      	ldr	r3, [pc, #24]	@ (8005808 <HAL_RCC_OscConfig+0x470>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1f0      	bne.n	80057dc <HAL_RCC_OscConfig+0x444>
 80057fa:	e03d      	b.n	8005878 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d107      	bne.n	8005814 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e038      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
 8005808:	40023800 	.word	0x40023800
 800580c:	40007000 	.word	0x40007000
 8005810:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005814:	4b1b      	ldr	r3, [pc, #108]	@ (8005884 <HAL_RCC_OscConfig+0x4ec>)
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d028      	beq.n	8005874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800582c:	429a      	cmp	r2, r3
 800582e:	d121      	bne.n	8005874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800583a:	429a      	cmp	r2, r3
 800583c:	d11a      	bne.n	8005874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005844:	4013      	ands	r3, r2
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800584a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800584c:	4293      	cmp	r3, r2
 800584e:	d111      	bne.n	8005874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800585a:	085b      	lsrs	r3, r3, #1
 800585c:	3b01      	subs	r3, #1
 800585e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005860:	429a      	cmp	r2, r3
 8005862:	d107      	bne.n	8005874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800586e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005870:	429a      	cmp	r2, r3
 8005872:	d001      	beq.n	8005878 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e000      	b.n	800587a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3718      	adds	r7, #24
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	40023800 	.word	0x40023800

08005888 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d101      	bne.n	800589c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e0cc      	b.n	8005a36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800589c:	4b68      	ldr	r3, [pc, #416]	@ (8005a40 <HAL_RCC_ClockConfig+0x1b8>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0307 	and.w	r3, r3, #7
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d90c      	bls.n	80058c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058aa:	4b65      	ldr	r3, [pc, #404]	@ (8005a40 <HAL_RCC_ClockConfig+0x1b8>)
 80058ac:	683a      	ldr	r2, [r7, #0]
 80058ae:	b2d2      	uxtb	r2, r2
 80058b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058b2:	4b63      	ldr	r3, [pc, #396]	@ (8005a40 <HAL_RCC_ClockConfig+0x1b8>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0307 	and.w	r3, r3, #7
 80058ba:	683a      	ldr	r2, [r7, #0]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d001      	beq.n	80058c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e0b8      	b.n	8005a36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0302 	and.w	r3, r3, #2
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d020      	beq.n	8005912 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0304 	and.w	r3, r3, #4
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d005      	beq.n	80058e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058dc:	4b59      	ldr	r3, [pc, #356]	@ (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	4a58      	ldr	r2, [pc, #352]	@ (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 80058e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80058e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0308 	and.w	r3, r3, #8
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d005      	beq.n	8005900 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058f4:	4b53      	ldr	r3, [pc, #332]	@ (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	4a52      	ldr	r2, [pc, #328]	@ (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 80058fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80058fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005900:	4b50      	ldr	r3, [pc, #320]	@ (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	494d      	ldr	r1, [pc, #308]	@ (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 800590e:	4313      	orrs	r3, r2
 8005910:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	2b00      	cmp	r3, #0
 800591c:	d044      	beq.n	80059a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d107      	bne.n	8005936 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005926:	4b47      	ldr	r3, [pc, #284]	@ (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d119      	bne.n	8005966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e07f      	b.n	8005a36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	2b02      	cmp	r3, #2
 800593c:	d003      	beq.n	8005946 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005942:	2b03      	cmp	r3, #3
 8005944:	d107      	bne.n	8005956 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005946:	4b3f      	ldr	r3, [pc, #252]	@ (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d109      	bne.n	8005966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e06f      	b.n	8005a36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005956:	4b3b      	ldr	r3, [pc, #236]	@ (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e067      	b.n	8005a36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005966:	4b37      	ldr	r3, [pc, #220]	@ (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	f023 0203 	bic.w	r2, r3, #3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	4934      	ldr	r1, [pc, #208]	@ (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 8005974:	4313      	orrs	r3, r2
 8005976:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005978:	f7fb fb86 	bl	8001088 <HAL_GetTick>
 800597c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800597e:	e00a      	b.n	8005996 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005980:	f7fb fb82 	bl	8001088 <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800598e:	4293      	cmp	r3, r2
 8005990:	d901      	bls.n	8005996 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e04f      	b.n	8005a36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005996:	4b2b      	ldr	r3, [pc, #172]	@ (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f003 020c 	and.w	r2, r3, #12
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d1eb      	bne.n	8005980 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059a8:	4b25      	ldr	r3, [pc, #148]	@ (8005a40 <HAL_RCC_ClockConfig+0x1b8>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0307 	and.w	r3, r3, #7
 80059b0:	683a      	ldr	r2, [r7, #0]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d20c      	bcs.n	80059d0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059b6:	4b22      	ldr	r3, [pc, #136]	@ (8005a40 <HAL_RCC_ClockConfig+0x1b8>)
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	b2d2      	uxtb	r2, r2
 80059bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059be:	4b20      	ldr	r3, [pc, #128]	@ (8005a40 <HAL_RCC_ClockConfig+0x1b8>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0307 	and.w	r3, r3, #7
 80059c6:	683a      	ldr	r2, [r7, #0]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d001      	beq.n	80059d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e032      	b.n	8005a36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0304 	and.w	r3, r3, #4
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d008      	beq.n	80059ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059dc:	4b19      	ldr	r3, [pc, #100]	@ (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	4916      	ldr	r1, [pc, #88]	@ (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0308 	and.w	r3, r3, #8
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d009      	beq.n	8005a0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059fa:	4b12      	ldr	r3, [pc, #72]	@ (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	00db      	lsls	r3, r3, #3
 8005a08:	490e      	ldr	r1, [pc, #56]	@ (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a0e:	f000 f821 	bl	8005a54 <HAL_RCC_GetSysClockFreq>
 8005a12:	4602      	mov	r2, r0
 8005a14:	4b0b      	ldr	r3, [pc, #44]	@ (8005a44 <HAL_RCC_ClockConfig+0x1bc>)
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	091b      	lsrs	r3, r3, #4
 8005a1a:	f003 030f 	and.w	r3, r3, #15
 8005a1e:	490a      	ldr	r1, [pc, #40]	@ (8005a48 <HAL_RCC_ClockConfig+0x1c0>)
 8005a20:	5ccb      	ldrb	r3, [r1, r3]
 8005a22:	fa22 f303 	lsr.w	r3, r2, r3
 8005a26:	4a09      	ldr	r2, [pc, #36]	@ (8005a4c <HAL_RCC_ClockConfig+0x1c4>)
 8005a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005a2a:	4b09      	ldr	r3, [pc, #36]	@ (8005a50 <HAL_RCC_ClockConfig+0x1c8>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7fb fae6 	bl	8001000 <HAL_InitTick>

  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	40023c00 	.word	0x40023c00
 8005a44:	40023800 	.word	0x40023800
 8005a48:	08009cd8 	.word	0x08009cd8
 8005a4c:	20000000 	.word	0x20000000
 8005a50:	20000004 	.word	0x20000004

08005a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a58:	b094      	sub	sp, #80	@ 0x50
 8005a5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005a60:	2300      	movs	r3, #0
 8005a62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005a64:	2300      	movs	r3, #0
 8005a66:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a6c:	4b79      	ldr	r3, [pc, #484]	@ (8005c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	f003 030c 	and.w	r3, r3, #12
 8005a74:	2b08      	cmp	r3, #8
 8005a76:	d00d      	beq.n	8005a94 <HAL_RCC_GetSysClockFreq+0x40>
 8005a78:	2b08      	cmp	r3, #8
 8005a7a:	f200 80e1 	bhi.w	8005c40 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d002      	beq.n	8005a88 <HAL_RCC_GetSysClockFreq+0x34>
 8005a82:	2b04      	cmp	r3, #4
 8005a84:	d003      	beq.n	8005a8e <HAL_RCC_GetSysClockFreq+0x3a>
 8005a86:	e0db      	b.n	8005c40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a88:	4b73      	ldr	r3, [pc, #460]	@ (8005c58 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a8a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a8c:	e0db      	b.n	8005c46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a8e:	4b73      	ldr	r3, [pc, #460]	@ (8005c5c <HAL_RCC_GetSysClockFreq+0x208>)
 8005a90:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a92:	e0d8      	b.n	8005c46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a94:	4b6f      	ldr	r3, [pc, #444]	@ (8005c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a9c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a9e:	4b6d      	ldr	r3, [pc, #436]	@ (8005c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d063      	beq.n	8005b72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005aaa:	4b6a      	ldr	r3, [pc, #424]	@ (8005c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	099b      	lsrs	r3, r3, #6
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ab4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005abc:	633b      	str	r3, [r7, #48]	@ 0x30
 8005abe:	2300      	movs	r3, #0
 8005ac0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ac2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005ac6:	4622      	mov	r2, r4
 8005ac8:	462b      	mov	r3, r5
 8005aca:	f04f 0000 	mov.w	r0, #0
 8005ace:	f04f 0100 	mov.w	r1, #0
 8005ad2:	0159      	lsls	r1, r3, #5
 8005ad4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ad8:	0150      	lsls	r0, r2, #5
 8005ada:	4602      	mov	r2, r0
 8005adc:	460b      	mov	r3, r1
 8005ade:	4621      	mov	r1, r4
 8005ae0:	1a51      	subs	r1, r2, r1
 8005ae2:	6139      	str	r1, [r7, #16]
 8005ae4:	4629      	mov	r1, r5
 8005ae6:	eb63 0301 	sbc.w	r3, r3, r1
 8005aea:	617b      	str	r3, [r7, #20]
 8005aec:	f04f 0200 	mov.w	r2, #0
 8005af0:	f04f 0300 	mov.w	r3, #0
 8005af4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005af8:	4659      	mov	r1, fp
 8005afa:	018b      	lsls	r3, r1, #6
 8005afc:	4651      	mov	r1, sl
 8005afe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b02:	4651      	mov	r1, sl
 8005b04:	018a      	lsls	r2, r1, #6
 8005b06:	4651      	mov	r1, sl
 8005b08:	ebb2 0801 	subs.w	r8, r2, r1
 8005b0c:	4659      	mov	r1, fp
 8005b0e:	eb63 0901 	sbc.w	r9, r3, r1
 8005b12:	f04f 0200 	mov.w	r2, #0
 8005b16:	f04f 0300 	mov.w	r3, #0
 8005b1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b26:	4690      	mov	r8, r2
 8005b28:	4699      	mov	r9, r3
 8005b2a:	4623      	mov	r3, r4
 8005b2c:	eb18 0303 	adds.w	r3, r8, r3
 8005b30:	60bb      	str	r3, [r7, #8]
 8005b32:	462b      	mov	r3, r5
 8005b34:	eb49 0303 	adc.w	r3, r9, r3
 8005b38:	60fb      	str	r3, [r7, #12]
 8005b3a:	f04f 0200 	mov.w	r2, #0
 8005b3e:	f04f 0300 	mov.w	r3, #0
 8005b42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b46:	4629      	mov	r1, r5
 8005b48:	024b      	lsls	r3, r1, #9
 8005b4a:	4621      	mov	r1, r4
 8005b4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b50:	4621      	mov	r1, r4
 8005b52:	024a      	lsls	r2, r1, #9
 8005b54:	4610      	mov	r0, r2
 8005b56:	4619      	mov	r1, r3
 8005b58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b64:	f7fa fb30 	bl	80001c8 <__aeabi_uldivmod>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b70:	e058      	b.n	8005c24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b72:	4b38      	ldr	r3, [pc, #224]	@ (8005c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	099b      	lsrs	r3, r3, #6
 8005b78:	2200      	movs	r2, #0
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	4611      	mov	r1, r2
 8005b7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b82:	623b      	str	r3, [r7, #32]
 8005b84:	2300      	movs	r3, #0
 8005b86:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b8c:	4642      	mov	r2, r8
 8005b8e:	464b      	mov	r3, r9
 8005b90:	f04f 0000 	mov.w	r0, #0
 8005b94:	f04f 0100 	mov.w	r1, #0
 8005b98:	0159      	lsls	r1, r3, #5
 8005b9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b9e:	0150      	lsls	r0, r2, #5
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	4641      	mov	r1, r8
 8005ba6:	ebb2 0a01 	subs.w	sl, r2, r1
 8005baa:	4649      	mov	r1, r9
 8005bac:	eb63 0b01 	sbc.w	fp, r3, r1
 8005bb0:	f04f 0200 	mov.w	r2, #0
 8005bb4:	f04f 0300 	mov.w	r3, #0
 8005bb8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005bbc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005bc0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005bc4:	ebb2 040a 	subs.w	r4, r2, sl
 8005bc8:	eb63 050b 	sbc.w	r5, r3, fp
 8005bcc:	f04f 0200 	mov.w	r2, #0
 8005bd0:	f04f 0300 	mov.w	r3, #0
 8005bd4:	00eb      	lsls	r3, r5, #3
 8005bd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bda:	00e2      	lsls	r2, r4, #3
 8005bdc:	4614      	mov	r4, r2
 8005bde:	461d      	mov	r5, r3
 8005be0:	4643      	mov	r3, r8
 8005be2:	18e3      	adds	r3, r4, r3
 8005be4:	603b      	str	r3, [r7, #0]
 8005be6:	464b      	mov	r3, r9
 8005be8:	eb45 0303 	adc.w	r3, r5, r3
 8005bec:	607b      	str	r3, [r7, #4]
 8005bee:	f04f 0200 	mov.w	r2, #0
 8005bf2:	f04f 0300 	mov.w	r3, #0
 8005bf6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005bfa:	4629      	mov	r1, r5
 8005bfc:	028b      	lsls	r3, r1, #10
 8005bfe:	4621      	mov	r1, r4
 8005c00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c04:	4621      	mov	r1, r4
 8005c06:	028a      	lsls	r2, r1, #10
 8005c08:	4610      	mov	r0, r2
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c0e:	2200      	movs	r2, #0
 8005c10:	61bb      	str	r3, [r7, #24]
 8005c12:	61fa      	str	r2, [r7, #28]
 8005c14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c18:	f7fa fad6 	bl	80001c8 <__aeabi_uldivmod>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	460b      	mov	r3, r1
 8005c20:	4613      	mov	r3, r2
 8005c22:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005c24:	4b0b      	ldr	r3, [pc, #44]	@ (8005c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	0c1b      	lsrs	r3, r3, #16
 8005c2a:	f003 0303 	and.w	r3, r3, #3
 8005c2e:	3301      	adds	r3, #1
 8005c30:	005b      	lsls	r3, r3, #1
 8005c32:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005c34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c3c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c3e:	e002      	b.n	8005c46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c40:	4b05      	ldr	r3, [pc, #20]	@ (8005c58 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c42:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3750      	adds	r7, #80	@ 0x50
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c52:	bf00      	nop
 8005c54:	40023800 	.word	0x40023800
 8005c58:	00f42400 	.word	0x00f42400
 8005c5c:	007a1200 	.word	0x007a1200

08005c60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c60:	b480      	push	{r7}
 8005c62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c64:	4b03      	ldr	r3, [pc, #12]	@ (8005c74 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c66:	681b      	ldr	r3, [r3, #0]
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	20000000 	.word	0x20000000

08005c78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005c7c:	f7ff fff0 	bl	8005c60 <HAL_RCC_GetHCLKFreq>
 8005c80:	4602      	mov	r2, r0
 8005c82:	4b05      	ldr	r3, [pc, #20]	@ (8005c98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	0a9b      	lsrs	r3, r3, #10
 8005c88:	f003 0307 	and.w	r3, r3, #7
 8005c8c:	4903      	ldr	r1, [pc, #12]	@ (8005c9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c8e:	5ccb      	ldrb	r3, [r1, r3]
 8005c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	40023800 	.word	0x40023800
 8005c9c:	08009ce8 	.word	0x08009ce8

08005ca0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005cac:	2300      	movs	r3, #0
 8005cae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0301 	and.w	r3, r3, #1
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d105      	bne.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d035      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005cc8:	4b62      	ldr	r3, [pc, #392]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005cca:	2200      	movs	r2, #0
 8005ccc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cce:	f7fb f9db 	bl	8001088 <HAL_GetTick>
 8005cd2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cd4:	e008      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005cd6:	f7fb f9d7 	bl	8001088 <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d901      	bls.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e0b0      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ce8:	4b5b      	ldr	r3, [pc, #364]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1f0      	bne.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	019a      	lsls	r2, r3, #6
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	071b      	lsls	r3, r3, #28
 8005d00:	4955      	ldr	r1, [pc, #340]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d02:	4313      	orrs	r3, r2
 8005d04:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005d08:	4b52      	ldr	r3, [pc, #328]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d0e:	f7fb f9bb 	bl	8001088 <HAL_GetTick>
 8005d12:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d14:	e008      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005d16:	f7fb f9b7 	bl	8001088 <HAL_GetTick>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d901      	bls.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e090      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d28:	4b4b      	ldr	r3, [pc, #300]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d0f0      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0302 	and.w	r3, r3, #2
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f000 8083 	beq.w	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d42:	2300      	movs	r3, #0
 8005d44:	60fb      	str	r3, [r7, #12]
 8005d46:	4b44      	ldr	r3, [pc, #272]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d4a:	4a43      	ldr	r2, [pc, #268]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d50:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d52:	4b41      	ldr	r3, [pc, #260]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d5a:	60fb      	str	r3, [r7, #12]
 8005d5c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005d5e:	4b3f      	ldr	r3, [pc, #252]	@ (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a3e      	ldr	r2, [pc, #248]	@ (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d68:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d6a:	f7fb f98d 	bl	8001088 <HAL_GetTick>
 8005d6e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005d70:	e008      	b.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d72:	f7fb f989 	bl	8001088 <HAL_GetTick>
 8005d76:	4602      	mov	r2, r0
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d901      	bls.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e062      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005d84:	4b35      	ldr	r3, [pc, #212]	@ (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d0f0      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d90:	4b31      	ldr	r3, [pc, #196]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d98:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d02f      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d028      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005dae:	4b2a      	ldr	r3, [pc, #168]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005db2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005db6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005db8:	4b29      	ldr	r3, [pc, #164]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005dba:	2201      	movs	r2, #1
 8005dbc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005dbe:	4b28      	ldr	r3, [pc, #160]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005dc4:	4a24      	ldr	r2, [pc, #144]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005dca:	4b23      	ldr	r3, [pc, #140]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d114      	bne.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005dd6:	f7fb f957 	bl	8001088 <HAL_GetTick>
 8005dda:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ddc:	e00a      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dde:	f7fb f953 	bl	8001088 <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d901      	bls.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e02a      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005df4:	4b18      	ldr	r3, [pc, #96]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005df6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005df8:	f003 0302 	and.w	r3, r3, #2
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d0ee      	beq.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e0c:	d10d      	bne.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005e0e:	4b12      	ldr	r3, [pc, #72]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005e1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e22:	490d      	ldr	r1, [pc, #52]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	608b      	str	r3, [r1, #8]
 8005e28:	e005      	b.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e30:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005e34:	6093      	str	r3, [r2, #8]
 8005e36:	4b08      	ldr	r3, [pc, #32]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e38:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e42:	4905      	ldr	r1, [pc, #20]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e44:	4313      	orrs	r3, r2
 8005e46:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3718      	adds	r7, #24
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	42470068 	.word	0x42470068
 8005e58:	40023800 	.word	0x40023800
 8005e5c:	40007000 	.word	0x40007000
 8005e60:	42470e40 	.word	0x42470e40

08005e64 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b087      	sub	sp, #28
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005e70:	2300      	movs	r3, #0
 8005e72:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005e74:	2300      	movs	r3, #0
 8005e76:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d13f      	bne.n	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005e82:	4b24      	ldr	r3, [pc, #144]	@ (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e8a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d006      	beq.n	8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005e98:	d12f      	bne.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005e9a:	4b1f      	ldr	r3, [pc, #124]	@ (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005e9c:	617b      	str	r3, [r7, #20]
          break;
 8005e9e:	e02f      	b.n	8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005ea0:	4b1c      	ldr	r3, [pc, #112]	@ (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ea8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005eac:	d108      	bne.n	8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005eae:	4b19      	ldr	r3, [pc, #100]	@ (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005eb6:	4a19      	ldr	r2, [pc, #100]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ebc:	613b      	str	r3, [r7, #16]
 8005ebe:	e007      	b.n	8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005ec0:	4b14      	ldr	r3, [pc, #80]	@ (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ec8:	4a15      	ldr	r2, [pc, #84]	@ (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ece:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005ed0:	4b10      	ldr	r3, [pc, #64]	@ (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ed6:	099b      	lsrs	r3, r3, #6
 8005ed8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	fb02 f303 	mul.w	r3, r2, r3
 8005ee2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005ee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005eea:	0f1b      	lsrs	r3, r3, #28
 8005eec:	f003 0307 	and.w	r3, r3, #7
 8005ef0:	68ba      	ldr	r2, [r7, #8]
 8005ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ef6:	617b      	str	r3, [r7, #20]
          break;
 8005ef8:	e002      	b.n	8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005efa:	2300      	movs	r3, #0
 8005efc:	617b      	str	r3, [r7, #20]
          break;
 8005efe:	bf00      	nop
        }
      }
      break;
 8005f00:	e000      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8005f02:	bf00      	nop
    }
  }
  return frequency;
 8005f04:	697b      	ldr	r3, [r7, #20]
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	371c      	adds	r7, #28
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	40023800 	.word	0x40023800
 8005f18:	00bb8000 	.word	0x00bb8000
 8005f1c:	007a1200 	.word	0x007a1200
 8005f20:	00f42400 	.word	0x00f42400

08005f24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d101      	bne.n	8005f36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e07b      	b.n	800602e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d108      	bne.n	8005f50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f46:	d009      	beq.n	8005f5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	61da      	str	r2, [r3, #28]
 8005f4e:	e005      	b.n	8005f5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d106      	bne.n	8005f7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f7fa ff22 	bl	8000dc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2202      	movs	r2, #2
 8005f80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f92:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005fa4:	431a      	orrs	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fae:	431a      	orrs	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	f003 0302 	and.w	r3, r3, #2
 8005fb8:	431a      	orrs	r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	f003 0301 	and.w	r3, r3, #1
 8005fc2:	431a      	orrs	r2, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fcc:	431a      	orrs	r2, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	69db      	ldr	r3, [r3, #28]
 8005fd2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005fd6:	431a      	orrs	r2, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a1b      	ldr	r3, [r3, #32]
 8005fdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fe0:	ea42 0103 	orr.w	r1, r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fe8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	430a      	orrs	r2, r1
 8005ff2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	0c1b      	lsrs	r3, r3, #16
 8005ffa:	f003 0104 	and.w	r1, r3, #4
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006002:	f003 0210 	and.w	r2, r3, #16
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	430a      	orrs	r2, r1
 800600c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	69da      	ldr	r2, [r3, #28]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800601c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3708      	adds	r7, #8
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006036:	b084      	sub	sp, #16
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	f107 001c 	add.w	r0, r7, #28
 8006044:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006048:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800604c:	2b01      	cmp	r3, #1
 800604e:	d123      	bne.n	8006098 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006054:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006064:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006078:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800607c:	2b01      	cmp	r3, #1
 800607e:	d105      	bne.n	800608c <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f9dc 	bl	800644a <USB_CoreReset>
 8006092:	4603      	mov	r3, r0
 8006094:	73fb      	strb	r3, [r7, #15]
 8006096:	e01b      	b.n	80060d0 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 f9d0 	bl	800644a <USB_CoreReset>
 80060aa:	4603      	mov	r3, r0
 80060ac:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80060ae:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d106      	bne.n	80060c4 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ba:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	639a      	str	r2, [r3, #56]	@ 0x38
 80060c2:	e005      	b.n	80060d0 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060c8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80060d0:	7fbb      	ldrb	r3, [r7, #30]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d10b      	bne.n	80060ee <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f043 0206 	orr.w	r2, r3, #6
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f043 0220 	orr.w	r2, r3, #32
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80060ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3710      	adds	r7, #16
 80060f4:	46bd      	mov	sp, r7
 80060f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060fa:	b004      	add	sp, #16
 80060fc:	4770      	bx	lr

080060fe <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060fe:	b480      	push	{r7}
 8006100:	b083      	sub	sp, #12
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f043 0201 	orr.w	r2, r3, #1
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	f023 0201 	bic.w	r2, r3, #1
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006142:	b580      	push	{r7, lr}
 8006144:	b084      	sub	sp, #16
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
 800614a:	460b      	mov	r3, r1
 800614c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800614e:	2300      	movs	r3, #0
 8006150:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800615e:	78fb      	ldrb	r3, [r7, #3]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d115      	bne.n	8006190 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006170:	200a      	movs	r0, #10
 8006172:	f7fa ff95 	bl	80010a0 <HAL_Delay>
      ms += 10U;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	330a      	adds	r3, #10
 800617a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 f956 	bl	800642e <USB_GetMode>
 8006182:	4603      	mov	r3, r0
 8006184:	2b01      	cmp	r3, #1
 8006186:	d01e      	beq.n	80061c6 <USB_SetCurrentMode+0x84>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2bc7      	cmp	r3, #199	@ 0xc7
 800618c:	d9f0      	bls.n	8006170 <USB_SetCurrentMode+0x2e>
 800618e:	e01a      	b.n	80061c6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006190:	78fb      	ldrb	r3, [r7, #3]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d115      	bne.n	80061c2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80061a2:	200a      	movs	r0, #10
 80061a4:	f7fa ff7c 	bl	80010a0 <HAL_Delay>
      ms += 10U;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	330a      	adds	r3, #10
 80061ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f93d 	bl	800642e <USB_GetMode>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d005      	beq.n	80061c6 <USB_SetCurrentMode+0x84>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2bc7      	cmp	r3, #199	@ 0xc7
 80061be:	d9f0      	bls.n	80061a2 <USB_SetCurrentMode+0x60>
 80061c0:	e001      	b.n	80061c6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e005      	b.n	80061d2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2bc8      	cmp	r3, #200	@ 0xc8
 80061ca:	d101      	bne.n	80061d0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e000      	b.n	80061d2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3710      	adds	r7, #16
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80061da:	b480      	push	{r7}
 80061dc:	b085      	sub	sp, #20
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
 80061e2:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80061e4:	2300      	movs	r3, #0
 80061e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	3301      	adds	r3, #1
 80061ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061f4:	d901      	bls.n	80061fa <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e01b      	b.n	8006232 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	daf2      	bge.n	80061e8 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006202:	2300      	movs	r3, #0
 8006204:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	019b      	lsls	r3, r3, #6
 800620a:	f043 0220 	orr.w	r2, r3, #32
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	3301      	adds	r3, #1
 8006216:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800621e:	d901      	bls.n	8006224 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006220:	2303      	movs	r3, #3
 8006222:	e006      	b.n	8006232 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	f003 0320 	and.w	r3, r3, #32
 800622c:	2b20      	cmp	r3, #32
 800622e:	d0f0      	beq.n	8006212 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3714      	adds	r7, #20
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr

0800623e <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800623e:	b480      	push	{r7}
 8006240:	b085      	sub	sp, #20
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006246:	2300      	movs	r3, #0
 8006248:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	3301      	adds	r3, #1
 800624e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006256:	d901      	bls.n	800625c <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	e018      	b.n	800628e <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	2b00      	cmp	r3, #0
 8006262:	daf2      	bge.n	800624a <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006264:	2300      	movs	r3, #0
 8006266:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2210      	movs	r2, #16
 800626c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	3301      	adds	r3, #1
 8006272:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800627a:	d901      	bls.n	8006280 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e006      	b.n	800628e <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	f003 0310 	and.w	r3, r3, #16
 8006288:	2b10      	cmp	r3, #16
 800628a:	d0f0      	beq.n	800626e <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3714      	adds	r7, #20
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800629a:	b480      	push	{r7}
 800629c:	b089      	sub	sp, #36	@ 0x24
 800629e:	af00      	add	r7, sp, #0
 80062a0:	60f8      	str	r0, [r7, #12]
 80062a2:	60b9      	str	r1, [r7, #8]
 80062a4:	4611      	mov	r1, r2
 80062a6:	461a      	mov	r2, r3
 80062a8:	460b      	mov	r3, r1
 80062aa:	71fb      	strb	r3, [r7, #7]
 80062ac:	4613      	mov	r3, r2
 80062ae:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80062b8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d123      	bne.n	8006308 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80062c0:	88bb      	ldrh	r3, [r7, #4]
 80062c2:	3303      	adds	r3, #3
 80062c4:	089b      	lsrs	r3, r3, #2
 80062c6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80062c8:	2300      	movs	r3, #0
 80062ca:	61bb      	str	r3, [r7, #24]
 80062cc:	e018      	b.n	8006300 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80062ce:	79fb      	ldrb	r3, [r7, #7]
 80062d0:	031a      	lsls	r2, r3, #12
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	4413      	add	r3, r2
 80062d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062da:	461a      	mov	r2, r3
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	6013      	str	r3, [r2, #0]
      pSrc++;
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	3301      	adds	r3, #1
 80062e6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	3301      	adds	r3, #1
 80062ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	3301      	adds	r3, #1
 80062f2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	3301      	adds	r3, #1
 80062f8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	3301      	adds	r3, #1
 80062fe:	61bb      	str	r3, [r7, #24]
 8006300:	69ba      	ldr	r2, [r7, #24]
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	429a      	cmp	r2, r3
 8006306:	d3e2      	bcc.n	80062ce <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3724      	adds	r7, #36	@ 0x24
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr

08006316 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006316:	b480      	push	{r7}
 8006318:	b08b      	sub	sp, #44	@ 0x2c
 800631a:	af00      	add	r7, sp, #0
 800631c:	60f8      	str	r0, [r7, #12]
 800631e:	60b9      	str	r1, [r7, #8]
 8006320:	4613      	mov	r3, r2
 8006322:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800632c:	88fb      	ldrh	r3, [r7, #6]
 800632e:	089b      	lsrs	r3, r3, #2
 8006330:	b29b      	uxth	r3, r3
 8006332:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006334:	88fb      	ldrh	r3, [r7, #6]
 8006336:	f003 0303 	and.w	r3, r3, #3
 800633a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800633c:	2300      	movs	r3, #0
 800633e:	623b      	str	r3, [r7, #32]
 8006340:	e014      	b.n	800636c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800634c:	601a      	str	r2, [r3, #0]
    pDest++;
 800634e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006350:	3301      	adds	r3, #1
 8006352:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006356:	3301      	adds	r3, #1
 8006358:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800635a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635c:	3301      	adds	r3, #1
 800635e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006362:	3301      	adds	r3, #1
 8006364:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006366:	6a3b      	ldr	r3, [r7, #32]
 8006368:	3301      	adds	r3, #1
 800636a:	623b      	str	r3, [r7, #32]
 800636c:	6a3a      	ldr	r2, [r7, #32]
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	429a      	cmp	r2, r3
 8006372:	d3e6      	bcc.n	8006342 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006374:	8bfb      	ldrh	r3, [r7, #30]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d01e      	beq.n	80063b8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800637a:	2300      	movs	r3, #0
 800637c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006384:	461a      	mov	r2, r3
 8006386:	f107 0310 	add.w	r3, r7, #16
 800638a:	6812      	ldr	r2, [r2, #0]
 800638c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800638e:	693a      	ldr	r2, [r7, #16]
 8006390:	6a3b      	ldr	r3, [r7, #32]
 8006392:	b2db      	uxtb	r3, r3
 8006394:	00db      	lsls	r3, r3, #3
 8006396:	fa22 f303 	lsr.w	r3, r2, r3
 800639a:	b2da      	uxtb	r2, r3
 800639c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639e:	701a      	strb	r2, [r3, #0]
      i++;
 80063a0:	6a3b      	ldr	r3, [r7, #32]
 80063a2:	3301      	adds	r3, #1
 80063a4:	623b      	str	r3, [r7, #32]
      pDest++;
 80063a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a8:	3301      	adds	r3, #1
 80063aa:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80063ac:	8bfb      	ldrh	r3, [r7, #30]
 80063ae:	3b01      	subs	r3, #1
 80063b0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80063b2:	8bfb      	ldrh	r3, [r7, #30]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d1ea      	bne.n	800638e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80063b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	372c      	adds	r7, #44	@ 0x2c
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b085      	sub	sp, #20
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	4013      	ands	r3, r2
 80063dc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80063de:	68fb      	ldr	r3, [r7, #12]
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3714      	adds	r7, #20
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	460b      	mov	r3, r1
 80063f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80063fc:	78fb      	ldrb	r3, [r7, #3]
 80063fe:	015a      	lsls	r2, r3, #5
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	4413      	add	r3, r2
 8006404:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800640c:	78fb      	ldrb	r3, [r7, #3]
 800640e:	015a      	lsls	r2, r3, #5
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	4413      	add	r3, r2
 8006414:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	68ba      	ldr	r2, [r7, #8]
 800641c:	4013      	ands	r3, r2
 800641e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006420:	68bb      	ldr	r3, [r7, #8]
}
 8006422:	4618      	mov	r0, r3
 8006424:	3714      	adds	r7, #20
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr

0800642e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800642e:	b480      	push	{r7}
 8006430:	b083      	sub	sp, #12
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	695b      	ldr	r3, [r3, #20]
 800643a:	f003 0301 	and.w	r3, r3, #1
}
 800643e:	4618      	mov	r0, r3
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr

0800644a <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800644a:	b480      	push	{r7}
 800644c:	b085      	sub	sp, #20
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006452:	2300      	movs	r3, #0
 8006454:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	3301      	adds	r3, #1
 800645a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006462:	d901      	bls.n	8006468 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	e01b      	b.n	80064a0 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	2b00      	cmp	r3, #0
 800646e:	daf2      	bge.n	8006456 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006470:	2300      	movs	r3, #0
 8006472:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	f043 0201 	orr.w	r2, r3, #1
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	3301      	adds	r3, #1
 8006484:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800648c:	d901      	bls.n	8006492 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	e006      	b.n	80064a0 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	f003 0301 	and.w	r3, r3, #1
 800649a:	2b01      	cmp	r3, #1
 800649c:	d0f0      	beq.n	8006480 <USB_CoreReset+0x36>

  return HAL_OK;
 800649e:	2300      	movs	r3, #0
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3714      	adds	r7, #20
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064ac:	b084      	sub	sp, #16
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b086      	sub	sp, #24
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
 80064b6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80064ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80064be:	2300      	movs	r3, #0
 80064c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80064cc:	461a      	mov	r2, r3
 80064ce:	2300      	movs	r3, #0
 80064d0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064d6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064e2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ee:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d119      	bne.n	8006536 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006502:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006506:	2b01      	cmp	r3, #1
 8006508:	d10a      	bne.n	8006520 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006518:	f043 0304 	orr.w	r3, r3, #4
 800651c:	6013      	str	r3, [r2, #0]
 800651e:	e014      	b.n	800654a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800652e:	f023 0304 	bic.w	r3, r3, #4
 8006532:	6013      	str	r3, [r2, #0]
 8006534:	e009      	b.n	800654a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006544:	f023 0304 	bic.w	r3, r3, #4
 8006548:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800654a:	2110      	movs	r1, #16
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f7ff fe44 	bl	80061da <USB_FlushTxFifo>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d001      	beq.n	800655c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f7ff fe6e 	bl	800623e <USB_FlushRxFifo>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d001      	beq.n	800656c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800656c:	2300      	movs	r3, #0
 800656e:	613b      	str	r3, [r7, #16]
 8006570:	e015      	b.n	800659e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	015a      	lsls	r2, r3, #5
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	4413      	add	r3, r2
 800657a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800657e:	461a      	mov	r2, r3
 8006580:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006584:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	015a      	lsls	r2, r3, #5
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	4413      	add	r3, r2
 800658e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006592:	461a      	mov	r2, r3
 8006594:	2300      	movs	r3, #0
 8006596:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	3301      	adds	r3, #1
 800659c:	613b      	str	r3, [r7, #16]
 800659e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80065a2:	461a      	mov	r2, r3
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d3e3      	bcc.n	8006572 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80065b6:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a18      	ldr	r2, [pc, #96]	@ (800661c <USB_HostInit+0x170>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d10b      	bne.n	80065d8 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065c6:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a15      	ldr	r2, [pc, #84]	@ (8006620 <USB_HostInit+0x174>)
 80065cc:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a14      	ldr	r2, [pc, #80]	@ (8006624 <USB_HostInit+0x178>)
 80065d2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80065d6:	e009      	b.n	80065ec <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2280      	movs	r2, #128	@ 0x80
 80065dc:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a11      	ldr	r2, [pc, #68]	@ (8006628 <USB_HostInit+0x17c>)
 80065e2:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a11      	ldr	r2, [pc, #68]	@ (800662c <USB_HostInit+0x180>)
 80065e8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80065ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d105      	bne.n	8006600 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	f043 0210 	orr.w	r2, r3, #16
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	699a      	ldr	r2, [r3, #24]
 8006604:	4b0a      	ldr	r3, [pc, #40]	@ (8006630 <USB_HostInit+0x184>)
 8006606:	4313      	orrs	r3, r2
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800660c:	7dfb      	ldrb	r3, [r7, #23]
}
 800660e:	4618      	mov	r0, r3
 8006610:	3718      	adds	r7, #24
 8006612:	46bd      	mov	sp, r7
 8006614:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006618:	b004      	add	sp, #16
 800661a:	4770      	bx	lr
 800661c:	40040000 	.word	0x40040000
 8006620:	01000200 	.word	0x01000200
 8006624:	00e00300 	.word	0x00e00300
 8006628:	00600080 	.word	0x00600080
 800662c:	004000e0 	.word	0x004000e0
 8006630:	a3200008 	.word	0xa3200008

08006634 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	460b      	mov	r3, r1
 800663e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006652:	f023 0303 	bic.w	r3, r3, #3
 8006656:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	78fb      	ldrb	r3, [r7, #3]
 8006662:	f003 0303 	and.w	r3, r3, #3
 8006666:	68f9      	ldr	r1, [r7, #12]
 8006668:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800666c:	4313      	orrs	r3, r2
 800666e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006670:	78fb      	ldrb	r3, [r7, #3]
 8006672:	2b01      	cmp	r3, #1
 8006674:	d107      	bne.n	8006686 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800667c:	461a      	mov	r2, r3
 800667e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006682:	6053      	str	r3, [r2, #4]
 8006684:	e00c      	b.n	80066a0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8006686:	78fb      	ldrb	r3, [r7, #3]
 8006688:	2b02      	cmp	r3, #2
 800668a:	d107      	bne.n	800669c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006692:	461a      	mov	r2, r3
 8006694:	f241 7370 	movw	r3, #6000	@ 0x1770
 8006698:	6053      	str	r3, [r2, #4]
 800669a:	e001      	b.n	80066a0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e000      	b.n	80066a2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3714      	adds	r7, #20
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b084      	sub	sp, #16
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80066ba:	2300      	movs	r3, #0
 80066bc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80066ce:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80066d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066dc:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80066de:	2064      	movs	r0, #100	@ 0x64
 80066e0:	f7fa fcde 	bl	80010a0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80066ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066f0:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80066f2:	200a      	movs	r0, #10
 80066f4:	f7fa fcd4 	bl	80010a0 <HAL_Delay>

  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3710      	adds	r7, #16
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}

08006702 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006702:	b480      	push	{r7}
 8006704:	b085      	sub	sp, #20
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
 800670a:	460b      	mov	r3, r1
 800670c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006712:	2300      	movs	r3, #0
 8006714:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006726:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800672e:	2b00      	cmp	r3, #0
 8006730:	d109      	bne.n	8006746 <USB_DriveVbus+0x44>
 8006732:	78fb      	ldrb	r3, [r7, #3]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d106      	bne.n	8006746 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006740:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006744:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800674c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006750:	d109      	bne.n	8006766 <USB_DriveVbus+0x64>
 8006752:	78fb      	ldrb	r3, [r7, #3]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d106      	bne.n	8006766 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006760:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006764:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3714      	adds	r7, #20
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006780:	2300      	movs	r3, #0
 8006782:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	0c5b      	lsrs	r3, r3, #17
 8006792:	f003 0303 	and.w	r3, r3, #3
}
 8006796:	4618      	mov	r0, r3
 8006798:	3714      	adds	r7, #20
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr

080067a2 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80067a2:	b480      	push	{r7}
 80067a4:	b085      	sub	sp, #20
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	b29b      	uxth	r3, r3
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3714      	adds	r7, #20
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b088      	sub	sp, #32
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	4608      	mov	r0, r1
 80067ce:	4611      	mov	r1, r2
 80067d0:	461a      	mov	r2, r3
 80067d2:	4603      	mov	r3, r0
 80067d4:	70fb      	strb	r3, [r7, #3]
 80067d6:	460b      	mov	r3, r1
 80067d8:	70bb      	strb	r3, [r7, #2]
 80067da:	4613      	mov	r3, r2
 80067dc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80067de:	2300      	movs	r3, #0
 80067e0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80067e6:	78fb      	ldrb	r3, [r7, #3]
 80067e8:	015a      	lsls	r2, r3, #5
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	4413      	add	r3, r2
 80067ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067f2:	461a      	mov	r2, r3
 80067f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80067f8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80067fa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80067fe:	2b03      	cmp	r3, #3
 8006800:	d87c      	bhi.n	80068fc <USB_HC_Init+0x138>
 8006802:	a201      	add	r2, pc, #4	@ (adr r2, 8006808 <USB_HC_Init+0x44>)
 8006804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006808:	08006819 	.word	0x08006819
 800680c:	080068bf 	.word	0x080068bf
 8006810:	08006819 	.word	0x08006819
 8006814:	08006881 	.word	0x08006881
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006818:	78fb      	ldrb	r3, [r7, #3]
 800681a:	015a      	lsls	r2, r3, #5
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	4413      	add	r3, r2
 8006820:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006824:	461a      	mov	r2, r3
 8006826:	f240 439d 	movw	r3, #1181	@ 0x49d
 800682a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800682c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006830:	2b00      	cmp	r3, #0
 8006832:	da10      	bge.n	8006856 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006834:	78fb      	ldrb	r3, [r7, #3]
 8006836:	015a      	lsls	r2, r3, #5
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	4413      	add	r3, r2
 800683c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	78fa      	ldrb	r2, [r7, #3]
 8006844:	0151      	lsls	r1, r2, #5
 8006846:	693a      	ldr	r2, [r7, #16]
 8006848:	440a      	add	r2, r1
 800684a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800684e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006852:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8006854:	e055      	b.n	8006902 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a6f      	ldr	r2, [pc, #444]	@ (8006a18 <USB_HC_Init+0x254>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d151      	bne.n	8006902 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800685e:	78fb      	ldrb	r3, [r7, #3]
 8006860:	015a      	lsls	r2, r3, #5
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	4413      	add	r3, r2
 8006866:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	78fa      	ldrb	r2, [r7, #3]
 800686e:	0151      	lsls	r1, r2, #5
 8006870:	693a      	ldr	r2, [r7, #16]
 8006872:	440a      	add	r2, r1
 8006874:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006878:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800687c:	60d3      	str	r3, [r2, #12]
      break;
 800687e:	e040      	b.n	8006902 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006880:	78fb      	ldrb	r3, [r7, #3]
 8006882:	015a      	lsls	r2, r3, #5
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	4413      	add	r3, r2
 8006888:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800688c:	461a      	mov	r2, r3
 800688e:	f240 639d 	movw	r3, #1693	@ 0x69d
 8006892:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006894:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006898:	2b00      	cmp	r3, #0
 800689a:	da34      	bge.n	8006906 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800689c:	78fb      	ldrb	r3, [r7, #3]
 800689e:	015a      	lsls	r2, r3, #5
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	4413      	add	r3, r2
 80068a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	78fa      	ldrb	r2, [r7, #3]
 80068ac:	0151      	lsls	r1, r2, #5
 80068ae:	693a      	ldr	r2, [r7, #16]
 80068b0:	440a      	add	r2, r1
 80068b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068ba:	60d3      	str	r3, [r2, #12]
      }

      break;
 80068bc:	e023      	b.n	8006906 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80068be:	78fb      	ldrb	r3, [r7, #3]
 80068c0:	015a      	lsls	r2, r3, #5
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	4413      	add	r3, r2
 80068c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068ca:	461a      	mov	r2, r3
 80068cc:	f240 2325 	movw	r3, #549	@ 0x225
 80068d0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80068d2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	da17      	bge.n	800690a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80068da:	78fb      	ldrb	r3, [r7, #3]
 80068dc:	015a      	lsls	r2, r3, #5
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	4413      	add	r3, r2
 80068e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	78fa      	ldrb	r2, [r7, #3]
 80068ea:	0151      	lsls	r1, r2, #5
 80068ec:	693a      	ldr	r2, [r7, #16]
 80068ee:	440a      	add	r2, r1
 80068f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068f4:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80068f8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80068fa:	e006      	b.n	800690a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	77fb      	strb	r3, [r7, #31]
      break;
 8006900:	e004      	b.n	800690c <USB_HC_Init+0x148>
      break;
 8006902:	bf00      	nop
 8006904:	e002      	b.n	800690c <USB_HC_Init+0x148>
      break;
 8006906:	bf00      	nop
 8006908:	e000      	b.n	800690c <USB_HC_Init+0x148>
      break;
 800690a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800690c:	78fb      	ldrb	r3, [r7, #3]
 800690e:	015a      	lsls	r2, r3, #5
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	4413      	add	r3, r2
 8006914:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006918:	461a      	mov	r2, r3
 800691a:	2300      	movs	r3, #0
 800691c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800691e:	78fb      	ldrb	r3, [r7, #3]
 8006920:	015a      	lsls	r2, r3, #5
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	4413      	add	r3, r2
 8006926:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	78fa      	ldrb	r2, [r7, #3]
 800692e:	0151      	lsls	r1, r2, #5
 8006930:	693a      	ldr	r2, [r7, #16]
 8006932:	440a      	add	r2, r1
 8006934:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006938:	f043 0302 	orr.w	r3, r3, #2
 800693c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006944:	699a      	ldr	r2, [r3, #24]
 8006946:	78fb      	ldrb	r3, [r7, #3]
 8006948:	f003 030f 	and.w	r3, r3, #15
 800694c:	2101      	movs	r1, #1
 800694e:	fa01 f303 	lsl.w	r3, r1, r3
 8006952:	6939      	ldr	r1, [r7, #16]
 8006954:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006958:	4313      	orrs	r3, r2
 800695a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	699b      	ldr	r3, [r3, #24]
 8006960:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006968:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800696c:	2b00      	cmp	r3, #0
 800696e:	da03      	bge.n	8006978 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006970:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006974:	61bb      	str	r3, [r7, #24]
 8006976:	e001      	b.n	800697c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8006978:	2300      	movs	r3, #0
 800697a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f7ff fef9 	bl	8006774 <USB_GetHostSpeed>
 8006982:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006984:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006988:	2b02      	cmp	r3, #2
 800698a:	d106      	bne.n	800699a <USB_HC_Init+0x1d6>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2b02      	cmp	r3, #2
 8006990:	d003      	beq.n	800699a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006992:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006996:	617b      	str	r3, [r7, #20]
 8006998:	e001      	b.n	800699e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800699a:	2300      	movs	r3, #0
 800699c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800699e:	787b      	ldrb	r3, [r7, #1]
 80069a0:	059b      	lsls	r3, r3, #22
 80069a2:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80069a6:	78bb      	ldrb	r3, [r7, #2]
 80069a8:	02db      	lsls	r3, r3, #11
 80069aa:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80069ae:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80069b0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80069b4:	049b      	lsls	r3, r3, #18
 80069b6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80069ba:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80069bc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80069be:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80069c2:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	431a      	orrs	r2, r3
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80069cc:	78fa      	ldrb	r2, [r7, #3]
 80069ce:	0151      	lsls	r1, r2, #5
 80069d0:	693a      	ldr	r2, [r7, #16]
 80069d2:	440a      	add	r2, r1
 80069d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80069d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80069dc:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80069de:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80069e2:	2b03      	cmp	r3, #3
 80069e4:	d003      	beq.n	80069ee <USB_HC_Init+0x22a>
 80069e6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d10f      	bne.n	8006a0e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80069ee:	78fb      	ldrb	r3, [r7, #3]
 80069f0:	015a      	lsls	r2, r3, #5
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	4413      	add	r3, r2
 80069f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	78fa      	ldrb	r2, [r7, #3]
 80069fe:	0151      	lsls	r1, r2, #5
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	440a      	add	r2, r1
 8006a04:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a08:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006a0c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006a0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3720      	adds	r7, #32
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	40040000 	.word	0x40040000

08006a1c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b08c      	sub	sp, #48	@ 0x30
 8006a20:	af02      	add	r7, sp, #8
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	4613      	mov	r3, r2
 8006a28:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	785b      	ldrb	r3, [r3, #1]
 8006a32:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006a34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006a38:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	4a5d      	ldr	r2, [pc, #372]	@ (8006bb4 <USB_HC_StartXfer+0x198>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d12f      	bne.n	8006aa2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8006a42:	79fb      	ldrb	r3, [r7, #7]
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d11c      	bne.n	8006a82 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	7c9b      	ldrb	r3, [r3, #18]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d003      	beq.n	8006a58 <USB_HC_StartXfer+0x3c>
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	7c9b      	ldrb	r3, [r3, #18]
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d124      	bne.n	8006aa2 <USB_HC_StartXfer+0x86>
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	799b      	ldrb	r3, [r3, #6]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d120      	bne.n	8006aa2 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	015a      	lsls	r2, r3, #5
 8006a64:	6a3b      	ldr	r3, [r7, #32]
 8006a66:	4413      	add	r3, r2
 8006a68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	69fa      	ldr	r2, [r7, #28]
 8006a70:	0151      	lsls	r1, r2, #5
 8006a72:	6a3a      	ldr	r2, [r7, #32]
 8006a74:	440a      	add	r2, r1
 8006a76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a7e:	60d3      	str	r3, [r2, #12]
 8006a80:	e00f      	b.n	8006aa2 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	791b      	ldrb	r3, [r3, #4]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d10b      	bne.n	8006aa2 <USB_HC_StartXfer+0x86>
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	795b      	ldrb	r3, [r3, #5]
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d107      	bne.n	8006aa2 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	785b      	ldrb	r3, [r3, #1]
 8006a96:	4619      	mov	r1, r3
 8006a98:	68f8      	ldr	r0, [r7, #12]
 8006a9a:	f000 fb6b 	bl	8007174 <USB_DoPing>
        return HAL_OK;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	e232      	b.n	8006f08 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	799b      	ldrb	r3, [r3, #6]
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d158      	bne.n	8006b5c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	78db      	ldrb	r3, [r3, #3]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d007      	beq.n	8006ac6 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006ab6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	8a92      	ldrh	r2, [r2, #20]
 8006abc:	fb03 f202 	mul.w	r2, r3, r2
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	61da      	str	r2, [r3, #28]
 8006ac4:	e07c      	b.n	8006bc0 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	7c9b      	ldrb	r3, [r3, #18]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d130      	bne.n	8006b30 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	6a1b      	ldr	r3, [r3, #32]
 8006ad2:	2bbc      	cmp	r3, #188	@ 0xbc
 8006ad4:	d918      	bls.n	8006b08 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	8a9b      	ldrh	r3, [r3, #20]
 8006ada:	461a      	mov	r2, r3
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	69da      	ldr	r2, [r3, #28]
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d003      	beq.n	8006af8 <USB_HC_StartXfer+0xdc>
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d103      	bne.n	8006b00 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	2202      	movs	r2, #2
 8006afc:	60da      	str	r2, [r3, #12]
 8006afe:	e05f      	b.n	8006bc0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	2201      	movs	r2, #1
 8006b04:	60da      	str	r2, [r3, #12]
 8006b06:	e05b      	b.n	8006bc0 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	6a1a      	ldr	r2, [r3, #32]
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d007      	beq.n	8006b28 <USB_HC_StartXfer+0x10c>
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d003      	beq.n	8006b28 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	2204      	movs	r2, #4
 8006b24:	60da      	str	r2, [r3, #12]
 8006b26:	e04b      	b.n	8006bc0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	2203      	movs	r2, #3
 8006b2c:	60da      	str	r2, [r3, #12]
 8006b2e:	e047      	b.n	8006bc0 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006b30:	79fb      	ldrb	r3, [r7, #7]
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d10d      	bne.n	8006b52 <USB_HC_StartXfer+0x136>
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	6a1b      	ldr	r3, [r3, #32]
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	8a92      	ldrh	r2, [r2, #20]
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d907      	bls.n	8006b52 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006b42:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006b44:	68ba      	ldr	r2, [r7, #8]
 8006b46:	8a92      	ldrh	r2, [r2, #20]
 8006b48:	fb03 f202 	mul.w	r2, r3, r2
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	61da      	str	r2, [r3, #28]
 8006b50:	e036      	b.n	8006bc0 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	6a1a      	ldr	r2, [r3, #32]
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	61da      	str	r2, [r3, #28]
 8006b5a:	e031      	b.n	8006bc0 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	6a1b      	ldr	r3, [r3, #32]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d018      	beq.n	8006b96 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	6a1b      	ldr	r3, [r3, #32]
 8006b68:	68ba      	ldr	r2, [r7, #8]
 8006b6a:	8a92      	ldrh	r2, [r2, #20]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	68ba      	ldr	r2, [r7, #8]
 8006b72:	8a92      	ldrh	r2, [r2, #20]
 8006b74:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b78:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8006b7a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006b7c:	8b7b      	ldrh	r3, [r7, #26]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d90b      	bls.n	8006b9a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8006b82:	8b7b      	ldrh	r3, [r7, #26]
 8006b84:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006b86:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006b88:	68ba      	ldr	r2, [r7, #8]
 8006b8a:	8a92      	ldrh	r2, [r2, #20]
 8006b8c:	fb03 f202 	mul.w	r2, r3, r2
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	61da      	str	r2, [r3, #28]
 8006b94:	e001      	b.n	8006b9a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8006b96:	2301      	movs	r3, #1
 8006b98:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	78db      	ldrb	r3, [r3, #3]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d00a      	beq.n	8006bb8 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006ba2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006ba4:	68ba      	ldr	r2, [r7, #8]
 8006ba6:	8a92      	ldrh	r2, [r2, #20]
 8006ba8:	fb03 f202 	mul.w	r2, r3, r2
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	61da      	str	r2, [r3, #28]
 8006bb0:	e006      	b.n	8006bc0 <USB_HC_StartXfer+0x1a4>
 8006bb2:	bf00      	nop
 8006bb4:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	6a1a      	ldr	r2, [r3, #32]
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	69db      	ldr	r3, [r3, #28]
 8006bc4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006bc8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006bca:	04d9      	lsls	r1, r3, #19
 8006bcc:	4ba3      	ldr	r3, [pc, #652]	@ (8006e5c <USB_HC_StartXfer+0x440>)
 8006bce:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006bd0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	7d9b      	ldrb	r3, [r3, #22]
 8006bd6:	075b      	lsls	r3, r3, #29
 8006bd8:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006bdc:	69f9      	ldr	r1, [r7, #28]
 8006bde:	0148      	lsls	r0, r1, #5
 8006be0:	6a39      	ldr	r1, [r7, #32]
 8006be2:	4401      	add	r1, r0
 8006be4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006be8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006bea:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006bec:	79fb      	ldrb	r3, [r7, #7]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d009      	beq.n	8006c06 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	6999      	ldr	r1, [r3, #24]
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	015a      	lsls	r2, r3, #5
 8006bfa:	6a3b      	ldr	r3, [r7, #32]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c02:	460a      	mov	r2, r1
 8006c04:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006c06:	6a3b      	ldr	r3, [r7, #32]
 8006c08:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	f003 0301 	and.w	r3, r3, #1
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	bf0c      	ite	eq
 8006c16:	2301      	moveq	r3, #1
 8006c18:	2300      	movne	r3, #0
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	015a      	lsls	r2, r3, #5
 8006c22:	6a3b      	ldr	r3, [r7, #32]
 8006c24:	4413      	add	r3, r2
 8006c26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	69fa      	ldr	r2, [r7, #28]
 8006c2e:	0151      	lsls	r1, r2, #5
 8006c30:	6a3a      	ldr	r2, [r7, #32]
 8006c32:	440a      	add	r2, r1
 8006c34:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c38:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006c3c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	015a      	lsls	r2, r3, #5
 8006c42:	6a3b      	ldr	r3, [r7, #32]
 8006c44:	4413      	add	r3, r2
 8006c46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	7e7b      	ldrb	r3, [r7, #25]
 8006c4e:	075b      	lsls	r3, r3, #29
 8006c50:	69f9      	ldr	r1, [r7, #28]
 8006c52:	0148      	lsls	r0, r1, #5
 8006c54:	6a39      	ldr	r1, [r7, #32]
 8006c56:	4401      	add	r1, r0
 8006c58:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	799b      	ldrb	r3, [r3, #6]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	f040 80c3 	bne.w	8006df0 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	7c5b      	ldrb	r3, [r3, #17]
 8006c6e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006c70:	68ba      	ldr	r2, [r7, #8]
 8006c72:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006c74:	4313      	orrs	r3, r2
 8006c76:	69fa      	ldr	r2, [r7, #28]
 8006c78:	0151      	lsls	r1, r2, #5
 8006c7a:	6a3a      	ldr	r2, [r7, #32]
 8006c7c:	440a      	add	r2, r1
 8006c7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006c82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006c86:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	015a      	lsls	r2, r3, #5
 8006c8c:	6a3b      	ldr	r3, [r7, #32]
 8006c8e:	4413      	add	r3, r2
 8006c90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	69fa      	ldr	r2, [r7, #28]
 8006c98:	0151      	lsls	r1, r2, #5
 8006c9a:	6a3a      	ldr	r2, [r7, #32]
 8006c9c:	440a      	add	r2, r1
 8006c9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ca2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006ca6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	79db      	ldrb	r3, [r3, #7]
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d123      	bne.n	8006cf8 <USB_HC_StartXfer+0x2dc>
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	78db      	ldrb	r3, [r3, #3]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d11f      	bne.n	8006cf8 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	015a      	lsls	r2, r3, #5
 8006cbc:	6a3b      	ldr	r3, [r7, #32]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	69fa      	ldr	r2, [r7, #28]
 8006cc8:	0151      	lsls	r1, r2, #5
 8006cca:	6a3a      	ldr	r2, [r7, #32]
 8006ccc:	440a      	add	r2, r1
 8006cce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006cd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cd6:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	015a      	lsls	r2, r3, #5
 8006cdc:	6a3b      	ldr	r3, [r7, #32]
 8006cde:	4413      	add	r3, r2
 8006ce0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	69fa      	ldr	r2, [r7, #28]
 8006ce8:	0151      	lsls	r1, r2, #5
 8006cea:	6a3a      	ldr	r2, [r7, #32]
 8006cec:	440a      	add	r2, r1
 8006cee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006cf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cf6:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	7c9b      	ldrb	r3, [r3, #18]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d003      	beq.n	8006d08 <USB_HC_StartXfer+0x2ec>
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	7c9b      	ldrb	r3, [r3, #18]
 8006d04:	2b03      	cmp	r3, #3
 8006d06:	d117      	bne.n	8006d38 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d113      	bne.n	8006d38 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	78db      	ldrb	r3, [r3, #3]
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d10f      	bne.n	8006d38 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	015a      	lsls	r2, r3, #5
 8006d1c:	6a3b      	ldr	r3, [r7, #32]
 8006d1e:	4413      	add	r3, r2
 8006d20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	69fa      	ldr	r2, [r7, #28]
 8006d28:	0151      	lsls	r1, r2, #5
 8006d2a:	6a3a      	ldr	r2, [r7, #32]
 8006d2c:	440a      	add	r2, r1
 8006d2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d36:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	7c9b      	ldrb	r3, [r3, #18]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d162      	bne.n	8006e06 <USB_HC_StartXfer+0x3ea>
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	78db      	ldrb	r3, [r3, #3]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d15e      	bne.n	8006e06 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	2b03      	cmp	r3, #3
 8006d50:	d858      	bhi.n	8006e04 <USB_HC_StartXfer+0x3e8>
 8006d52:	a201      	add	r2, pc, #4	@ (adr r2, 8006d58 <USB_HC_StartXfer+0x33c>)
 8006d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d58:	08006d69 	.word	0x08006d69
 8006d5c:	08006d8b 	.word	0x08006d8b
 8006d60:	08006dad 	.word	0x08006dad
 8006d64:	08006dcf 	.word	0x08006dcf
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	015a      	lsls	r2, r3, #5
 8006d6c:	6a3b      	ldr	r3, [r7, #32]
 8006d6e:	4413      	add	r3, r2
 8006d70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	69fa      	ldr	r2, [r7, #28]
 8006d78:	0151      	lsls	r1, r2, #5
 8006d7a:	6a3a      	ldr	r2, [r7, #32]
 8006d7c:	440a      	add	r2, r1
 8006d7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d86:	6053      	str	r3, [r2, #4]
          break;
 8006d88:	e03d      	b.n	8006e06 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	015a      	lsls	r2, r3, #5
 8006d8e:	6a3b      	ldr	r3, [r7, #32]
 8006d90:	4413      	add	r3, r2
 8006d92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	69fa      	ldr	r2, [r7, #28]
 8006d9a:	0151      	lsls	r1, r2, #5
 8006d9c:	6a3a      	ldr	r2, [r7, #32]
 8006d9e:	440a      	add	r2, r1
 8006da0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006da4:	f043 030e 	orr.w	r3, r3, #14
 8006da8:	6053      	str	r3, [r2, #4]
          break;
 8006daa:	e02c      	b.n	8006e06 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	015a      	lsls	r2, r3, #5
 8006db0:	6a3b      	ldr	r3, [r7, #32]
 8006db2:	4413      	add	r3, r2
 8006db4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	69fa      	ldr	r2, [r7, #28]
 8006dbc:	0151      	lsls	r1, r2, #5
 8006dbe:	6a3a      	ldr	r2, [r7, #32]
 8006dc0:	440a      	add	r2, r1
 8006dc2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006dc6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006dca:	6053      	str	r3, [r2, #4]
          break;
 8006dcc:	e01b      	b.n	8006e06 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	015a      	lsls	r2, r3, #5
 8006dd2:	6a3b      	ldr	r3, [r7, #32]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	69fa      	ldr	r2, [r7, #28]
 8006dde:	0151      	lsls	r1, r2, #5
 8006de0:	6a3a      	ldr	r2, [r7, #32]
 8006de2:	440a      	add	r2, r1
 8006de4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006de8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006dec:	6053      	str	r3, [r2, #4]
          break;
 8006dee:	e00a      	b.n	8006e06 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	015a      	lsls	r2, r3, #5
 8006df4:	6a3b      	ldr	r3, [r7, #32]
 8006df6:	4413      	add	r3, r2
 8006df8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	2300      	movs	r3, #0
 8006e00:	6053      	str	r3, [r2, #4]
 8006e02:	e000      	b.n	8006e06 <USB_HC_StartXfer+0x3ea>
          break;
 8006e04:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	015a      	lsls	r2, r3, #5
 8006e0a:	6a3b      	ldr	r3, [r7, #32]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006e1c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	78db      	ldrb	r3, [r3, #3]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d004      	beq.n	8006e30 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e2c:	613b      	str	r3, [r7, #16]
 8006e2e:	e003      	b.n	8006e38 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006e36:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006e3e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	015a      	lsls	r2, r3, #5
 8006e44:	6a3b      	ldr	r3, [r7, #32]
 8006e46:	4413      	add	r3, r2
 8006e48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006e52:	79fb      	ldrb	r3, [r7, #7]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d003      	beq.n	8006e60 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	e055      	b.n	8006f08 <USB_HC_StartXfer+0x4ec>
 8006e5c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	78db      	ldrb	r3, [r3, #3]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d14e      	bne.n	8006f06 <USB_HC_StartXfer+0x4ea>
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	6a1b      	ldr	r3, [r3, #32]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d04a      	beq.n	8006f06 <USB_HC_StartXfer+0x4ea>
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	79db      	ldrb	r3, [r3, #7]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d146      	bne.n	8006f06 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	7c9b      	ldrb	r3, [r3, #18]
 8006e7c:	2b03      	cmp	r3, #3
 8006e7e:	d831      	bhi.n	8006ee4 <USB_HC_StartXfer+0x4c8>
 8006e80:	a201      	add	r2, pc, #4	@ (adr r2, 8006e88 <USB_HC_StartXfer+0x46c>)
 8006e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e86:	bf00      	nop
 8006e88:	08006e99 	.word	0x08006e99
 8006e8c:	08006ebd 	.word	0x08006ebd
 8006e90:	08006e99 	.word	0x08006e99
 8006e94:	08006ebd 	.word	0x08006ebd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	6a1b      	ldr	r3, [r3, #32]
 8006e9c:	3303      	adds	r3, #3
 8006e9e:	089b      	lsrs	r3, r3, #2
 8006ea0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006ea2:	8afa      	ldrh	r2, [r7, #22]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d91c      	bls.n	8006ee8 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	699b      	ldr	r3, [r3, #24]
 8006eb2:	f043 0220 	orr.w	r2, r3, #32
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	619a      	str	r2, [r3, #24]
        }
        break;
 8006eba:	e015      	b.n	8006ee8 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	6a1b      	ldr	r3, [r3, #32]
 8006ec0:	3303      	adds	r3, #3
 8006ec2:	089b      	lsrs	r3, r3, #2
 8006ec4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006ec6:	8afa      	ldrh	r2, [r7, #22]
 8006ec8:	6a3b      	ldr	r3, [r7, #32]
 8006eca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d90a      	bls.n	8006eec <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	699b      	ldr	r3, [r3, #24]
 8006eda:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	619a      	str	r2, [r3, #24]
        }
        break;
 8006ee2:	e003      	b.n	8006eec <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006ee4:	bf00      	nop
 8006ee6:	e002      	b.n	8006eee <USB_HC_StartXfer+0x4d2>
        break;
 8006ee8:	bf00      	nop
 8006eea:	e000      	b.n	8006eee <USB_HC_StartXfer+0x4d2>
        break;
 8006eec:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	6999      	ldr	r1, [r3, #24]
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	785a      	ldrb	r2, [r3, #1]
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	2000      	movs	r0, #0
 8006efe:	9000      	str	r0, [sp, #0]
 8006f00:	68f8      	ldr	r0, [r7, #12]
 8006f02:	f7ff f9ca 	bl	800629a <USB_WritePacket>
  }

  return HAL_OK;
 8006f06:	2300      	movs	r3, #0
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3728      	adds	r7, #40	@ 0x28
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b085      	sub	sp, #20
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f22:	695b      	ldr	r3, [r3, #20]
 8006f24:	b29b      	uxth	r3, r3
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3714      	adds	r7, #20
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr

08006f32 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006f32:	b480      	push	{r7}
 8006f34:	b089      	sub	sp, #36	@ 0x24
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006f42:	78fb      	ldrb	r3, [r7, #3]
 8006f44:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006f46:	2300      	movs	r3, #0
 8006f48:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	015a      	lsls	r2, r3, #5
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	4413      	add	r3, r2
 8006f52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	0c9b      	lsrs	r3, r3, #18
 8006f5a:	f003 0303 	and.w	r3, r3, #3
 8006f5e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	015a      	lsls	r2, r3, #5
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	4413      	add	r3, r2
 8006f68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	0fdb      	lsrs	r3, r3, #31
 8006f70:	f003 0301 	and.w	r3, r3, #1
 8006f74:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	015a      	lsls	r2, r3, #5
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	0fdb      	lsrs	r3, r3, #31
 8006f86:	f003 0301 	and.w	r3, r3, #1
 8006f8a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	f003 0320 	and.w	r3, r3, #32
 8006f94:	2b20      	cmp	r3, #32
 8006f96:	d10d      	bne.n	8006fb4 <USB_HC_Halt+0x82>
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d10a      	bne.n	8006fb4 <USB_HC_Halt+0x82>
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d005      	beq.n	8006fb0 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d002      	beq.n	8006fb0 <USB_HC_Halt+0x7e>
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	2b03      	cmp	r3, #3
 8006fae:	d101      	bne.n	8006fb4 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	e0d8      	b.n	8007166 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d002      	beq.n	8006fc0 <USB_HC_Halt+0x8e>
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	d173      	bne.n	80070a8 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	015a      	lsls	r2, r3, #5
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	69ba      	ldr	r2, [r7, #24]
 8006fd0:	0151      	lsls	r1, r2, #5
 8006fd2:	69fa      	ldr	r2, [r7, #28]
 8006fd4:	440a      	add	r2, r1
 8006fd6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006fda:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006fde:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	f003 0320 	and.w	r3, r3, #32
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d14a      	bne.n	8007082 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ff0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d133      	bne.n	8007060 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	015a      	lsls	r2, r3, #5
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	4413      	add	r3, r2
 8007000:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	69ba      	ldr	r2, [r7, #24]
 8007008:	0151      	lsls	r1, r2, #5
 800700a:	69fa      	ldr	r2, [r7, #28]
 800700c:	440a      	add	r2, r1
 800700e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007012:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007016:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	015a      	lsls	r2, r3, #5
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	4413      	add	r3, r2
 8007020:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	69ba      	ldr	r2, [r7, #24]
 8007028:	0151      	lsls	r1, r2, #5
 800702a:	69fa      	ldr	r2, [r7, #28]
 800702c:	440a      	add	r2, r1
 800702e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007032:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007036:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	3301      	adds	r3, #1
 800703c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007044:	d82e      	bhi.n	80070a4 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	015a      	lsls	r2, r3, #5
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	4413      	add	r3, r2
 800704e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007058:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800705c:	d0ec      	beq.n	8007038 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800705e:	e081      	b.n	8007164 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	015a      	lsls	r2, r3, #5
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	4413      	add	r3, r2
 8007068:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	69ba      	ldr	r2, [r7, #24]
 8007070:	0151      	lsls	r1, r2, #5
 8007072:	69fa      	ldr	r2, [r7, #28]
 8007074:	440a      	add	r2, r1
 8007076:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800707a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800707e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007080:	e070      	b.n	8007164 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	015a      	lsls	r2, r3, #5
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	4413      	add	r3, r2
 800708a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	69ba      	ldr	r2, [r7, #24]
 8007092:	0151      	lsls	r1, r2, #5
 8007094:	69fa      	ldr	r2, [r7, #28]
 8007096:	440a      	add	r2, r1
 8007098:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800709c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80070a0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80070a2:	e05f      	b.n	8007164 <USB_HC_Halt+0x232>
            break;
 80070a4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80070a6:	e05d      	b.n	8007164 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	015a      	lsls	r2, r3, #5
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	4413      	add	r3, r2
 80070b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	69ba      	ldr	r2, [r7, #24]
 80070b8:	0151      	lsls	r1, r2, #5
 80070ba:	69fa      	ldr	r2, [r7, #28]
 80070bc:	440a      	add	r2, r1
 80070be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80070c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80070c6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80070ce:	691b      	ldr	r3, [r3, #16]
 80070d0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d133      	bne.n	8007140 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	015a      	lsls	r2, r3, #5
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	4413      	add	r3, r2
 80070e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	69ba      	ldr	r2, [r7, #24]
 80070e8:	0151      	lsls	r1, r2, #5
 80070ea:	69fa      	ldr	r2, [r7, #28]
 80070ec:	440a      	add	r2, r1
 80070ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80070f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80070f6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	015a      	lsls	r2, r3, #5
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	4413      	add	r3, r2
 8007100:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	69ba      	ldr	r2, [r7, #24]
 8007108:	0151      	lsls	r1, r2, #5
 800710a:	69fa      	ldr	r2, [r7, #28]
 800710c:	440a      	add	r2, r1
 800710e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007112:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007116:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	3301      	adds	r3, #1
 800711c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007124:	d81d      	bhi.n	8007162 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	015a      	lsls	r2, r3, #5
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	4413      	add	r3, r2
 800712e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007138:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800713c:	d0ec      	beq.n	8007118 <USB_HC_Halt+0x1e6>
 800713e:	e011      	b.n	8007164 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	015a      	lsls	r2, r3, #5
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	4413      	add	r3, r2
 8007148:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	69ba      	ldr	r2, [r7, #24]
 8007150:	0151      	lsls	r1, r2, #5
 8007152:	69fa      	ldr	r2, [r7, #28]
 8007154:	440a      	add	r2, r1
 8007156:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800715a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800715e:	6013      	str	r3, [r2, #0]
 8007160:	e000      	b.n	8007164 <USB_HC_Halt+0x232>
          break;
 8007162:	bf00      	nop
    }
  }

  return HAL_OK;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	3724      	adds	r7, #36	@ 0x24
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr
	...

08007174 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007174:	b480      	push	{r7}
 8007176:	b087      	sub	sp, #28
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	460b      	mov	r3, r1
 800717e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007184:	78fb      	ldrb	r3, [r7, #3]
 8007186:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007188:	2301      	movs	r3, #1
 800718a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	04da      	lsls	r2, r3, #19
 8007190:	4b15      	ldr	r3, [pc, #84]	@ (80071e8 <USB_DoPing+0x74>)
 8007192:	4013      	ands	r3, r2
 8007194:	693a      	ldr	r2, [r7, #16]
 8007196:	0151      	lsls	r1, r2, #5
 8007198:	697a      	ldr	r2, [r7, #20]
 800719a:	440a      	add	r2, r1
 800719c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80071a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80071a4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	015a      	lsls	r2, r3, #5
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	4413      	add	r3, r2
 80071ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80071bc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80071c4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	015a      	lsls	r2, r3, #5
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	4413      	add	r3, r2
 80071ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071d2:	461a      	mov	r2, r3
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	371c      	adds	r7, #28
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr
 80071e6:	bf00      	nop
 80071e8:	1ff80000 	.word	0x1ff80000

080071ec <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b088      	sub	sp, #32
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80071f4:	2300      	movs	r3, #0
 80071f6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80071fc:	2300      	movs	r3, #0
 80071fe:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f7fe ff8d 	bl	8006120 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007206:	2110      	movs	r1, #16
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f7fe ffe6 	bl	80061da <USB_FlushTxFifo>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d001      	beq.n	8007218 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f7ff f810 	bl	800623e <USB_FlushRxFifo>
 800721e:	4603      	mov	r3, r0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d001      	beq.n	8007228 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007228:	2300      	movs	r3, #0
 800722a:	61bb      	str	r3, [r7, #24]
 800722c:	e01f      	b.n	800726e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	015a      	lsls	r2, r3, #5
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	4413      	add	r3, r2
 8007236:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007244:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800724c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007254:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	015a      	lsls	r2, r3, #5
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	4413      	add	r3, r2
 800725e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007262:	461a      	mov	r2, r3
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	3301      	adds	r3, #1
 800726c:	61bb      	str	r3, [r7, #24]
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	2b0f      	cmp	r3, #15
 8007272:	d9dc      	bls.n	800722e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007274:	2300      	movs	r3, #0
 8007276:	61bb      	str	r3, [r7, #24]
 8007278:	e034      	b.n	80072e4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	015a      	lsls	r2, r3, #5
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	4413      	add	r3, r2
 8007282:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007290:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007298:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80072a0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	015a      	lsls	r2, r3, #5
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	4413      	add	r3, r2
 80072aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072ae:	461a      	mov	r2, r3
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	3301      	adds	r3, #1
 80072b8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80072c0:	d80c      	bhi.n	80072dc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	015a      	lsls	r2, r3, #5
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	4413      	add	r3, r2
 80072ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80072d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072d8:	d0ec      	beq.n	80072b4 <USB_StopHost+0xc8>
 80072da:	e000      	b.n	80072de <USB_StopHost+0xf2>
        break;
 80072dc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	3301      	adds	r3, #1
 80072e2:	61bb      	str	r3, [r7, #24]
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	2b0f      	cmp	r3, #15
 80072e8:	d9c7      	bls.n	800727a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80072f0:	461a      	mov	r2, r3
 80072f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80072f6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80072fe:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f7fe fefc 	bl	80060fe <USB_EnableGlobalInt>

  return ret;
 8007306:	7ffb      	ldrb	r3, [r7, #31]
}
 8007308:	4618      	mov	r0, r3
 800730a:	3720      	adds	r7, #32
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007310:	b590      	push	{r4, r7, lr}
 8007312:	b089      	sub	sp, #36	@ 0x24
 8007314:	af04      	add	r7, sp, #16
 8007316:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007318:	2301      	movs	r3, #1
 800731a:	2202      	movs	r2, #2
 800731c:	2102      	movs	r1, #2
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 fc85 	bl	8007c2e <USBH_FindInterface>
 8007324:	4603      	mov	r3, r0
 8007326:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007328:	7bfb      	ldrb	r3, [r7, #15]
 800732a:	2bff      	cmp	r3, #255	@ 0xff
 800732c:	d002      	beq.n	8007334 <USBH_CDC_InterfaceInit+0x24>
 800732e:	7bfb      	ldrb	r3, [r7, #15]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d901      	bls.n	8007338 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007334:	2302      	movs	r3, #2
 8007336:	e13d      	b.n	80075b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007338:	7bfb      	ldrb	r3, [r7, #15]
 800733a:	4619      	mov	r1, r3
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 fc5a 	bl	8007bf6 <USBH_SelectInterface>
 8007342:	4603      	mov	r3, r0
 8007344:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007346:	7bbb      	ldrb	r3, [r7, #14]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d001      	beq.n	8007350 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800734c:	2302      	movs	r3, #2
 800734e:	e131      	b.n	80075b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8007356:	2050      	movs	r0, #80	@ 0x50
 8007358:	f002 fb64 	bl	8009a24 <malloc>
 800735c:	4603      	mov	r3, r0
 800735e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007366:	69db      	ldr	r3, [r3, #28]
 8007368:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d101      	bne.n	8007374 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007370:	2302      	movs	r3, #2
 8007372:	e11f      	b.n	80075b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007374:	2250      	movs	r2, #80	@ 0x50
 8007376:	2100      	movs	r1, #0
 8007378:	68b8      	ldr	r0, [r7, #8]
 800737a:	f002 fc11 	bl	8009ba0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800737e:	7bfb      	ldrb	r3, [r7, #15]
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	211a      	movs	r1, #26
 8007384:	fb01 f303 	mul.w	r3, r1, r3
 8007388:	4413      	add	r3, r2
 800738a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	b25b      	sxtb	r3, r3
 8007392:	2b00      	cmp	r3, #0
 8007394:	da15      	bge.n	80073c2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007396:	7bfb      	ldrb	r3, [r7, #15]
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	211a      	movs	r1, #26
 800739c:	fb01 f303 	mul.w	r3, r1, r3
 80073a0:	4413      	add	r3, r2
 80073a2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80073a6:	781a      	ldrb	r2, [r3, #0]
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80073ac:	7bfb      	ldrb	r3, [r7, #15]
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	211a      	movs	r1, #26
 80073b2:	fb01 f303 	mul.w	r3, r1, r3
 80073b6:	4413      	add	r3, r2
 80073b8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80073bc:	881a      	ldrh	r2, [r3, #0]
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	785b      	ldrb	r3, [r3, #1]
 80073c6:	4619      	mov	r1, r3
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f001 ffbe 	bl	800934a <USBH_AllocPipe>
 80073ce:	4603      	mov	r3, r0
 80073d0:	461a      	mov	r2, r3
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	7819      	ldrb	r1, [r3, #0]
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	7858      	ldrb	r0, [r3, #1]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80073ea:	68ba      	ldr	r2, [r7, #8]
 80073ec:	8952      	ldrh	r2, [r2, #10]
 80073ee:	9202      	str	r2, [sp, #8]
 80073f0:	2203      	movs	r2, #3
 80073f2:	9201      	str	r2, [sp, #4]
 80073f4:	9300      	str	r3, [sp, #0]
 80073f6:	4623      	mov	r3, r4
 80073f8:	4602      	mov	r2, r0
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f001 ff76 	bl	80092ec <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	2200      	movs	r2, #0
 8007406:	4619      	mov	r1, r3
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f002 fa85 	bl	8009918 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800740e:	2300      	movs	r3, #0
 8007410:	2200      	movs	r2, #0
 8007412:	210a      	movs	r1, #10
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 fc0a 	bl	8007c2e <USBH_FindInterface>
 800741a:	4603      	mov	r3, r0
 800741c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800741e:	7bfb      	ldrb	r3, [r7, #15]
 8007420:	2bff      	cmp	r3, #255	@ 0xff
 8007422:	d002      	beq.n	800742a <USBH_CDC_InterfaceInit+0x11a>
 8007424:	7bfb      	ldrb	r3, [r7, #15]
 8007426:	2b01      	cmp	r3, #1
 8007428:	d901      	bls.n	800742e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800742a:	2302      	movs	r3, #2
 800742c:	e0c2      	b.n	80075b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800742e:	7bfb      	ldrb	r3, [r7, #15]
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	211a      	movs	r1, #26
 8007434:	fb01 f303 	mul.w	r3, r1, r3
 8007438:	4413      	add	r3, r2
 800743a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	b25b      	sxtb	r3, r3
 8007442:	2b00      	cmp	r3, #0
 8007444:	da16      	bge.n	8007474 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007446:	7bfb      	ldrb	r3, [r7, #15]
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	211a      	movs	r1, #26
 800744c:	fb01 f303 	mul.w	r3, r1, r3
 8007450:	4413      	add	r3, r2
 8007452:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007456:	781a      	ldrb	r2, [r3, #0]
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800745c:	7bfb      	ldrb	r3, [r7, #15]
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	211a      	movs	r1, #26
 8007462:	fb01 f303 	mul.w	r3, r1, r3
 8007466:	4413      	add	r3, r2
 8007468:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800746c:	881a      	ldrh	r2, [r3, #0]
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	835a      	strh	r2, [r3, #26]
 8007472:	e015      	b.n	80074a0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007474:	7bfb      	ldrb	r3, [r7, #15]
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	211a      	movs	r1, #26
 800747a:	fb01 f303 	mul.w	r3, r1, r3
 800747e:	4413      	add	r3, r2
 8007480:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007484:	781a      	ldrb	r2, [r3, #0]
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800748a:	7bfb      	ldrb	r3, [r7, #15]
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	211a      	movs	r1, #26
 8007490:	fb01 f303 	mul.w	r3, r1, r3
 8007494:	4413      	add	r3, r2
 8007496:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800749a:	881a      	ldrh	r2, [r3, #0]
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80074a0:	7bfb      	ldrb	r3, [r7, #15]
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	211a      	movs	r1, #26
 80074a6:	fb01 f303 	mul.w	r3, r1, r3
 80074aa:	4413      	add	r3, r2
 80074ac:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	b25b      	sxtb	r3, r3
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	da16      	bge.n	80074e6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80074b8:	7bfb      	ldrb	r3, [r7, #15]
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	211a      	movs	r1, #26
 80074be:	fb01 f303 	mul.w	r3, r1, r3
 80074c2:	4413      	add	r3, r2
 80074c4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80074c8:	781a      	ldrb	r2, [r3, #0]
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80074ce:	7bfb      	ldrb	r3, [r7, #15]
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	211a      	movs	r1, #26
 80074d4:	fb01 f303 	mul.w	r3, r1, r3
 80074d8:	4413      	add	r3, r2
 80074da:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80074de:	881a      	ldrh	r2, [r3, #0]
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	835a      	strh	r2, [r3, #26]
 80074e4:	e015      	b.n	8007512 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80074e6:	7bfb      	ldrb	r3, [r7, #15]
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	211a      	movs	r1, #26
 80074ec:	fb01 f303 	mul.w	r3, r1, r3
 80074f0:	4413      	add	r3, r2
 80074f2:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80074f6:	781a      	ldrb	r2, [r3, #0]
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80074fc:	7bfb      	ldrb	r3, [r7, #15]
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	211a      	movs	r1, #26
 8007502:	fb01 f303 	mul.w	r3, r1, r3
 8007506:	4413      	add	r3, r2
 8007508:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800750c:	881a      	ldrh	r2, [r3, #0]
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	7b9b      	ldrb	r3, [r3, #14]
 8007516:	4619      	mov	r1, r3
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f001 ff16 	bl	800934a <USBH_AllocPipe>
 800751e:	4603      	mov	r3, r0
 8007520:	461a      	mov	r2, r3
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	7bdb      	ldrb	r3, [r3, #15]
 800752a:	4619      	mov	r1, r3
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f001 ff0c 	bl	800934a <USBH_AllocPipe>
 8007532:	4603      	mov	r3, r0
 8007534:	461a      	mov	r2, r3
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	7b59      	ldrb	r1, [r3, #13]
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	7b98      	ldrb	r0, [r3, #14]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800754e:	68ba      	ldr	r2, [r7, #8]
 8007550:	8b12      	ldrh	r2, [r2, #24]
 8007552:	9202      	str	r2, [sp, #8]
 8007554:	2202      	movs	r2, #2
 8007556:	9201      	str	r2, [sp, #4]
 8007558:	9300      	str	r3, [sp, #0]
 800755a:	4623      	mov	r3, r4
 800755c:	4602      	mov	r2, r0
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f001 fec4 	bl	80092ec <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	7b19      	ldrb	r1, [r3, #12]
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	7bd8      	ldrb	r0, [r3, #15]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007578:	68ba      	ldr	r2, [r7, #8]
 800757a:	8b52      	ldrh	r2, [r2, #26]
 800757c:	9202      	str	r2, [sp, #8]
 800757e:	2202      	movs	r2, #2
 8007580:	9201      	str	r2, [sp, #4]
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	4623      	mov	r3, r4
 8007586:	4602      	mov	r2, r0
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f001 feaf 	bl	80092ec <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	2200      	movs	r2, #0
 8007592:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	7b5b      	ldrb	r3, [r3, #13]
 800759a:	2200      	movs	r2, #0
 800759c:	4619      	mov	r1, r3
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f002 f9ba 	bl	8009918 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	7b1b      	ldrb	r3, [r3, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	4619      	mov	r1, r3
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f002 f9b3 	bl	8009918 <USBH_LL_SetToggle>

  return USBH_OK;
 80075b2:	2300      	movs	r3, #0
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3714      	adds	r7, #20
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd90      	pop	{r4, r7, pc}

080075bc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80075ca:	69db      	ldr	r3, [r3, #28]
 80075cc:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00e      	beq.n	80075f4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	4619      	mov	r1, r3
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f001 fea4 	bl	800932a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	4619      	mov	r1, r3
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f001 fecf 	bl	800938c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	7b1b      	ldrb	r3, [r3, #12]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00e      	beq.n	800761a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	7b1b      	ldrb	r3, [r3, #12]
 8007600:	4619      	mov	r1, r3
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f001 fe91 	bl	800932a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	7b1b      	ldrb	r3, [r3, #12]
 800760c:	4619      	mov	r1, r3
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f001 febc 	bl	800938c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2200      	movs	r2, #0
 8007618:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	7b5b      	ldrb	r3, [r3, #13]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00e      	beq.n	8007640 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	7b5b      	ldrb	r3, [r3, #13]
 8007626:	4619      	mov	r1, r3
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f001 fe7e 	bl	800932a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	7b5b      	ldrb	r3, [r3, #13]
 8007632:	4619      	mov	r1, r3
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f001 fea9 	bl	800938c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2200      	movs	r2, #0
 800763e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007646:	69db      	ldr	r3, [r3, #28]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00b      	beq.n	8007664 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007652:	69db      	ldr	r3, [r3, #28]
 8007654:	4618      	mov	r0, r3
 8007656:	f002 f9ed 	bl	8009a34 <free>
    phost->pActiveClass->pData = 0U;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007660:	2200      	movs	r2, #0
 8007662:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b084      	sub	sp, #16
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800767c:	69db      	ldr	r3, [r3, #28]
 800767e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	3340      	adds	r3, #64	@ 0x40
 8007684:	4619      	mov	r1, r3
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 f8b1 	bl	80077ee <GetLineCoding>
 800768c:	4603      	mov	r3, r0
 800768e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007690:	7afb      	ldrb	r3, [r7, #11]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d105      	bne.n	80076a2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800769c:	2102      	movs	r1, #2
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80076a2:	7afb      	ldrb	r3, [r7, #11]
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3710      	adds	r7, #16
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80076b4:	2301      	movs	r3, #1
 80076b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80076b8:	2300      	movs	r3, #0
 80076ba:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80076c2:	69db      	ldr	r3, [r3, #28]
 80076c4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80076cc:	2b04      	cmp	r3, #4
 80076ce:	d877      	bhi.n	80077c0 <USBH_CDC_Process+0x114>
 80076d0:	a201      	add	r2, pc, #4	@ (adr r2, 80076d8 <USBH_CDC_Process+0x2c>)
 80076d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d6:	bf00      	nop
 80076d8:	080076ed 	.word	0x080076ed
 80076dc:	080076f3 	.word	0x080076f3
 80076e0:	08007723 	.word	0x08007723
 80076e4:	08007797 	.word	0x08007797
 80076e8:	080077a5 	.word	0x080077a5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80076ec:	2300      	movs	r3, #0
 80076ee:	73fb      	strb	r3, [r7, #15]
      break;
 80076f0:	e06d      	b.n	80077ce <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 f897 	bl	800782c <SetLineCoding>
 80076fe:	4603      	mov	r3, r0
 8007700:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007702:	7bbb      	ldrb	r3, [r7, #14]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d104      	bne.n	8007712 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	2202      	movs	r2, #2
 800770c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007710:	e058      	b.n	80077c4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007712:	7bbb      	ldrb	r3, [r7, #14]
 8007714:	2b01      	cmp	r3, #1
 8007716:	d055      	beq.n	80077c4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	2204      	movs	r2, #4
 800771c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007720:	e050      	b.n	80077c4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	3340      	adds	r3, #64	@ 0x40
 8007726:	4619      	mov	r1, r3
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 f860 	bl	80077ee <GetLineCoding>
 800772e:	4603      	mov	r3, r0
 8007730:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007732:	7bbb      	ldrb	r3, [r7, #14]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d126      	bne.n	8007786 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	2200      	movs	r2, #0
 800773c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800774a:	791b      	ldrb	r3, [r3, #4]
 800774c:	429a      	cmp	r2, r3
 800774e:	d13b      	bne.n	80077c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800775a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800775c:	429a      	cmp	r2, r3
 800775e:	d133      	bne.n	80077c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800776a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800776c:	429a      	cmp	r2, r3
 800776e:	d12b      	bne.n	80077c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007778:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800777a:	429a      	cmp	r2, r3
 800777c:	d124      	bne.n	80077c8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 f958 	bl	8007a34 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007784:	e020      	b.n	80077c8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007786:	7bbb      	ldrb	r3, [r7, #14]
 8007788:	2b01      	cmp	r3, #1
 800778a:	d01d      	beq.n	80077c8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	2204      	movs	r2, #4
 8007790:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007794:	e018      	b.n	80077c8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 f867 	bl	800786a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 f8da 	bl	8007956 <CDC_ProcessReception>
      break;
 80077a2:	e014      	b.n	80077ce <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80077a4:	2100      	movs	r1, #0
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f001 f81a 	bl	80087e0 <USBH_ClrFeature>
 80077ac:	4603      	mov	r3, r0
 80077ae:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80077b0:	7bbb      	ldrb	r3, [r7, #14]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d10a      	bne.n	80077cc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80077be:	e005      	b.n	80077cc <USBH_CDC_Process+0x120>

    default:
      break;
 80077c0:	bf00      	nop
 80077c2:	e004      	b.n	80077ce <USBH_CDC_Process+0x122>
      break;
 80077c4:	bf00      	nop
 80077c6:	e002      	b.n	80077ce <USBH_CDC_Process+0x122>
      break;
 80077c8:	bf00      	nop
 80077ca:	e000      	b.n	80077ce <USBH_CDC_Process+0x122>
      break;
 80077cc:	bf00      	nop

  }

  return status;
 80077ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3710      	adds	r7, #16
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	370c      	adds	r7, #12
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr

080077ee <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80077ee:	b580      	push	{r7, lr}
 80077f0:	b082      	sub	sp, #8
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
 80077f6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	22a1      	movs	r2, #161	@ 0xa1
 80077fc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2221      	movs	r2, #33	@ 0x21
 8007802:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2207      	movs	r2, #7
 8007814:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	2207      	movs	r2, #7
 800781a:	4619      	mov	r1, r3
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f001 fb14 	bl	8008e4a <USBH_CtlReq>
 8007822:	4603      	mov	r3, r0
}
 8007824:	4618      	mov	r0, r3
 8007826:	3708      	adds	r7, #8
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2221      	movs	r2, #33	@ 0x21
 800783a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2220      	movs	r2, #32
 8007840:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2207      	movs	r2, #7
 8007852:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	2207      	movs	r2, #7
 8007858:	4619      	mov	r1, r3
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f001 faf5 	bl	8008e4a <USBH_CtlReq>
 8007860:	4603      	mov	r3, r0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3708      	adds	r7, #8
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800786a:	b580      	push	{r7, lr}
 800786c:	b086      	sub	sp, #24
 800786e:	af02      	add	r7, sp, #8
 8007870:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007878:	69db      	ldr	r3, [r3, #28]
 800787a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800787c:	2300      	movs	r3, #0
 800787e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8007886:	2b01      	cmp	r3, #1
 8007888:	d002      	beq.n	8007890 <CDC_ProcessTransmission+0x26>
 800788a:	2b02      	cmp	r3, #2
 800788c:	d023      	beq.n	80078d6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800788e:	e05e      	b.n	800794e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	8b12      	ldrh	r2, [r2, #24]
 8007898:	4293      	cmp	r3, r2
 800789a:	d90b      	bls.n	80078b4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	69d9      	ldr	r1, [r3, #28]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	8b1a      	ldrh	r2, [r3, #24]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	7b5b      	ldrb	r3, [r3, #13]
 80078a8:	2001      	movs	r0, #1
 80078aa:	9000      	str	r0, [sp, #0]
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f001 fcda 	bl	8009266 <USBH_BulkSendData>
 80078b2:	e00b      	b.n	80078cc <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80078bc:	b29a      	uxth	r2, r3
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	7b5b      	ldrb	r3, [r3, #13]
 80078c2:	2001      	movs	r0, #1
 80078c4:	9000      	str	r0, [sp, #0]
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f001 fccd 	bl	8009266 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2202      	movs	r2, #2
 80078d0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80078d4:	e03b      	b.n	800794e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	7b5b      	ldrb	r3, [r3, #13]
 80078da:	4619      	mov	r1, r3
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f001 fff1 	bl	80098c4 <USBH_LL_GetURBState>
 80078e2:	4603      	mov	r3, r0
 80078e4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80078e6:	7afb      	ldrb	r3, [r7, #11]
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d128      	bne.n	800793e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078f0:	68fa      	ldr	r2, [r7, #12]
 80078f2:	8b12      	ldrh	r2, [r2, #24]
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d90e      	bls.n	8007916 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	8b12      	ldrh	r2, [r2, #24]
 8007900:	1a9a      	subs	r2, r3, r2
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	69db      	ldr	r3, [r3, #28]
 800790a:	68fa      	ldr	r2, [r7, #12]
 800790c:	8b12      	ldrh	r2, [r2, #24]
 800790e:	441a      	add	r2, r3
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	61da      	str	r2, [r3, #28]
 8007914:	e002      	b.n	800791c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2200      	movs	r2, #0
 800791a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007920:	2b00      	cmp	r3, #0
 8007922:	d004      	beq.n	800792e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800792c:	e00e      	b.n	800794c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 f868 	bl	8007a0c <USBH_CDC_TransmitCallback>
      break;
 800793c:	e006      	b.n	800794c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800793e:	7afb      	ldrb	r3, [r7, #11]
 8007940:	2b02      	cmp	r3, #2
 8007942:	d103      	bne.n	800794c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800794c:	bf00      	nop
  }
}
 800794e:	bf00      	nop
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b086      	sub	sp, #24
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007964:	69db      	ldr	r3, [r3, #28]
 8007966:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007968:	2300      	movs	r3, #0
 800796a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8007972:	2b03      	cmp	r3, #3
 8007974:	d002      	beq.n	800797c <CDC_ProcessReception+0x26>
 8007976:	2b04      	cmp	r3, #4
 8007978:	d00e      	beq.n	8007998 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800797a:	e043      	b.n	8007a04 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	6a19      	ldr	r1, [r3, #32]
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	8b5a      	ldrh	r2, [r3, #26]
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	7b1b      	ldrb	r3, [r3, #12]
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f001 fc91 	bl	80092b0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	2204      	movs	r2, #4
 8007992:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007996:	e035      	b.n	8007a04 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	7b1b      	ldrb	r3, [r3, #12]
 800799c:	4619      	mov	r1, r3
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f001 ff90 	bl	80098c4 <USBH_LL_GetURBState>
 80079a4:	4603      	mov	r3, r0
 80079a6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80079a8:	7cfb      	ldrb	r3, [r7, #19]
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d129      	bne.n	8007a02 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	7b1b      	ldrb	r3, [r3, #12]
 80079b2:	4619      	mov	r1, r3
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f001 fef3 	bl	80097a0 <USBH_LL_GetLastXferSize>
 80079ba:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079c0:	68fa      	ldr	r2, [r7, #12]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d016      	beq.n	80079f4 <CDC_ProcessReception+0x9e>
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	8b5b      	ldrh	r3, [r3, #26]
 80079ca:	461a      	mov	r2, r3
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d110      	bne.n	80079f4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	1ad2      	subs	r2, r2, r3
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	6a1a      	ldr	r2, [r3, #32]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	441a      	add	r2, r3
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	2203      	movs	r2, #3
 80079ee:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80079f2:	e006      	b.n	8007a02 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	2200      	movs	r2, #0
 80079f8:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 f80f 	bl	8007a20 <USBH_CDC_ReceiveCallback>
      break;
 8007a02:	bf00      	nop
  }
}
 8007a04:	bf00      	nop
 8007a06:	3718      	adds	r7, #24
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007a14:	bf00      	nop
 8007a16:	370c      	adds	r7, #12
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007a28:	bf00      	nop
 8007a2a:	370c      	adds	r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007a3c:	bf00      	nop
 8007a3e:	370c      	adds	r7, #12
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	4613      	mov	r3, r2
 8007a54:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d101      	bne.n	8007a60 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007a5c:	2302      	movs	r3, #2
 8007a5e:	e029      	b.n	8007ab4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	79fa      	ldrb	r2, [r7, #7]
 8007a64:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2200      	movs	r2, #0
 8007a74:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f000 f81f 	bl	8007abc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2200      	movs	r2, #0
 8007a92:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d003      	beq.n	8007aac <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	68ba      	ldr	r2, [r7, #8]
 8007aa8:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	f001 fdc3 	bl	8009638 <USBH_LL_Init>

  return USBH_OK;
 8007ab2:	2300      	movs	r3, #0
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3710      	adds	r7, #16
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007ac8:	2300      	movs	r3, #0
 8007aca:	60fb      	str	r3, [r7, #12]
 8007acc:	e009      	b.n	8007ae2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	33e0      	adds	r3, #224	@ 0xe0
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	4413      	add	r3, r2
 8007ad8:	2200      	movs	r2, #0
 8007ada:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	3301      	adds	r3, #1
 8007ae0:	60fb      	str	r3, [r7, #12]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2b0f      	cmp	r3, #15
 8007ae6:	d9f2      	bls.n	8007ace <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007ae8:	2300      	movs	r3, #0
 8007aea:	60fb      	str	r3, [r7, #12]
 8007aec:	e009      	b.n	8007b02 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	4413      	add	r3, r2
 8007af4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007af8:	2200      	movs	r2, #0
 8007afa:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	3301      	adds	r3, #1
 8007b00:	60fb      	str	r3, [r7, #12]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b08:	d3f1      	bcc.n	8007aee <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2201      	movs	r2, #1
 8007b1a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2240      	movs	r2, #64	@ 0x40
 8007b2e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2201      	movs	r2, #1
 8007b42:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	331c      	adds	r3, #28
 8007b5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007b5e:	2100      	movs	r1, #0
 8007b60:	4618      	mov	r0, r3
 8007b62:	f002 f81d 	bl	8009ba0 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007b6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b70:	2100      	movs	r1, #0
 8007b72:	4618      	mov	r0, r3
 8007b74:	f002 f814 	bl	8009ba0 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007b7e:	2212      	movs	r2, #18
 8007b80:	2100      	movs	r1, #0
 8007b82:	4618      	mov	r0, r3
 8007b84:	f002 f80c 	bl	8009ba0 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007b8e:	223e      	movs	r2, #62	@ 0x3e
 8007b90:	2100      	movs	r1, #0
 8007b92:	4618      	mov	r0, r3
 8007b94:	f002 f804 	bl	8009ba0 <memset>

  return USBH_OK;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3710      	adds	r7, #16
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007ba2:	b480      	push	{r7}
 8007ba4:	b085      	sub	sp, #20
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
 8007baa:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007bac:	2300      	movs	r3, #0
 8007bae:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d016      	beq.n	8007be4 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d10e      	bne.n	8007bde <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007bc6:	1c59      	adds	r1, r3, #1
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	33de      	adds	r3, #222	@ 0xde
 8007bd2:	6839      	ldr	r1, [r7, #0]
 8007bd4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	73fb      	strb	r3, [r7, #15]
 8007bdc:	e004      	b.n	8007be8 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007bde:	2302      	movs	r3, #2
 8007be0:	73fb      	strb	r3, [r7, #15]
 8007be2:	e001      	b.n	8007be8 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007be4:	2302      	movs	r3, #2
 8007be6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3714      	adds	r7, #20
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr

08007bf6 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007bf6:	b480      	push	{r7}
 8007bf8:	b085      	sub	sp, #20
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
 8007bfe:	460b      	mov	r3, r1
 8007c00:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007c02:	2300      	movs	r3, #0
 8007c04:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007c0c:	78fa      	ldrb	r2, [r7, #3]
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d204      	bcs.n	8007c1c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	78fa      	ldrb	r2, [r7, #3]
 8007c16:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007c1a:	e001      	b.n	8007c20 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007c1c:	2302      	movs	r3, #2
 8007c1e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3714      	adds	r7, #20
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr

08007c2e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007c2e:	b480      	push	{r7}
 8007c30:	b087      	sub	sp, #28
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
 8007c36:	4608      	mov	r0, r1
 8007c38:	4611      	mov	r1, r2
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	70fb      	strb	r3, [r7, #3]
 8007c40:	460b      	mov	r3, r1
 8007c42:	70bb      	strb	r3, [r7, #2]
 8007c44:	4613      	mov	r3, r2
 8007c46:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007c56:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007c58:	e025      	b.n	8007ca6 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007c5a:	7dfb      	ldrb	r3, [r7, #23]
 8007c5c:	221a      	movs	r2, #26
 8007c5e:	fb02 f303 	mul.w	r3, r2, r3
 8007c62:	3308      	adds	r3, #8
 8007c64:	68fa      	ldr	r2, [r7, #12]
 8007c66:	4413      	add	r3, r2
 8007c68:	3302      	adds	r3, #2
 8007c6a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	795b      	ldrb	r3, [r3, #5]
 8007c70:	78fa      	ldrb	r2, [r7, #3]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d002      	beq.n	8007c7c <USBH_FindInterface+0x4e>
 8007c76:	78fb      	ldrb	r3, [r7, #3]
 8007c78:	2bff      	cmp	r3, #255	@ 0xff
 8007c7a:	d111      	bne.n	8007ca0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007c80:	78ba      	ldrb	r2, [r7, #2]
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d002      	beq.n	8007c8c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007c86:	78bb      	ldrb	r3, [r7, #2]
 8007c88:	2bff      	cmp	r3, #255	@ 0xff
 8007c8a:	d109      	bne.n	8007ca0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007c90:	787a      	ldrb	r2, [r7, #1]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d002      	beq.n	8007c9c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007c96:	787b      	ldrb	r3, [r7, #1]
 8007c98:	2bff      	cmp	r3, #255	@ 0xff
 8007c9a:	d101      	bne.n	8007ca0 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007c9c:	7dfb      	ldrb	r3, [r7, #23]
 8007c9e:	e006      	b.n	8007cae <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007ca0:	7dfb      	ldrb	r3, [r7, #23]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007ca6:	7dfb      	ldrb	r3, [r7, #23]
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d9d6      	bls.n	8007c5a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007cac:	23ff      	movs	r3, #255	@ 0xff
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	371c      	adds	r7, #28
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr

08007cba <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007cba:	b580      	push	{r7, lr}
 8007cbc:	b082      	sub	sp, #8
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f001 fcf4 	bl	80096b0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007cc8:	2101      	movs	r1, #1
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f001 fe0d 	bl	80098ea <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3708      	adds	r7, #8
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
	...

08007cdc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b088      	sub	sp, #32
 8007ce0:	af04      	add	r7, sp, #16
 8007ce2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007ce4:	2302      	movs	r3, #2
 8007ce6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d102      	bne.n	8007cfe <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2203      	movs	r2, #3
 8007cfc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	2b0b      	cmp	r3, #11
 8007d06:	f200 81bb 	bhi.w	8008080 <USBH_Process+0x3a4>
 8007d0a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d10 <USBH_Process+0x34>)
 8007d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d10:	08007d41 	.word	0x08007d41
 8007d14:	08007d73 	.word	0x08007d73
 8007d18:	08007ddb 	.word	0x08007ddb
 8007d1c:	0800801b 	.word	0x0800801b
 8007d20:	08008081 	.word	0x08008081
 8007d24:	08007e7b 	.word	0x08007e7b
 8007d28:	08007fc1 	.word	0x08007fc1
 8007d2c:	08007eb1 	.word	0x08007eb1
 8007d30:	08007ed1 	.word	0x08007ed1
 8007d34:	08007eef 	.word	0x08007eef
 8007d38:	08007f33 	.word	0x08007f33
 8007d3c:	08008003 	.word	0x08008003
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	f000 819b 	beq.w	8008084 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2201      	movs	r2, #1
 8007d52:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007d54:	20c8      	movs	r0, #200	@ 0xc8
 8007d56:	f001 fe12 	bl	800997e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f001 fd05 	bl	800976a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007d70:	e188      	b.n	8008084 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d107      	bne.n	8007d8c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2202      	movs	r2, #2
 8007d88:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007d8a:	e18a      	b.n	80080a2 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007d92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007d96:	d914      	bls.n	8007dc2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007d9e:	3301      	adds	r3, #1
 8007da0:	b2da      	uxtb	r2, r3
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007dae:	2b03      	cmp	r3, #3
 8007db0:	d903      	bls.n	8007dba <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	220d      	movs	r2, #13
 8007db6:	701a      	strb	r2, [r3, #0]
      break;
 8007db8:	e173      	b.n	80080a2 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	701a      	strb	r2, [r3, #0]
      break;
 8007dc0:	e16f      	b.n	80080a2 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007dc8:	f103 020a 	add.w	r2, r3, #10
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8007dd2:	200a      	movs	r0, #10
 8007dd4:	f001 fdd3 	bl	800997e <USBH_Delay>
      break;
 8007dd8:	e163      	b.n	80080a2 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d005      	beq.n	8007df0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007dea:	2104      	movs	r1, #4
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007df0:	2064      	movs	r0, #100	@ 0x64
 8007df2:	f001 fdc4 	bl	800997e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f001 fc90 	bl	800971c <USBH_LL_GetSpeed>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	461a      	mov	r2, r3
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2205      	movs	r2, #5
 8007e0a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007e0c:	2100      	movs	r1, #0
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f001 fa9b 	bl	800934a <USBH_AllocPipe>
 8007e14:	4603      	mov	r3, r0
 8007e16:	461a      	mov	r2, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007e1c:	2180      	movs	r1, #128	@ 0x80
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f001 fa93 	bl	800934a <USBH_AllocPipe>
 8007e24:	4603      	mov	r3, r0
 8007e26:	461a      	mov	r2, r3
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	7919      	ldrb	r1, [r3, #4]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007e40:	9202      	str	r2, [sp, #8]
 8007e42:	2200      	movs	r2, #0
 8007e44:	9201      	str	r2, [sp, #4]
 8007e46:	9300      	str	r3, [sp, #0]
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2280      	movs	r2, #128	@ 0x80
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f001 fa4d 	bl	80092ec <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	7959      	ldrb	r1, [r3, #5]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007e66:	9202      	str	r2, [sp, #8]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	9201      	str	r2, [sp, #4]
 8007e6c:	9300      	str	r3, [sp, #0]
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2200      	movs	r2, #0
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f001 fa3a 	bl	80092ec <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007e78:	e113      	b.n	80080a2 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 f916 	bl	80080ac <USBH_HandleEnum>
 8007e80:	4603      	mov	r3, r0
 8007e82:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007e84:	7bbb      	ldrb	r3, [r7, #14]
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	f040 80fd 	bne.w	8008088 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d103      	bne.n	8007ea8 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2208      	movs	r2, #8
 8007ea4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007ea6:	e0ef      	b.n	8008088 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2207      	movs	r2, #7
 8007eac:	701a      	strb	r2, [r3, #0]
      break;
 8007eae:	e0eb      	b.n	8008088 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	f000 80e8 	beq.w	800808c <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007ec2:	2101      	movs	r1, #1
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2208      	movs	r2, #8
 8007ecc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007ece:	e0dd      	b.n	800808c <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 fc3a 	bl	8008752 <USBH_SetCfg>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f040 80d5 	bne.w	8008090 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2209      	movs	r2, #9
 8007eea:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007eec:	e0d0      	b.n	8008090 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8007ef4:	f003 0320 	and.w	r3, r3, #32
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d016      	beq.n	8007f2a <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007efc:	2101      	movs	r1, #1
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 fc4a 	bl	8008798 <USBH_SetFeature>
 8007f04:	4603      	mov	r3, r0
 8007f06:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007f08:	7bbb      	ldrb	r3, [r7, #14]
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d103      	bne.n	8007f18 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	220a      	movs	r2, #10
 8007f14:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007f16:	e0bd      	b.n	8008094 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8007f18:	7bbb      	ldrb	r3, [r7, #14]
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	2b03      	cmp	r3, #3
 8007f1e:	f040 80b9 	bne.w	8008094 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	220a      	movs	r2, #10
 8007f26:	701a      	strb	r2, [r3, #0]
      break;
 8007f28:	e0b4      	b.n	8008094 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	220a      	movs	r2, #10
 8007f2e:	701a      	strb	r2, [r3, #0]
      break;
 8007f30:	e0b0      	b.n	8008094 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f000 80ad 	beq.w	8008098 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007f46:	2300      	movs	r3, #0
 8007f48:	73fb      	strb	r3, [r7, #15]
 8007f4a:	e016      	b.n	8007f7a <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007f4c:	7bfa      	ldrb	r2, [r7, #15]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	32de      	adds	r2, #222	@ 0xde
 8007f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f56:	791a      	ldrb	r2, [r3, #4]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d108      	bne.n	8007f74 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007f62:	7bfa      	ldrb	r2, [r7, #15]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	32de      	adds	r2, #222	@ 0xde
 8007f68:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007f72:	e005      	b.n	8007f80 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007f74:	7bfb      	ldrb	r3, [r7, #15]
 8007f76:	3301      	adds	r3, #1
 8007f78:	73fb      	strb	r3, [r7, #15]
 8007f7a:	7bfb      	ldrb	r3, [r7, #15]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d0e5      	beq.n	8007f4c <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d016      	beq.n	8007fb8 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	4798      	blx	r3
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d109      	bne.n	8007fb0 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2206      	movs	r2, #6
 8007fa0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007fa8:	2103      	movs	r1, #3
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007fae:	e073      	b.n	8008098 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	220d      	movs	r2, #13
 8007fb4:	701a      	strb	r2, [r3, #0]
      break;
 8007fb6:	e06f      	b.n	8008098 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	220d      	movs	r2, #13
 8007fbc:	701a      	strb	r2, [r3, #0]
      break;
 8007fbe:	e06b      	b.n	8008098 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d017      	beq.n	8007ffa <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007fd0:	691b      	ldr	r3, [r3, #16]
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	4798      	blx	r3
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007fda:	7bbb      	ldrb	r3, [r7, #14]
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d103      	bne.n	8007fea <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	220b      	movs	r2, #11
 8007fe6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007fe8:	e058      	b.n	800809c <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8007fea:	7bbb      	ldrb	r3, [r7, #14]
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	2b02      	cmp	r3, #2
 8007ff0:	d154      	bne.n	800809c <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	220d      	movs	r2, #13
 8007ff6:	701a      	strb	r2, [r3, #0]
      break;
 8007ff8:	e050      	b.n	800809c <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	220d      	movs	r2, #13
 8007ffe:	701a      	strb	r2, [r3, #0]
      break;
 8008000:	e04c      	b.n	800809c <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008008:	2b00      	cmp	r3, #0
 800800a:	d049      	beq.n	80080a0 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008012:	695b      	ldr	r3, [r3, #20]
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	4798      	blx	r3
      }
      break;
 8008018:	e042      	b.n	80080a0 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f7ff fd4a 	bl	8007abc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800802e:	2b00      	cmp	r3, #0
 8008030:	d009      	beq.n	8008046 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008038:	68db      	ldr	r3, [r3, #12]
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800804c:	2b00      	cmp	r3, #0
 800804e:	d005      	beq.n	800805c <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008056:	2105      	movs	r1, #5
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8008062:	b2db      	uxtb	r3, r3
 8008064:	2b01      	cmp	r3, #1
 8008066:	d107      	bne.n	8008078 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f7ff fe22 	bl	8007cba <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008076:	e014      	b.n	80080a2 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f001 fb19 	bl	80096b0 <USBH_LL_Start>
      break;
 800807e:	e010      	b.n	80080a2 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008080:	bf00      	nop
 8008082:	e00e      	b.n	80080a2 <USBH_Process+0x3c6>
      break;
 8008084:	bf00      	nop
 8008086:	e00c      	b.n	80080a2 <USBH_Process+0x3c6>
      break;
 8008088:	bf00      	nop
 800808a:	e00a      	b.n	80080a2 <USBH_Process+0x3c6>
    break;
 800808c:	bf00      	nop
 800808e:	e008      	b.n	80080a2 <USBH_Process+0x3c6>
      break;
 8008090:	bf00      	nop
 8008092:	e006      	b.n	80080a2 <USBH_Process+0x3c6>
      break;
 8008094:	bf00      	nop
 8008096:	e004      	b.n	80080a2 <USBH_Process+0x3c6>
      break;
 8008098:	bf00      	nop
 800809a:	e002      	b.n	80080a2 <USBH_Process+0x3c6>
      break;
 800809c:	bf00      	nop
 800809e:	e000      	b.n	80080a2 <USBH_Process+0x3c6>
      break;
 80080a0:	bf00      	nop
  }
  return USBH_OK;
 80080a2:	2300      	movs	r3, #0
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3710      	adds	r7, #16
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b088      	sub	sp, #32
 80080b0:	af04      	add	r7, sp, #16
 80080b2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80080b4:	2301      	movs	r3, #1
 80080b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80080b8:	2301      	movs	r3, #1
 80080ba:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	785b      	ldrb	r3, [r3, #1]
 80080c0:	2b07      	cmp	r3, #7
 80080c2:	f200 81bd 	bhi.w	8008440 <USBH_HandleEnum+0x394>
 80080c6:	a201      	add	r2, pc, #4	@ (adr r2, 80080cc <USBH_HandleEnum+0x20>)
 80080c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080cc:	080080ed 	.word	0x080080ed
 80080d0:	080081a7 	.word	0x080081a7
 80080d4:	08008211 	.word	0x08008211
 80080d8:	0800829b 	.word	0x0800829b
 80080dc:	08008305 	.word	0x08008305
 80080e0:	08008375 	.word	0x08008375
 80080e4:	080083bb 	.word	0x080083bb
 80080e8:	08008401 	.word	0x08008401
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80080ec:	2108      	movs	r1, #8
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 fa4c 	bl	800858c <USBH_Get_DevDesc>
 80080f4:	4603      	mov	r3, r0
 80080f6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80080f8:	7bbb      	ldrb	r3, [r7, #14]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d12e      	bne.n	800815c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	7919      	ldrb	r1, [r3, #4]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008122:	9202      	str	r2, [sp, #8]
 8008124:	2200      	movs	r2, #0
 8008126:	9201      	str	r2, [sp, #4]
 8008128:	9300      	str	r3, [sp, #0]
 800812a:	4603      	mov	r3, r0
 800812c:	2280      	movs	r2, #128	@ 0x80
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f001 f8dc 	bl	80092ec <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	7959      	ldrb	r1, [r3, #5]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008148:	9202      	str	r2, [sp, #8]
 800814a:	2200      	movs	r2, #0
 800814c:	9201      	str	r2, [sp, #4]
 800814e:	9300      	str	r3, [sp, #0]
 8008150:	4603      	mov	r3, r0
 8008152:	2200      	movs	r2, #0
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f001 f8c9 	bl	80092ec <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800815a:	e173      	b.n	8008444 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800815c:	7bbb      	ldrb	r3, [r7, #14]
 800815e:	2b03      	cmp	r3, #3
 8008160:	f040 8170 	bne.w	8008444 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800816a:	3301      	adds	r3, #1
 800816c:	b2da      	uxtb	r2, r3
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800817a:	2b03      	cmp	r3, #3
 800817c:	d903      	bls.n	8008186 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	220d      	movs	r2, #13
 8008182:	701a      	strb	r2, [r3, #0]
      break;
 8008184:	e15e      	b.n	8008444 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	795b      	ldrb	r3, [r3, #5]
 800818a:	4619      	mov	r1, r3
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f001 f8fd 	bl	800938c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	791b      	ldrb	r3, [r3, #4]
 8008196:	4619      	mov	r1, r3
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f001 f8f7 	bl	800938c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	701a      	strb	r2, [r3, #0]
      break;
 80081a4:	e14e      	b.n	8008444 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80081a6:	2112      	movs	r1, #18
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 f9ef 	bl	800858c <USBH_Get_DevDesc>
 80081ae:	4603      	mov	r3, r0
 80081b0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80081b2:	7bbb      	ldrb	r3, [r7, #14]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d103      	bne.n	80081c0 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2202      	movs	r2, #2
 80081bc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80081be:	e143      	b.n	8008448 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081c0:	7bbb      	ldrb	r3, [r7, #14]
 80081c2:	2b03      	cmp	r3, #3
 80081c4:	f040 8140 	bne.w	8008448 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80081ce:	3301      	adds	r3, #1
 80081d0:	b2da      	uxtb	r2, r3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80081de:	2b03      	cmp	r3, #3
 80081e0:	d903      	bls.n	80081ea <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	220d      	movs	r2, #13
 80081e6:	701a      	strb	r2, [r3, #0]
      break;
 80081e8:	e12e      	b.n	8008448 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	795b      	ldrb	r3, [r3, #5]
 80081ee:	4619      	mov	r1, r3
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f001 f8cb 	bl	800938c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	791b      	ldrb	r3, [r3, #4]
 80081fa:	4619      	mov	r1, r3
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f001 f8c5 	bl	800938c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	701a      	strb	r2, [r3, #0]
      break;
 800820e:	e11b      	b.n	8008448 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008210:	2101      	movs	r1, #1
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 fa79 	bl	800870a <USBH_SetAddress>
 8008218:	4603      	mov	r3, r0
 800821a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800821c:	7bbb      	ldrb	r3, [r7, #14]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d130      	bne.n	8008284 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8008222:	2002      	movs	r0, #2
 8008224:	f001 fbab 	bl	800997e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2203      	movs	r2, #3
 8008234:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	7919      	ldrb	r1, [r3, #4]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800824a:	9202      	str	r2, [sp, #8]
 800824c:	2200      	movs	r2, #0
 800824e:	9201      	str	r2, [sp, #4]
 8008250:	9300      	str	r3, [sp, #0]
 8008252:	4603      	mov	r3, r0
 8008254:	2280      	movs	r2, #128	@ 0x80
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f001 f848 	bl	80092ec <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	7959      	ldrb	r1, [r3, #5]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008270:	9202      	str	r2, [sp, #8]
 8008272:	2200      	movs	r2, #0
 8008274:	9201      	str	r2, [sp, #4]
 8008276:	9300      	str	r3, [sp, #0]
 8008278:	4603      	mov	r3, r0
 800827a:	2200      	movs	r2, #0
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f001 f835 	bl	80092ec <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008282:	e0e3      	b.n	800844c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008284:	7bbb      	ldrb	r3, [r7, #14]
 8008286:	2b03      	cmp	r3, #3
 8008288:	f040 80e0 	bne.w	800844c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	220d      	movs	r2, #13
 8008290:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	705a      	strb	r2, [r3, #1]
      break;
 8008298:	e0d8      	b.n	800844c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800829a:	2109      	movs	r1, #9
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 f9a1 	bl	80085e4 <USBH_Get_CfgDesc>
 80082a2:	4603      	mov	r3, r0
 80082a4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80082a6:	7bbb      	ldrb	r3, [r7, #14]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d103      	bne.n	80082b4 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2204      	movs	r2, #4
 80082b0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80082b2:	e0cd      	b.n	8008450 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082b4:	7bbb      	ldrb	r3, [r7, #14]
 80082b6:	2b03      	cmp	r3, #3
 80082b8:	f040 80ca 	bne.w	8008450 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80082c2:	3301      	adds	r3, #1
 80082c4:	b2da      	uxtb	r2, r3
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80082d2:	2b03      	cmp	r3, #3
 80082d4:	d903      	bls.n	80082de <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	220d      	movs	r2, #13
 80082da:	701a      	strb	r2, [r3, #0]
      break;
 80082dc:	e0b8      	b.n	8008450 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	795b      	ldrb	r3, [r3, #5]
 80082e2:	4619      	mov	r1, r3
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f001 f851 	bl	800938c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	791b      	ldrb	r3, [r3, #4]
 80082ee:	4619      	mov	r1, r3
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f001 f84b 	bl	800938c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	701a      	strb	r2, [r3, #0]
      break;
 8008302:	e0a5      	b.n	8008450 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800830a:	4619      	mov	r1, r3
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 f969 	bl	80085e4 <USBH_Get_CfgDesc>
 8008312:	4603      	mov	r3, r0
 8008314:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008316:	7bbb      	ldrb	r3, [r7, #14]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d103      	bne.n	8008324 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2205      	movs	r2, #5
 8008320:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008322:	e097      	b.n	8008454 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008324:	7bbb      	ldrb	r3, [r7, #14]
 8008326:	2b03      	cmp	r3, #3
 8008328:	f040 8094 	bne.w	8008454 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008332:	3301      	adds	r3, #1
 8008334:	b2da      	uxtb	r2, r3
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008342:	2b03      	cmp	r3, #3
 8008344:	d903      	bls.n	800834e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	220d      	movs	r2, #13
 800834a:	701a      	strb	r2, [r3, #0]
      break;
 800834c:	e082      	b.n	8008454 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	795b      	ldrb	r3, [r3, #5]
 8008352:	4619      	mov	r1, r3
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f001 f819 	bl	800938c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	791b      	ldrb	r3, [r3, #4]
 800835e:	4619      	mov	r1, r3
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f001 f813 	bl	800938c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	701a      	strb	r2, [r3, #0]
      break;
 8008372:	e06f      	b.n	8008454 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800837a:	2b00      	cmp	r3, #0
 800837c:	d019      	beq.n	80083b2 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800838a:	23ff      	movs	r3, #255	@ 0xff
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 f953 	bl	8008638 <USBH_Get_StringDesc>
 8008392:	4603      	mov	r3, r0
 8008394:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008396:	7bbb      	ldrb	r3, [r7, #14]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d103      	bne.n	80083a4 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2206      	movs	r2, #6
 80083a0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80083a2:	e059      	b.n	8008458 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083a4:	7bbb      	ldrb	r3, [r7, #14]
 80083a6:	2b03      	cmp	r3, #3
 80083a8:	d156      	bne.n	8008458 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2206      	movs	r2, #6
 80083ae:	705a      	strb	r2, [r3, #1]
      break;
 80083b0:	e052      	b.n	8008458 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2206      	movs	r2, #6
 80083b6:	705a      	strb	r2, [r3, #1]
      break;
 80083b8:	e04e      	b.n	8008458 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d019      	beq.n	80083f8 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80083d0:	23ff      	movs	r3, #255	@ 0xff
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 f930 	bl	8008638 <USBH_Get_StringDesc>
 80083d8:	4603      	mov	r3, r0
 80083da:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80083dc:	7bbb      	ldrb	r3, [r7, #14]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d103      	bne.n	80083ea <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2207      	movs	r2, #7
 80083e6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80083e8:	e038      	b.n	800845c <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083ea:	7bbb      	ldrb	r3, [r7, #14]
 80083ec:	2b03      	cmp	r3, #3
 80083ee:	d135      	bne.n	800845c <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2207      	movs	r2, #7
 80083f4:	705a      	strb	r2, [r3, #1]
      break;
 80083f6:	e031      	b.n	800845c <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2207      	movs	r2, #7
 80083fc:	705a      	strb	r2, [r3, #1]
      break;
 80083fe:	e02d      	b.n	800845c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8008406:	2b00      	cmp	r3, #0
 8008408:	d017      	beq.n	800843a <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008416:	23ff      	movs	r3, #255	@ 0xff
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 f90d 	bl	8008638 <USBH_Get_StringDesc>
 800841e:	4603      	mov	r3, r0
 8008420:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008422:	7bbb      	ldrb	r3, [r7, #14]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d102      	bne.n	800842e <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008428:	2300      	movs	r3, #0
 800842a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800842c:	e018      	b.n	8008460 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800842e:	7bbb      	ldrb	r3, [r7, #14]
 8008430:	2b03      	cmp	r3, #3
 8008432:	d115      	bne.n	8008460 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8008434:	2300      	movs	r3, #0
 8008436:	73fb      	strb	r3, [r7, #15]
      break;
 8008438:	e012      	b.n	8008460 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800843a:	2300      	movs	r3, #0
 800843c:	73fb      	strb	r3, [r7, #15]
      break;
 800843e:	e00f      	b.n	8008460 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8008440:	bf00      	nop
 8008442:	e00e      	b.n	8008462 <USBH_HandleEnum+0x3b6>
      break;
 8008444:	bf00      	nop
 8008446:	e00c      	b.n	8008462 <USBH_HandleEnum+0x3b6>
      break;
 8008448:	bf00      	nop
 800844a:	e00a      	b.n	8008462 <USBH_HandleEnum+0x3b6>
      break;
 800844c:	bf00      	nop
 800844e:	e008      	b.n	8008462 <USBH_HandleEnum+0x3b6>
      break;
 8008450:	bf00      	nop
 8008452:	e006      	b.n	8008462 <USBH_HandleEnum+0x3b6>
      break;
 8008454:	bf00      	nop
 8008456:	e004      	b.n	8008462 <USBH_HandleEnum+0x3b6>
      break;
 8008458:	bf00      	nop
 800845a:	e002      	b.n	8008462 <USBH_HandleEnum+0x3b6>
      break;
 800845c:	bf00      	nop
 800845e:	e000      	b.n	8008462 <USBH_HandleEnum+0x3b6>
      break;
 8008460:	bf00      	nop
  }
  return Status;
 8008462:	7bfb      	ldrb	r3, [r7, #15]
}
 8008464:	4618      	mov	r0, r3
 8008466:	3710      	adds	r7, #16
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	683a      	ldr	r2, [r7, #0]
 800847a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800847e:	bf00      	nop
 8008480:	370c      	adds	r7, #12
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr

0800848a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800848a:	b580      	push	{r7, lr}
 800848c:	b082      	sub	sp, #8
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008498:	1c5a      	adds	r2, r3, #1
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f000 f804 	bl	80084ae <USBH_HandleSof>
}
 80084a6:	bf00      	nop
 80084a8:	3708      	adds	r7, #8
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}

080084ae <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80084ae:	b580      	push	{r7, lr}
 80084b0:	b082      	sub	sp, #8
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	2b0b      	cmp	r3, #11
 80084be:	d10a      	bne.n	80084d6 <USBH_HandleSof+0x28>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d005      	beq.n	80084d6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80084d0:	699b      	ldr	r3, [r3, #24]
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	4798      	blx	r3
  }
}
 80084d6:	bf00      	nop
 80084d8:	3708      	adds	r7, #8
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80084de:	b480      	push	{r7}
 80084e0:	b083      	sub	sp, #12
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2201      	movs	r2, #1
 80084ea:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80084ee:	bf00      	nop
}
 80084f0:	370c      	adds	r7, #12
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr

080084fa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80084fa:	b480      	push	{r7}
 80084fc:	b083      	sub	sp, #12
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800850a:	bf00      	nop
}
 800850c:	370c      	adds	r7, #12
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr

08008516 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008516:	b480      	push	{r7}
 8008518:	b083      	sub	sp, #12
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2201      	movs	r2, #1
 8008522:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008536:	2300      	movs	r3, #0
}
 8008538:	4618      	mov	r0, r3
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2201      	movs	r2, #1
 8008550:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f001 f8be 	bl	80096e6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	791b      	ldrb	r3, [r3, #4]
 800856e:	4619      	mov	r1, r3
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 ff0b 	bl	800938c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	795b      	ldrb	r3, [r3, #5]
 800857a:	4619      	mov	r1, r3
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 ff05 	bl	800938c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008582:	2300      	movs	r3, #0
}
 8008584:	4618      	mov	r0, r3
 8008586:	3708      	adds	r7, #8
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b086      	sub	sp, #24
 8008590:	af02      	add	r7, sp, #8
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	460b      	mov	r3, r1
 8008596:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8008598:	887b      	ldrh	r3, [r7, #2]
 800859a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800859e:	d901      	bls.n	80085a4 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80085a0:	2303      	movs	r3, #3
 80085a2:	e01b      	b.n	80085dc <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80085aa:	887b      	ldrh	r3, [r7, #2]
 80085ac:	9300      	str	r3, [sp, #0]
 80085ae:	4613      	mov	r3, r2
 80085b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80085b4:	2100      	movs	r1, #0
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 f872 	bl	80086a0 <USBH_GetDescriptor>
 80085bc:	4603      	mov	r3, r0
 80085be:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80085c0:	7bfb      	ldrb	r3, [r7, #15]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d109      	bne.n	80085da <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80085cc:	887a      	ldrh	r2, [r7, #2]
 80085ce:	4619      	mov	r1, r3
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 f929 	bl	8008828 <USBH_ParseDevDesc>
 80085d6:	4603      	mov	r3, r0
 80085d8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80085da:	7bfb      	ldrb	r3, [r7, #15]
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3710      	adds	r7, #16
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b086      	sub	sp, #24
 80085e8:	af02      	add	r7, sp, #8
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	460b      	mov	r3, r1
 80085ee:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	331c      	adds	r3, #28
 80085f4:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80085f6:	887b      	ldrh	r3, [r7, #2]
 80085f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085fc:	d901      	bls.n	8008602 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80085fe:	2303      	movs	r3, #3
 8008600:	e016      	b.n	8008630 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008602:	887b      	ldrh	r3, [r7, #2]
 8008604:	9300      	str	r3, [sp, #0]
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800860c:	2100      	movs	r1, #0
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 f846 	bl	80086a0 <USBH_GetDescriptor>
 8008614:	4603      	mov	r3, r0
 8008616:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008618:	7bfb      	ldrb	r3, [r7, #15]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d107      	bne.n	800862e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800861e:	887b      	ldrh	r3, [r7, #2]
 8008620:	461a      	mov	r2, r3
 8008622:	68b9      	ldr	r1, [r7, #8]
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 f9af 	bl	8008988 <USBH_ParseCfgDesc>
 800862a:	4603      	mov	r3, r0
 800862c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800862e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008630:	4618      	mov	r0, r3
 8008632:	3710      	adds	r7, #16
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b088      	sub	sp, #32
 800863c:	af02      	add	r7, sp, #8
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	607a      	str	r2, [r7, #4]
 8008642:	461a      	mov	r2, r3
 8008644:	460b      	mov	r3, r1
 8008646:	72fb      	strb	r3, [r7, #11]
 8008648:	4613      	mov	r3, r2
 800864a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800864c:	893b      	ldrh	r3, [r7, #8]
 800864e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008652:	d802      	bhi.n	800865a <USBH_Get_StringDesc+0x22>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d101      	bne.n	800865e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800865a:	2303      	movs	r3, #3
 800865c:	e01c      	b.n	8008698 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800865e:	7afb      	ldrb	r3, [r7, #11]
 8008660:	b29b      	uxth	r3, r3
 8008662:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8008666:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800866e:	893b      	ldrh	r3, [r7, #8]
 8008670:	9300      	str	r3, [sp, #0]
 8008672:	460b      	mov	r3, r1
 8008674:	2100      	movs	r1, #0
 8008676:	68f8      	ldr	r0, [r7, #12]
 8008678:	f000 f812 	bl	80086a0 <USBH_GetDescriptor>
 800867c:	4603      	mov	r3, r0
 800867e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008680:	7dfb      	ldrb	r3, [r7, #23]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d107      	bne.n	8008696 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800868c:	893a      	ldrh	r2, [r7, #8]
 800868e:	6879      	ldr	r1, [r7, #4]
 8008690:	4618      	mov	r0, r3
 8008692:	f000 fb8d 	bl	8008db0 <USBH_ParseStringDesc>
  }

  return status;
 8008696:	7dfb      	ldrb	r3, [r7, #23]
}
 8008698:	4618      	mov	r0, r3
 800869a:	3718      	adds	r7, #24
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	607b      	str	r3, [r7, #4]
 80086aa:	460b      	mov	r3, r1
 80086ac:	72fb      	strb	r3, [r7, #11]
 80086ae:	4613      	mov	r3, r2
 80086b0:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	789b      	ldrb	r3, [r3, #2]
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d11c      	bne.n	80086f4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80086ba:	7afb      	ldrb	r3, [r7, #11]
 80086bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80086c0:	b2da      	uxtb	r2, r3
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2206      	movs	r2, #6
 80086ca:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	893a      	ldrh	r2, [r7, #8]
 80086d0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80086d2:	893b      	ldrh	r3, [r7, #8]
 80086d4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80086d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80086dc:	d104      	bne.n	80086e8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f240 4209 	movw	r2, #1033	@ 0x409
 80086e4:	829a      	strh	r2, [r3, #20]
 80086e6:	e002      	b.n	80086ee <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2200      	movs	r2, #0
 80086ec:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	8b3a      	ldrh	r2, [r7, #24]
 80086f2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80086f4:	8b3b      	ldrh	r3, [r7, #24]
 80086f6:	461a      	mov	r2, r3
 80086f8:	6879      	ldr	r1, [r7, #4]
 80086fa:	68f8      	ldr	r0, [r7, #12]
 80086fc:	f000 fba5 	bl	8008e4a <USBH_CtlReq>
 8008700:	4603      	mov	r3, r0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b082      	sub	sp, #8
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
 8008712:	460b      	mov	r3, r1
 8008714:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	789b      	ldrb	r3, [r3, #2]
 800871a:	2b01      	cmp	r3, #1
 800871c:	d10f      	bne.n	800873e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2200      	movs	r2, #0
 8008722:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2205      	movs	r2, #5
 8008728:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800872a:	78fb      	ldrb	r3, [r7, #3]
 800872c:	b29a      	uxth	r2, r3
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2200      	movs	r2, #0
 800873c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800873e:	2200      	movs	r2, #0
 8008740:	2100      	movs	r1, #0
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 fb81 	bl	8008e4a <USBH_CtlReq>
 8008748:	4603      	mov	r3, r0
}
 800874a:	4618      	mov	r0, r3
 800874c:	3708      	adds	r7, #8
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}

08008752 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008752:	b580      	push	{r7, lr}
 8008754:	b082      	sub	sp, #8
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
 800875a:	460b      	mov	r3, r1
 800875c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	789b      	ldrb	r3, [r3, #2]
 8008762:	2b01      	cmp	r3, #1
 8008764:	d10e      	bne.n	8008784 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2200      	movs	r2, #0
 800876a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2209      	movs	r2, #9
 8008770:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	887a      	ldrh	r2, [r7, #2]
 8008776:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2200      	movs	r2, #0
 8008782:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008784:	2200      	movs	r2, #0
 8008786:	2100      	movs	r1, #0
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 fb5e 	bl	8008e4a <USBH_CtlReq>
 800878e:	4603      	mov	r3, r0
}
 8008790:	4618      	mov	r0, r3
 8008792:	3708      	adds	r7, #8
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	460b      	mov	r3, r1
 80087a2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	789b      	ldrb	r3, [r3, #2]
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d10f      	bne.n	80087cc <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2200      	movs	r2, #0
 80087b0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2203      	movs	r2, #3
 80087b6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80087b8:	78fb      	ldrb	r3, [r7, #3]
 80087ba:	b29a      	uxth	r2, r3
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2200      	movs	r2, #0
 80087ca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80087cc:	2200      	movs	r2, #0
 80087ce:	2100      	movs	r1, #0
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 fb3a 	bl	8008e4a <USBH_CtlReq>
 80087d6:	4603      	mov	r3, r0
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3708      	adds	r7, #8
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	460b      	mov	r3, r1
 80087ea:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	789b      	ldrb	r3, [r3, #2]
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d10f      	bne.n	8008814 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2202      	movs	r2, #2
 80087f8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2201      	movs	r2, #1
 80087fe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2200      	movs	r2, #0
 8008804:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008806:	78fb      	ldrb	r3, [r7, #3]
 8008808:	b29a      	uxth	r2, r3
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2200      	movs	r2, #0
 8008812:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008814:	2200      	movs	r2, #0
 8008816:	2100      	movs	r1, #0
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 fb16 	bl	8008e4a <USBH_CtlReq>
 800881e:	4603      	mov	r3, r0
}
 8008820:	4618      	mov	r0, r3
 8008822:	3708      	adds	r7, #8
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008828:	b480      	push	{r7}
 800882a:	b087      	sub	sp, #28
 800882c:	af00      	add	r7, sp, #0
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	4613      	mov	r3, r2
 8008834:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800883c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800883e:	2300      	movs	r3, #0
 8008840:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d101      	bne.n	800884c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008848:	2302      	movs	r3, #2
 800884a:	e094      	b.n	8008976 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	781a      	ldrb	r2, [r3, #0]
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	785a      	ldrb	r2, [r3, #1]
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	3302      	adds	r3, #2
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	461a      	mov	r2, r3
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	3303      	adds	r3, #3
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	021b      	lsls	r3, r3, #8
 800886c:	b29b      	uxth	r3, r3
 800886e:	4313      	orrs	r3, r2
 8008870:	b29a      	uxth	r2, r3
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	791a      	ldrb	r2, [r3, #4]
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	795a      	ldrb	r2, [r3, #5]
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	799a      	ldrb	r2, [r3, #6]
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	79da      	ldrb	r2, [r3, #7]
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800889c:	2b00      	cmp	r3, #0
 800889e:	d004      	beq.n	80088aa <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d11b      	bne.n	80088e2 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	79db      	ldrb	r3, [r3, #7]
 80088ae:	2b20      	cmp	r3, #32
 80088b0:	dc0f      	bgt.n	80088d2 <USBH_ParseDevDesc+0xaa>
 80088b2:	2b08      	cmp	r3, #8
 80088b4:	db0f      	blt.n	80088d6 <USBH_ParseDevDesc+0xae>
 80088b6:	3b08      	subs	r3, #8
 80088b8:	4a32      	ldr	r2, [pc, #200]	@ (8008984 <USBH_ParseDevDesc+0x15c>)
 80088ba:	fa22 f303 	lsr.w	r3, r2, r3
 80088be:	f003 0301 	and.w	r3, r3, #1
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	bf14      	ite	ne
 80088c6:	2301      	movne	r3, #1
 80088c8:	2300      	moveq	r3, #0
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d106      	bne.n	80088de <USBH_ParseDevDesc+0xb6>
 80088d0:	e001      	b.n	80088d6 <USBH_ParseDevDesc+0xae>
 80088d2:	2b40      	cmp	r3, #64	@ 0x40
 80088d4:	d003      	beq.n	80088de <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	2208      	movs	r2, #8
 80088da:	71da      	strb	r2, [r3, #7]
        break;
 80088dc:	e000      	b.n	80088e0 <USBH_ParseDevDesc+0xb8>
        break;
 80088de:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80088e0:	e00e      	b.n	8008900 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	d107      	bne.n	80088fc <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	79db      	ldrb	r3, [r3, #7]
 80088f0:	2b08      	cmp	r3, #8
 80088f2:	d005      	beq.n	8008900 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	2208      	movs	r2, #8
 80088f8:	71da      	strb	r2, [r3, #7]
 80088fa:	e001      	b.n	8008900 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80088fc:	2303      	movs	r3, #3
 80088fe:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008900:	88fb      	ldrh	r3, [r7, #6]
 8008902:	2b08      	cmp	r3, #8
 8008904:	d936      	bls.n	8008974 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	3308      	adds	r3, #8
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	461a      	mov	r2, r3
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	3309      	adds	r3, #9
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	021b      	lsls	r3, r3, #8
 8008916:	b29b      	uxth	r3, r3
 8008918:	4313      	orrs	r3, r2
 800891a:	b29a      	uxth	r2, r3
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	330a      	adds	r3, #10
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	461a      	mov	r2, r3
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	330b      	adds	r3, #11
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	021b      	lsls	r3, r3, #8
 8008930:	b29b      	uxth	r3, r3
 8008932:	4313      	orrs	r3, r2
 8008934:	b29a      	uxth	r2, r3
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	330c      	adds	r3, #12
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	461a      	mov	r2, r3
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	330d      	adds	r3, #13
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	021b      	lsls	r3, r3, #8
 800894a:	b29b      	uxth	r3, r3
 800894c:	4313      	orrs	r3, r2
 800894e:	b29a      	uxth	r2, r3
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	7b9a      	ldrb	r2, [r3, #14]
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	7bda      	ldrb	r2, [r3, #15]
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	7c1a      	ldrb	r2, [r3, #16]
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	7c5a      	ldrb	r2, [r3, #17]
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008974:	7dfb      	ldrb	r3, [r7, #23]
}
 8008976:	4618      	mov	r0, r3
 8008978:	371c      	adds	r7, #28
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr
 8008982:	bf00      	nop
 8008984:	01000101 	.word	0x01000101

08008988 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b08c      	sub	sp, #48	@ 0x30
 800898c:	af00      	add	r7, sp, #0
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	4613      	mov	r3, r2
 8008994:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800899c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800899e:	2300      	movs	r3, #0
 80089a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80089a4:	2300      	movs	r3, #0
 80089a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80089aa:	2300      	movs	r3, #0
 80089ac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d101      	bne.n	80089ba <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80089b6:	2302      	movs	r3, #2
 80089b8:	e0da      	b.n	8008b70 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80089be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	2b09      	cmp	r3, #9
 80089c4:	d002      	beq.n	80089cc <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80089c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089c8:	2209      	movs	r2, #9
 80089ca:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	781a      	ldrb	r2, [r3, #0]
 80089d0:	6a3b      	ldr	r3, [r7, #32]
 80089d2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	785a      	ldrb	r2, [r3, #1]
 80089d8:	6a3b      	ldr	r3, [r7, #32]
 80089da:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	3302      	adds	r3, #2
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	461a      	mov	r2, r3
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	3303      	adds	r3, #3
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	021b      	lsls	r3, r3, #8
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	4313      	orrs	r3, r2
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089f6:	bf28      	it	cs
 80089f8:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80089fc:	b29a      	uxth	r2, r3
 80089fe:	6a3b      	ldr	r3, [r7, #32]
 8008a00:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	791a      	ldrb	r2, [r3, #4]
 8008a06:	6a3b      	ldr	r3, [r7, #32]
 8008a08:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	795a      	ldrb	r2, [r3, #5]
 8008a0e:	6a3b      	ldr	r3, [r7, #32]
 8008a10:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	799a      	ldrb	r2, [r3, #6]
 8008a16:	6a3b      	ldr	r3, [r7, #32]
 8008a18:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	79da      	ldrb	r2, [r3, #7]
 8008a1e:	6a3b      	ldr	r3, [r7, #32]
 8008a20:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	7a1a      	ldrb	r2, [r3, #8]
 8008a26:	6a3b      	ldr	r3, [r7, #32]
 8008a28:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008a2a:	88fb      	ldrh	r3, [r7, #6]
 8008a2c:	2b09      	cmp	r3, #9
 8008a2e:	f240 809d 	bls.w	8008b6c <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8008a32:	2309      	movs	r3, #9
 8008a34:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008a36:	2300      	movs	r3, #0
 8008a38:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008a3a:	e081      	b.n	8008b40 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008a3c:	f107 0316 	add.w	r3, r7, #22
 8008a40:	4619      	mov	r1, r3
 8008a42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a44:	f000 f9e7 	bl	8008e16 <USBH_GetNextDesc>
 8008a48:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a4c:	785b      	ldrb	r3, [r3, #1]
 8008a4e:	2b04      	cmp	r3, #4
 8008a50:	d176      	bne.n	8008b40 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	2b09      	cmp	r3, #9
 8008a58:	d002      	beq.n	8008a60 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a5c:	2209      	movs	r2, #9
 8008a5e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008a60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a64:	221a      	movs	r2, #26
 8008a66:	fb02 f303 	mul.w	r3, r2, r3
 8008a6a:	3308      	adds	r3, #8
 8008a6c:	6a3a      	ldr	r2, [r7, #32]
 8008a6e:	4413      	add	r3, r2
 8008a70:	3302      	adds	r3, #2
 8008a72:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008a74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a76:	69f8      	ldr	r0, [r7, #28]
 8008a78:	f000 f87e 	bl	8008b78 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008a82:	2300      	movs	r3, #0
 8008a84:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008a86:	e043      	b.n	8008b10 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008a88:	f107 0316 	add.w	r3, r7, #22
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a90:	f000 f9c1 	bl	8008e16 <USBH_GetNextDesc>
 8008a94:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a98:	785b      	ldrb	r3, [r3, #1]
 8008a9a:	2b05      	cmp	r3, #5
 8008a9c:	d138      	bne.n	8008b10 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	795b      	ldrb	r3, [r3, #5]
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d113      	bne.n	8008ace <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008aaa:	2b02      	cmp	r3, #2
 8008aac:	d003      	beq.n	8008ab6 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008aae:	69fb      	ldr	r3, [r7, #28]
 8008ab0:	799b      	ldrb	r3, [r3, #6]
 8008ab2:	2b03      	cmp	r3, #3
 8008ab4:	d10b      	bne.n	8008ace <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008ab6:	69fb      	ldr	r3, [r7, #28]
 8008ab8:	79db      	ldrb	r3, [r3, #7]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d10b      	bne.n	8008ad6 <USBH_ParseCfgDesc+0x14e>
 8008abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	2b09      	cmp	r3, #9
 8008ac4:	d007      	beq.n	8008ad6 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8008ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ac8:	2209      	movs	r2, #9
 8008aca:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008acc:	e003      	b.n	8008ad6 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ad0:	2207      	movs	r2, #7
 8008ad2:	701a      	strb	r2, [r3, #0]
 8008ad4:	e000      	b.n	8008ad8 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008ad6:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008ad8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008adc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008ae0:	3201      	adds	r2, #1
 8008ae2:	00d2      	lsls	r2, r2, #3
 8008ae4:	211a      	movs	r1, #26
 8008ae6:	fb01 f303 	mul.w	r3, r1, r3
 8008aea:	4413      	add	r3, r2
 8008aec:	3308      	adds	r3, #8
 8008aee:	6a3a      	ldr	r2, [r7, #32]
 8008af0:	4413      	add	r3, r2
 8008af2:	3304      	adds	r3, #4
 8008af4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008af6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008af8:	69b9      	ldr	r1, [r7, #24]
 8008afa:	68f8      	ldr	r0, [r7, #12]
 8008afc:	f000 f870 	bl	8008be0 <USBH_ParseEPDesc>
 8008b00:	4603      	mov	r3, r0
 8008b02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8008b06:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008b10:	69fb      	ldr	r3, [r7, #28]
 8008b12:	791b      	ldrb	r3, [r3, #4]
 8008b14:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d204      	bcs.n	8008b26 <USBH_ParseCfgDesc+0x19e>
 8008b1c:	6a3b      	ldr	r3, [r7, #32]
 8008b1e:	885a      	ldrh	r2, [r3, #2]
 8008b20:	8afb      	ldrh	r3, [r7, #22]
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d8b0      	bhi.n	8008a88 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008b26:	69fb      	ldr	r3, [r7, #28]
 8008b28:	791b      	ldrb	r3, [r3, #4]
 8008b2a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d201      	bcs.n	8008b36 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8008b32:	2303      	movs	r3, #3
 8008b34:	e01c      	b.n	8008b70 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8008b36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008b40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d805      	bhi.n	8008b54 <USBH_ParseCfgDesc+0x1cc>
 8008b48:	6a3b      	ldr	r3, [r7, #32]
 8008b4a:	885a      	ldrh	r2, [r3, #2]
 8008b4c:	8afb      	ldrh	r3, [r7, #22]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	f63f af74 	bhi.w	8008a3c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008b54:	6a3b      	ldr	r3, [r7, #32]
 8008b56:	791b      	ldrb	r3, [r3, #4]
 8008b58:	2b02      	cmp	r3, #2
 8008b5a:	bf28      	it	cs
 8008b5c:	2302      	movcs	r3, #2
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d201      	bcs.n	8008b6c <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8008b68:	2303      	movs	r3, #3
 8008b6a:	e001      	b.n	8008b70 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8008b6c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3730      	adds	r7, #48	@ 0x30
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b083      	sub	sp, #12
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	781a      	ldrb	r2, [r3, #0]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	785a      	ldrb	r2, [r3, #1]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	789a      	ldrb	r2, [r3, #2]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	78da      	ldrb	r2, [r3, #3]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	3304      	adds	r3, #4
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	2b02      	cmp	r3, #2
 8008baa:	bf28      	it	cs
 8008bac:	2302      	movcs	r3, #2
 8008bae:	b2da      	uxtb	r2, r3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	795a      	ldrb	r2, [r3, #5]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	799a      	ldrb	r2, [r3, #6]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	79da      	ldrb	r2, [r3, #7]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	7a1a      	ldrb	r2, [r3, #8]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	721a      	strb	r2, [r3, #8]
}
 8008bd4:	bf00      	nop
 8008bd6:	370c      	adds	r7, #12
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr

08008be0 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b087      	sub	sp, #28
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	60b9      	str	r1, [r7, #8]
 8008bea:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008bec:	2300      	movs	r3, #0
 8008bee:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	781a      	ldrb	r2, [r3, #0]
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	785a      	ldrb	r2, [r3, #1]
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	789a      	ldrb	r2, [r3, #2]
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	78da      	ldrb	r2, [r3, #3]
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	3304      	adds	r3, #4
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	461a      	mov	r2, r3
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	3305      	adds	r3, #5
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	021b      	lsls	r3, r3, #8
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	4313      	orrs	r3, r2
 8008c24:	b29a      	uxth	r2, r3
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	799a      	ldrb	r2, [r3, #6]
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	889b      	ldrh	r3, [r3, #4]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d009      	beq.n	8008c4e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008c3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c42:	d804      	bhi.n	8008c4e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008c48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c4c:	d901      	bls.n	8008c52 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8008c4e:	2303      	movs	r3, #3
 8008c50:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d136      	bne.n	8008cca <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	78db      	ldrb	r3, [r3, #3]
 8008c60:	f003 0303 	and.w	r3, r3, #3
 8008c64:	2b02      	cmp	r3, #2
 8008c66:	d108      	bne.n	8008c7a <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	889b      	ldrh	r3, [r3, #4]
 8008c6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c70:	f240 8097 	bls.w	8008da2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008c74:	2303      	movs	r3, #3
 8008c76:	75fb      	strb	r3, [r7, #23]
 8008c78:	e093      	b.n	8008da2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	78db      	ldrb	r3, [r3, #3]
 8008c7e:	f003 0303 	and.w	r3, r3, #3
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d107      	bne.n	8008c96 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	889b      	ldrh	r3, [r3, #4]
 8008c8a:	2b40      	cmp	r3, #64	@ 0x40
 8008c8c:	f240 8089 	bls.w	8008da2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008c90:	2303      	movs	r3, #3
 8008c92:	75fb      	strb	r3, [r7, #23]
 8008c94:	e085      	b.n	8008da2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	78db      	ldrb	r3, [r3, #3]
 8008c9a:	f003 0303 	and.w	r3, r3, #3
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d005      	beq.n	8008cae <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	78db      	ldrb	r3, [r3, #3]
 8008ca6:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008caa:	2b03      	cmp	r3, #3
 8008cac:	d10a      	bne.n	8008cc4 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	799b      	ldrb	r3, [r3, #6]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d003      	beq.n	8008cbe <USBH_ParseEPDesc+0xde>
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	799b      	ldrb	r3, [r3, #6]
 8008cba:	2b10      	cmp	r3, #16
 8008cbc:	d970      	bls.n	8008da0 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8008cbe:	2303      	movs	r3, #3
 8008cc0:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008cc2:	e06d      	b.n	8008da0 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008cc4:	2303      	movs	r3, #3
 8008cc6:	75fb      	strb	r3, [r7, #23]
 8008cc8:	e06b      	b.n	8008da2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d13c      	bne.n	8008d4e <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	78db      	ldrb	r3, [r3, #3]
 8008cd8:	f003 0303 	and.w	r3, r3, #3
 8008cdc:	2b02      	cmp	r3, #2
 8008cde:	d005      	beq.n	8008cec <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	78db      	ldrb	r3, [r3, #3]
 8008ce4:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d106      	bne.n	8008cfa <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	889b      	ldrh	r3, [r3, #4]
 8008cf0:	2b40      	cmp	r3, #64	@ 0x40
 8008cf2:	d956      	bls.n	8008da2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008cf4:	2303      	movs	r3, #3
 8008cf6:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008cf8:	e053      	b.n	8008da2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	78db      	ldrb	r3, [r3, #3]
 8008cfe:	f003 0303 	and.w	r3, r3, #3
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d10e      	bne.n	8008d24 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	799b      	ldrb	r3, [r3, #6]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d007      	beq.n	8008d1e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008d12:	2b10      	cmp	r3, #16
 8008d14:	d803      	bhi.n	8008d1e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008d1a:	2b40      	cmp	r3, #64	@ 0x40
 8008d1c:	d941      	bls.n	8008da2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008d1e:	2303      	movs	r3, #3
 8008d20:	75fb      	strb	r3, [r7, #23]
 8008d22:	e03e      	b.n	8008da2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	78db      	ldrb	r3, [r3, #3]
 8008d28:	f003 0303 	and.w	r3, r3, #3
 8008d2c:	2b03      	cmp	r3, #3
 8008d2e:	d10b      	bne.n	8008d48 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	799b      	ldrb	r3, [r3, #6]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d004      	beq.n	8008d42 <USBH_ParseEPDesc+0x162>
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	889b      	ldrh	r3, [r3, #4]
 8008d3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d40:	d32f      	bcc.n	8008da2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008d42:	2303      	movs	r3, #3
 8008d44:	75fb      	strb	r3, [r7, #23]
 8008d46:	e02c      	b.n	8008da2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008d48:	2303      	movs	r3, #3
 8008d4a:	75fb      	strb	r3, [r7, #23]
 8008d4c:	e029      	b.n	8008da2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008d54:	2b02      	cmp	r3, #2
 8008d56:	d120      	bne.n	8008d9a <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	78db      	ldrb	r3, [r3, #3]
 8008d5c:	f003 0303 	and.w	r3, r3, #3
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d106      	bne.n	8008d72 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	889b      	ldrh	r3, [r3, #4]
 8008d68:	2b08      	cmp	r3, #8
 8008d6a:	d01a      	beq.n	8008da2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008d6c:	2303      	movs	r3, #3
 8008d6e:	75fb      	strb	r3, [r7, #23]
 8008d70:	e017      	b.n	8008da2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	78db      	ldrb	r3, [r3, #3]
 8008d76:	f003 0303 	and.w	r3, r3, #3
 8008d7a:	2b03      	cmp	r3, #3
 8008d7c:	d10a      	bne.n	8008d94 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	799b      	ldrb	r3, [r3, #6]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d003      	beq.n	8008d8e <USBH_ParseEPDesc+0x1ae>
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	889b      	ldrh	r3, [r3, #4]
 8008d8a:	2b08      	cmp	r3, #8
 8008d8c:	d909      	bls.n	8008da2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008d8e:	2303      	movs	r3, #3
 8008d90:	75fb      	strb	r3, [r7, #23]
 8008d92:	e006      	b.n	8008da2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008d94:	2303      	movs	r3, #3
 8008d96:	75fb      	strb	r3, [r7, #23]
 8008d98:	e003      	b.n	8008da2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008d9a:	2303      	movs	r3, #3
 8008d9c:	75fb      	strb	r3, [r7, #23]
 8008d9e:	e000      	b.n	8008da2 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008da0:	bf00      	nop
  }

  return status;
 8008da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	371c      	adds	r7, #28
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b087      	sub	sp, #28
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	60f8      	str	r0, [r7, #12]
 8008db8:	60b9      	str	r1, [r7, #8]
 8008dba:	4613      	mov	r3, r2
 8008dbc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	2b03      	cmp	r3, #3
 8008dc6:	d120      	bne.n	8008e0a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	781b      	ldrb	r3, [r3, #0]
 8008dcc:	1e9a      	subs	r2, r3, #2
 8008dce:	88fb      	ldrh	r3, [r7, #6]
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	bf28      	it	cs
 8008dd4:	4613      	movcs	r3, r2
 8008dd6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	3302      	adds	r3, #2
 8008ddc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008dde:	2300      	movs	r3, #0
 8008de0:	82fb      	strh	r3, [r7, #22]
 8008de2:	e00b      	b.n	8008dfc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008de4:	8afb      	ldrh	r3, [r7, #22]
 8008de6:	68fa      	ldr	r2, [r7, #12]
 8008de8:	4413      	add	r3, r2
 8008dea:	781a      	ldrb	r2, [r3, #0]
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	3301      	adds	r3, #1
 8008df4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008df6:	8afb      	ldrh	r3, [r7, #22]
 8008df8:	3302      	adds	r3, #2
 8008dfa:	82fb      	strh	r3, [r7, #22]
 8008dfc:	8afa      	ldrh	r2, [r7, #22]
 8008dfe:	8abb      	ldrh	r3, [r7, #20]
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d3ef      	bcc.n	8008de4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	2200      	movs	r2, #0
 8008e08:	701a      	strb	r2, [r3, #0]
  }
}
 8008e0a:	bf00      	nop
 8008e0c:	371c      	adds	r7, #28
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr

08008e16 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008e16:	b480      	push	{r7}
 8008e18:	b085      	sub	sp, #20
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
 8008e1e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	881b      	ldrh	r3, [r3, #0]
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	7812      	ldrb	r2, [r2, #0]
 8008e28:	4413      	add	r3, r2
 8008e2a:	b29a      	uxth	r2, r3
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	4413      	add	r3, r2
 8008e3a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3714      	adds	r7, #20
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr

08008e4a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008e4a:	b580      	push	{r7, lr}
 8008e4c:	b086      	sub	sp, #24
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	60f8      	str	r0, [r7, #12]
 8008e52:	60b9      	str	r1, [r7, #8]
 8008e54:	4613      	mov	r3, r2
 8008e56:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	789b      	ldrb	r3, [r3, #2]
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d002      	beq.n	8008e6a <USBH_CtlReq+0x20>
 8008e64:	2b02      	cmp	r3, #2
 8008e66:	d00f      	beq.n	8008e88 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008e68:	e027      	b.n	8008eba <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	68ba      	ldr	r2, [r7, #8]
 8008e6e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	88fa      	ldrh	r2, [r7, #6]
 8008e74:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2201      	movs	r2, #1
 8008e7a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2202      	movs	r2, #2
 8008e80:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008e82:	2301      	movs	r3, #1
 8008e84:	75fb      	strb	r3, [r7, #23]
      break;
 8008e86:	e018      	b.n	8008eba <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008e88:	68f8      	ldr	r0, [r7, #12]
 8008e8a:	f000 f81b 	bl	8008ec4 <USBH_HandleControl>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008e92:	7dfb      	ldrb	r3, [r7, #23]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d002      	beq.n	8008e9e <USBH_CtlReq+0x54>
 8008e98:	7dfb      	ldrb	r3, [r7, #23]
 8008e9a:	2b03      	cmp	r3, #3
 8008e9c:	d106      	bne.n	8008eac <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	761a      	strb	r2, [r3, #24]
      break;
 8008eaa:	e005      	b.n	8008eb8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008eac:	7dfb      	ldrb	r3, [r7, #23]
 8008eae:	2b02      	cmp	r3, #2
 8008eb0:	d102      	bne.n	8008eb8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	709a      	strb	r2, [r3, #2]
      break;
 8008eb8:	bf00      	nop
  }
  return status;
 8008eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3718      	adds	r7, #24
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b086      	sub	sp, #24
 8008ec8:	af02      	add	r7, sp, #8
 8008eca:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	7e1b      	ldrb	r3, [r3, #24]
 8008ed8:	3b01      	subs	r3, #1
 8008eda:	2b0a      	cmp	r3, #10
 8008edc:	f200 8156 	bhi.w	800918c <USBH_HandleControl+0x2c8>
 8008ee0:	a201      	add	r2, pc, #4	@ (adr r2, 8008ee8 <USBH_HandleControl+0x24>)
 8008ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee6:	bf00      	nop
 8008ee8:	08008f15 	.word	0x08008f15
 8008eec:	08008f2f 	.word	0x08008f2f
 8008ef0:	08008f99 	.word	0x08008f99
 8008ef4:	08008fbf 	.word	0x08008fbf
 8008ef8:	08008ff7 	.word	0x08008ff7
 8008efc:	08009021 	.word	0x08009021
 8008f00:	08009073 	.word	0x08009073
 8008f04:	08009095 	.word	0x08009095
 8008f08:	080090d1 	.word	0x080090d1
 8008f0c:	080090f7 	.word	0x080090f7
 8008f10:	08009135 	.word	0x08009135
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f103 0110 	add.w	r1, r3, #16
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	795b      	ldrb	r3, [r3, #5]
 8008f1e:	461a      	mov	r2, r3
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 f943 	bl	80091ac <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2202      	movs	r2, #2
 8008f2a:	761a      	strb	r2, [r3, #24]
      break;
 8008f2c:	e139      	b.n	80091a2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	795b      	ldrb	r3, [r3, #5]
 8008f32:	4619      	mov	r1, r3
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 fcc5 	bl	80098c4 <USBH_LL_GetURBState>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008f3e:	7bbb      	ldrb	r3, [r7, #14]
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d11e      	bne.n	8008f82 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	7c1b      	ldrb	r3, [r3, #16]
 8008f48:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008f4c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	8adb      	ldrh	r3, [r3, #22]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d00a      	beq.n	8008f6c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008f56:	7b7b      	ldrb	r3, [r7, #13]
 8008f58:	2b80      	cmp	r3, #128	@ 0x80
 8008f5a:	d103      	bne.n	8008f64 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2203      	movs	r2, #3
 8008f60:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008f62:	e115      	b.n	8009190 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2205      	movs	r2, #5
 8008f68:	761a      	strb	r2, [r3, #24]
      break;
 8008f6a:	e111      	b.n	8009190 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008f6c:	7b7b      	ldrb	r3, [r7, #13]
 8008f6e:	2b80      	cmp	r3, #128	@ 0x80
 8008f70:	d103      	bne.n	8008f7a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2209      	movs	r2, #9
 8008f76:	761a      	strb	r2, [r3, #24]
      break;
 8008f78:	e10a      	b.n	8009190 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2207      	movs	r2, #7
 8008f7e:	761a      	strb	r2, [r3, #24]
      break;
 8008f80:	e106      	b.n	8009190 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008f82:	7bbb      	ldrb	r3, [r7, #14]
 8008f84:	2b04      	cmp	r3, #4
 8008f86:	d003      	beq.n	8008f90 <USBH_HandleControl+0xcc>
 8008f88:	7bbb      	ldrb	r3, [r7, #14]
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	f040 8100 	bne.w	8009190 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	220b      	movs	r2, #11
 8008f94:	761a      	strb	r2, [r3, #24]
      break;
 8008f96:	e0fb      	b.n	8009190 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008f9e:	b29a      	uxth	r2, r3
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6899      	ldr	r1, [r3, #8]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	899a      	ldrh	r2, [r3, #12]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	791b      	ldrb	r3, [r3, #4]
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f000 f93a 	bl	800922a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2204      	movs	r2, #4
 8008fba:	761a      	strb	r2, [r3, #24]
      break;
 8008fbc:	e0f1      	b.n	80091a2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	791b      	ldrb	r3, [r3, #4]
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 fc7d 	bl	80098c4 <USBH_LL_GetURBState>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008fce:	7bbb      	ldrb	r3, [r7, #14]
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d102      	bne.n	8008fda <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2209      	movs	r2, #9
 8008fd8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008fda:	7bbb      	ldrb	r3, [r7, #14]
 8008fdc:	2b05      	cmp	r3, #5
 8008fde:	d102      	bne.n	8008fe6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008fe0:	2303      	movs	r3, #3
 8008fe2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008fe4:	e0d6      	b.n	8009194 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008fe6:	7bbb      	ldrb	r3, [r7, #14]
 8008fe8:	2b04      	cmp	r3, #4
 8008fea:	f040 80d3 	bne.w	8009194 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	220b      	movs	r2, #11
 8008ff2:	761a      	strb	r2, [r3, #24]
      break;
 8008ff4:	e0ce      	b.n	8009194 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6899      	ldr	r1, [r3, #8]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	899a      	ldrh	r2, [r3, #12]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	795b      	ldrb	r3, [r3, #5]
 8009002:	2001      	movs	r0, #1
 8009004:	9000      	str	r0, [sp, #0]
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 f8ea 	bl	80091e0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009012:	b29a      	uxth	r2, r3
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2206      	movs	r2, #6
 800901c:	761a      	strb	r2, [r3, #24]
      break;
 800901e:	e0c0      	b.n	80091a2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	795b      	ldrb	r3, [r3, #5]
 8009024:	4619      	mov	r1, r3
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 fc4c 	bl	80098c4 <USBH_LL_GetURBState>
 800902c:	4603      	mov	r3, r0
 800902e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009030:	7bbb      	ldrb	r3, [r7, #14]
 8009032:	2b01      	cmp	r3, #1
 8009034:	d103      	bne.n	800903e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2207      	movs	r2, #7
 800903a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800903c:	e0ac      	b.n	8009198 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800903e:	7bbb      	ldrb	r3, [r7, #14]
 8009040:	2b05      	cmp	r3, #5
 8009042:	d105      	bne.n	8009050 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	220c      	movs	r2, #12
 8009048:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800904a:	2303      	movs	r3, #3
 800904c:	73fb      	strb	r3, [r7, #15]
      break;
 800904e:	e0a3      	b.n	8009198 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009050:	7bbb      	ldrb	r3, [r7, #14]
 8009052:	2b02      	cmp	r3, #2
 8009054:	d103      	bne.n	800905e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2205      	movs	r2, #5
 800905a:	761a      	strb	r2, [r3, #24]
      break;
 800905c:	e09c      	b.n	8009198 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800905e:	7bbb      	ldrb	r3, [r7, #14]
 8009060:	2b04      	cmp	r3, #4
 8009062:	f040 8099 	bne.w	8009198 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	220b      	movs	r2, #11
 800906a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800906c:	2302      	movs	r3, #2
 800906e:	73fb      	strb	r3, [r7, #15]
      break;
 8009070:	e092      	b.n	8009198 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	791b      	ldrb	r3, [r3, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	2100      	movs	r1, #0
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 f8d5 	bl	800922a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009086:	b29a      	uxth	r2, r3
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2208      	movs	r2, #8
 8009090:	761a      	strb	r2, [r3, #24]

      break;
 8009092:	e086      	b.n	80091a2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	791b      	ldrb	r3, [r3, #4]
 8009098:	4619      	mov	r1, r3
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 fc12 	bl	80098c4 <USBH_LL_GetURBState>
 80090a0:	4603      	mov	r3, r0
 80090a2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80090a4:	7bbb      	ldrb	r3, [r7, #14]
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	d105      	bne.n	80090b6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	220d      	movs	r2, #13
 80090ae:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80090b0:	2300      	movs	r3, #0
 80090b2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80090b4:	e072      	b.n	800919c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80090b6:	7bbb      	ldrb	r3, [r7, #14]
 80090b8:	2b04      	cmp	r3, #4
 80090ba:	d103      	bne.n	80090c4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	220b      	movs	r2, #11
 80090c0:	761a      	strb	r2, [r3, #24]
      break;
 80090c2:	e06b      	b.n	800919c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80090c4:	7bbb      	ldrb	r3, [r7, #14]
 80090c6:	2b05      	cmp	r3, #5
 80090c8:	d168      	bne.n	800919c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80090ca:	2303      	movs	r3, #3
 80090cc:	73fb      	strb	r3, [r7, #15]
      break;
 80090ce:	e065      	b.n	800919c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	795b      	ldrb	r3, [r3, #5]
 80090d4:	2201      	movs	r2, #1
 80090d6:	9200      	str	r2, [sp, #0]
 80090d8:	2200      	movs	r2, #0
 80090da:	2100      	movs	r1, #0
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f000 f87f 	bl	80091e0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80090e8:	b29a      	uxth	r2, r3
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	220a      	movs	r2, #10
 80090f2:	761a      	strb	r2, [r3, #24]
      break;
 80090f4:	e055      	b.n	80091a2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	795b      	ldrb	r3, [r3, #5]
 80090fa:	4619      	mov	r1, r3
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 fbe1 	bl	80098c4 <USBH_LL_GetURBState>
 8009102:	4603      	mov	r3, r0
 8009104:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009106:	7bbb      	ldrb	r3, [r7, #14]
 8009108:	2b01      	cmp	r3, #1
 800910a:	d105      	bne.n	8009118 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800910c:	2300      	movs	r3, #0
 800910e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	220d      	movs	r2, #13
 8009114:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009116:	e043      	b.n	80091a0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009118:	7bbb      	ldrb	r3, [r7, #14]
 800911a:	2b02      	cmp	r3, #2
 800911c:	d103      	bne.n	8009126 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2209      	movs	r2, #9
 8009122:	761a      	strb	r2, [r3, #24]
      break;
 8009124:	e03c      	b.n	80091a0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009126:	7bbb      	ldrb	r3, [r7, #14]
 8009128:	2b04      	cmp	r3, #4
 800912a:	d139      	bne.n	80091a0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	220b      	movs	r2, #11
 8009130:	761a      	strb	r2, [r3, #24]
      break;
 8009132:	e035      	b.n	80091a0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	7e5b      	ldrb	r3, [r3, #25]
 8009138:	3301      	adds	r3, #1
 800913a:	b2da      	uxtb	r2, r3
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	765a      	strb	r2, [r3, #25]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	7e5b      	ldrb	r3, [r3, #25]
 8009144:	2b02      	cmp	r3, #2
 8009146:	d806      	bhi.n	8009156 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2201      	movs	r2, #1
 800914c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2201      	movs	r2, #1
 8009152:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009154:	e025      	b.n	80091a2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800915c:	2106      	movs	r1, #6
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2200      	movs	r2, #0
 8009166:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	795b      	ldrb	r3, [r3, #5]
 800916c:	4619      	mov	r1, r3
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 f90c 	bl	800938c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	791b      	ldrb	r3, [r3, #4]
 8009178:	4619      	mov	r1, r3
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 f906 	bl	800938c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2200      	movs	r2, #0
 8009184:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009186:	2302      	movs	r3, #2
 8009188:	73fb      	strb	r3, [r7, #15]
      break;
 800918a:	e00a      	b.n	80091a2 <USBH_HandleControl+0x2de>

    default:
      break;
 800918c:	bf00      	nop
 800918e:	e008      	b.n	80091a2 <USBH_HandleControl+0x2de>
      break;
 8009190:	bf00      	nop
 8009192:	e006      	b.n	80091a2 <USBH_HandleControl+0x2de>
      break;
 8009194:	bf00      	nop
 8009196:	e004      	b.n	80091a2 <USBH_HandleControl+0x2de>
      break;
 8009198:	bf00      	nop
 800919a:	e002      	b.n	80091a2 <USBH_HandleControl+0x2de>
      break;
 800919c:	bf00      	nop
 800919e:	e000      	b.n	80091a2 <USBH_HandleControl+0x2de>
      break;
 80091a0:	bf00      	nop
  }

  return status;
 80091a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3710      	adds	r7, #16
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b088      	sub	sp, #32
 80091b0:	af04      	add	r7, sp, #16
 80091b2:	60f8      	str	r0, [r7, #12]
 80091b4:	60b9      	str	r1, [r7, #8]
 80091b6:	4613      	mov	r3, r2
 80091b8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80091ba:	79f9      	ldrb	r1, [r7, #7]
 80091bc:	2300      	movs	r3, #0
 80091be:	9303      	str	r3, [sp, #12]
 80091c0:	2308      	movs	r3, #8
 80091c2:	9302      	str	r3, [sp, #8]
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	9301      	str	r3, [sp, #4]
 80091c8:	2300      	movs	r3, #0
 80091ca:	9300      	str	r3, [sp, #0]
 80091cc:	2300      	movs	r3, #0
 80091ce:	2200      	movs	r2, #0
 80091d0:	68f8      	ldr	r0, [r7, #12]
 80091d2:	f000 fb46 	bl	8009862 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80091d6:	2300      	movs	r3, #0
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3710      	adds	r7, #16
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}

080091e0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b088      	sub	sp, #32
 80091e4:	af04      	add	r7, sp, #16
 80091e6:	60f8      	str	r0, [r7, #12]
 80091e8:	60b9      	str	r1, [r7, #8]
 80091ea:	4611      	mov	r1, r2
 80091ec:	461a      	mov	r2, r3
 80091ee:	460b      	mov	r3, r1
 80091f0:	80fb      	strh	r3, [r7, #6]
 80091f2:	4613      	mov	r3, r2
 80091f4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d001      	beq.n	8009204 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009200:	2300      	movs	r3, #0
 8009202:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009204:	7979      	ldrb	r1, [r7, #5]
 8009206:	7e3b      	ldrb	r3, [r7, #24]
 8009208:	9303      	str	r3, [sp, #12]
 800920a:	88fb      	ldrh	r3, [r7, #6]
 800920c:	9302      	str	r3, [sp, #8]
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	9301      	str	r3, [sp, #4]
 8009212:	2301      	movs	r3, #1
 8009214:	9300      	str	r3, [sp, #0]
 8009216:	2300      	movs	r3, #0
 8009218:	2200      	movs	r2, #0
 800921a:	68f8      	ldr	r0, [r7, #12]
 800921c:	f000 fb21 	bl	8009862 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009220:	2300      	movs	r3, #0
}
 8009222:	4618      	mov	r0, r3
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}

0800922a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800922a:	b580      	push	{r7, lr}
 800922c:	b088      	sub	sp, #32
 800922e:	af04      	add	r7, sp, #16
 8009230:	60f8      	str	r0, [r7, #12]
 8009232:	60b9      	str	r1, [r7, #8]
 8009234:	4611      	mov	r1, r2
 8009236:	461a      	mov	r2, r3
 8009238:	460b      	mov	r3, r1
 800923a:	80fb      	strh	r3, [r7, #6]
 800923c:	4613      	mov	r3, r2
 800923e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009240:	7979      	ldrb	r1, [r7, #5]
 8009242:	2300      	movs	r3, #0
 8009244:	9303      	str	r3, [sp, #12]
 8009246:	88fb      	ldrh	r3, [r7, #6]
 8009248:	9302      	str	r3, [sp, #8]
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	9301      	str	r3, [sp, #4]
 800924e:	2301      	movs	r3, #1
 8009250:	9300      	str	r3, [sp, #0]
 8009252:	2300      	movs	r3, #0
 8009254:	2201      	movs	r2, #1
 8009256:	68f8      	ldr	r0, [r7, #12]
 8009258:	f000 fb03 	bl	8009862 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800925c:	2300      	movs	r3, #0

}
 800925e:	4618      	mov	r0, r3
 8009260:	3710      	adds	r7, #16
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009266:	b580      	push	{r7, lr}
 8009268:	b088      	sub	sp, #32
 800926a:	af04      	add	r7, sp, #16
 800926c:	60f8      	str	r0, [r7, #12]
 800926e:	60b9      	str	r1, [r7, #8]
 8009270:	4611      	mov	r1, r2
 8009272:	461a      	mov	r2, r3
 8009274:	460b      	mov	r3, r1
 8009276:	80fb      	strh	r3, [r7, #6]
 8009278:	4613      	mov	r3, r2
 800927a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009282:	2b00      	cmp	r3, #0
 8009284:	d001      	beq.n	800928a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009286:	2300      	movs	r3, #0
 8009288:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800928a:	7979      	ldrb	r1, [r7, #5]
 800928c:	7e3b      	ldrb	r3, [r7, #24]
 800928e:	9303      	str	r3, [sp, #12]
 8009290:	88fb      	ldrh	r3, [r7, #6]
 8009292:	9302      	str	r3, [sp, #8]
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	9301      	str	r3, [sp, #4]
 8009298:	2301      	movs	r3, #1
 800929a:	9300      	str	r3, [sp, #0]
 800929c:	2302      	movs	r3, #2
 800929e:	2200      	movs	r2, #0
 80092a0:	68f8      	ldr	r0, [r7, #12]
 80092a2:	f000 fade 	bl	8009862 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80092a6:	2300      	movs	r3, #0
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3710      	adds	r7, #16
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b088      	sub	sp, #32
 80092b4:	af04      	add	r7, sp, #16
 80092b6:	60f8      	str	r0, [r7, #12]
 80092b8:	60b9      	str	r1, [r7, #8]
 80092ba:	4611      	mov	r1, r2
 80092bc:	461a      	mov	r2, r3
 80092be:	460b      	mov	r3, r1
 80092c0:	80fb      	strh	r3, [r7, #6]
 80092c2:	4613      	mov	r3, r2
 80092c4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80092c6:	7979      	ldrb	r1, [r7, #5]
 80092c8:	2300      	movs	r3, #0
 80092ca:	9303      	str	r3, [sp, #12]
 80092cc:	88fb      	ldrh	r3, [r7, #6]
 80092ce:	9302      	str	r3, [sp, #8]
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	9301      	str	r3, [sp, #4]
 80092d4:	2301      	movs	r3, #1
 80092d6:	9300      	str	r3, [sp, #0]
 80092d8:	2302      	movs	r3, #2
 80092da:	2201      	movs	r2, #1
 80092dc:	68f8      	ldr	r0, [r7, #12]
 80092de:	f000 fac0 	bl	8009862 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80092e2:	2300      	movs	r3, #0
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3710      	adds	r7, #16
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b086      	sub	sp, #24
 80092f0:	af04      	add	r7, sp, #16
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	4608      	mov	r0, r1
 80092f6:	4611      	mov	r1, r2
 80092f8:	461a      	mov	r2, r3
 80092fa:	4603      	mov	r3, r0
 80092fc:	70fb      	strb	r3, [r7, #3]
 80092fe:	460b      	mov	r3, r1
 8009300:	70bb      	strb	r3, [r7, #2]
 8009302:	4613      	mov	r3, r2
 8009304:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009306:	7878      	ldrb	r0, [r7, #1]
 8009308:	78ba      	ldrb	r2, [r7, #2]
 800930a:	78f9      	ldrb	r1, [r7, #3]
 800930c:	8b3b      	ldrh	r3, [r7, #24]
 800930e:	9302      	str	r3, [sp, #8]
 8009310:	7d3b      	ldrb	r3, [r7, #20]
 8009312:	9301      	str	r3, [sp, #4]
 8009314:	7c3b      	ldrb	r3, [r7, #16]
 8009316:	9300      	str	r3, [sp, #0]
 8009318:	4603      	mov	r3, r0
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 fa53 	bl	80097c6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009320:	2300      	movs	r3, #0
}
 8009322:	4618      	mov	r0, r3
 8009324:	3708      	adds	r7, #8
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}

0800932a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800932a:	b580      	push	{r7, lr}
 800932c:	b082      	sub	sp, #8
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]
 8009332:	460b      	mov	r3, r1
 8009334:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009336:	78fb      	ldrb	r3, [r7, #3]
 8009338:	4619      	mov	r1, r3
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 fa72 	bl	8009824 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009340:	2300      	movs	r3, #0
}
 8009342:	4618      	mov	r0, r3
 8009344:	3708      	adds	r7, #8
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}

0800934a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800934a:	b580      	push	{r7, lr}
 800934c:	b084      	sub	sp, #16
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
 8009352:	460b      	mov	r3, r1
 8009354:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 f836 	bl	80093c8 <USBH_GetFreePipe>
 800935c:	4603      	mov	r3, r0
 800935e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009360:	89fb      	ldrh	r3, [r7, #14]
 8009362:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009366:	4293      	cmp	r3, r2
 8009368:	d00a      	beq.n	8009380 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800936a:	78fa      	ldrb	r2, [r7, #3]
 800936c:	89fb      	ldrh	r3, [r7, #14]
 800936e:	f003 030f 	and.w	r3, r3, #15
 8009372:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009376:	6879      	ldr	r1, [r7, #4]
 8009378:	33e0      	adds	r3, #224	@ 0xe0
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	440b      	add	r3, r1
 800937e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009380:	89fb      	ldrh	r3, [r7, #14]
 8009382:	b2db      	uxtb	r3, r3
}
 8009384:	4618      	mov	r0, r3
 8009386:	3710      	adds	r7, #16
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800938c:	b480      	push	{r7}
 800938e:	b083      	sub	sp, #12
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	460b      	mov	r3, r1
 8009396:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009398:	78fb      	ldrb	r3, [r7, #3]
 800939a:	2b0f      	cmp	r3, #15
 800939c:	d80d      	bhi.n	80093ba <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800939e:	78fb      	ldrb	r3, [r7, #3]
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	33e0      	adds	r3, #224	@ 0xe0
 80093a4:	009b      	lsls	r3, r3, #2
 80093a6:	4413      	add	r3, r2
 80093a8:	685a      	ldr	r2, [r3, #4]
 80093aa:	78fb      	ldrb	r3, [r7, #3]
 80093ac:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80093b0:	6879      	ldr	r1, [r7, #4]
 80093b2:	33e0      	adds	r3, #224	@ 0xe0
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	440b      	add	r3, r1
 80093b8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80093ba:	2300      	movs	r3, #0
}
 80093bc:	4618      	mov	r0, r3
 80093be:	370c      	adds	r7, #12
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr

080093c8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b085      	sub	sp, #20
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80093d0:	2300      	movs	r3, #0
 80093d2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80093d4:	2300      	movs	r3, #0
 80093d6:	73fb      	strb	r3, [r7, #15]
 80093d8:	e00f      	b.n	80093fa <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80093da:	7bfb      	ldrb	r3, [r7, #15]
 80093dc:	687a      	ldr	r2, [r7, #4]
 80093de:	33e0      	adds	r3, #224	@ 0xe0
 80093e0:	009b      	lsls	r3, r3, #2
 80093e2:	4413      	add	r3, r2
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d102      	bne.n	80093f4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80093ee:	7bfb      	ldrb	r3, [r7, #15]
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	e007      	b.n	8009404 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80093f4:	7bfb      	ldrb	r3, [r7, #15]
 80093f6:	3301      	adds	r3, #1
 80093f8:	73fb      	strb	r3, [r7, #15]
 80093fa:	7bfb      	ldrb	r3, [r7, #15]
 80093fc:	2b0f      	cmp	r3, #15
 80093fe:	d9ec      	bls.n	80093da <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009400:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009404:	4618      	mov	r0, r3
 8009406:	3714      	adds	r7, #20
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009414:	2201      	movs	r2, #1
 8009416:	490e      	ldr	r1, [pc, #56]	@ (8009450 <MX_USB_HOST_Init+0x40>)
 8009418:	480e      	ldr	r0, [pc, #56]	@ (8009454 <MX_USB_HOST_Init+0x44>)
 800941a:	f7fe fb15 	bl	8007a48 <USBH_Init>
 800941e:	4603      	mov	r3, r0
 8009420:	2b00      	cmp	r3, #0
 8009422:	d001      	beq.n	8009428 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009424:	f7f7 fb44 	bl	8000ab0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009428:	490b      	ldr	r1, [pc, #44]	@ (8009458 <MX_USB_HOST_Init+0x48>)
 800942a:	480a      	ldr	r0, [pc, #40]	@ (8009454 <MX_USB_HOST_Init+0x44>)
 800942c:	f7fe fbb9 	bl	8007ba2 <USBH_RegisterClass>
 8009430:	4603      	mov	r3, r0
 8009432:	2b00      	cmp	r3, #0
 8009434:	d001      	beq.n	800943a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009436:	f7f7 fb3b 	bl	8000ab0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800943a:	4806      	ldr	r0, [pc, #24]	@ (8009454 <MX_USB_HOST_Init+0x44>)
 800943c:	f7fe fc3d 	bl	8007cba <USBH_Start>
 8009440:	4603      	mov	r3, r0
 8009442:	2b00      	cmp	r3, #0
 8009444:	d001      	beq.n	800944a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009446:	f7f7 fb33 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800944a:	bf00      	nop
 800944c:	bd80      	pop	{r7, pc}
 800944e:	bf00      	nop
 8009450:	08009471 	.word	0x08009471
 8009454:	20000248 	.word	0x20000248
 8009458:	2000000c 	.word	0x2000000c

0800945c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009460:	4802      	ldr	r0, [pc, #8]	@ (800946c <MX_USB_HOST_Process+0x10>)
 8009462:	f7fe fc3b 	bl	8007cdc <USBH_Process>
}
 8009466:	bf00      	nop
 8009468:	bd80      	pop	{r7, pc}
 800946a:	bf00      	nop
 800946c:	20000248 	.word	0x20000248

08009470 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009470:	b480      	push	{r7}
 8009472:	b083      	sub	sp, #12
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	460b      	mov	r3, r1
 800947a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800947c:	78fb      	ldrb	r3, [r7, #3]
 800947e:	3b01      	subs	r3, #1
 8009480:	2b04      	cmp	r3, #4
 8009482:	d819      	bhi.n	80094b8 <USBH_UserProcess+0x48>
 8009484:	a201      	add	r2, pc, #4	@ (adr r2, 800948c <USBH_UserProcess+0x1c>)
 8009486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800948a:	bf00      	nop
 800948c:	080094b9 	.word	0x080094b9
 8009490:	080094a9 	.word	0x080094a9
 8009494:	080094b9 	.word	0x080094b9
 8009498:	080094b1 	.word	0x080094b1
 800949c:	080094a1 	.word	0x080094a1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80094a0:	4b09      	ldr	r3, [pc, #36]	@ (80094c8 <USBH_UserProcess+0x58>)
 80094a2:	2203      	movs	r2, #3
 80094a4:	701a      	strb	r2, [r3, #0]
  break;
 80094a6:	e008      	b.n	80094ba <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80094a8:	4b07      	ldr	r3, [pc, #28]	@ (80094c8 <USBH_UserProcess+0x58>)
 80094aa:	2202      	movs	r2, #2
 80094ac:	701a      	strb	r2, [r3, #0]
  break;
 80094ae:	e004      	b.n	80094ba <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80094b0:	4b05      	ldr	r3, [pc, #20]	@ (80094c8 <USBH_UserProcess+0x58>)
 80094b2:	2201      	movs	r2, #1
 80094b4:	701a      	strb	r2, [r3, #0]
  break;
 80094b6:	e000      	b.n	80094ba <USBH_UserProcess+0x4a>

  default:
  break;
 80094b8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80094ba:	bf00      	nop
 80094bc:	370c      	adds	r7, #12
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr
 80094c6:	bf00      	nop
 80094c8:	20000620 	.word	0x20000620

080094cc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b08a      	sub	sp, #40	@ 0x28
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80094d4:	f107 0314 	add.w	r3, r7, #20
 80094d8:	2200      	movs	r2, #0
 80094da:	601a      	str	r2, [r3, #0]
 80094dc:	605a      	str	r2, [r3, #4]
 80094de:	609a      	str	r2, [r3, #8]
 80094e0:	60da      	str	r2, [r3, #12]
 80094e2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80094ec:	d147      	bne.n	800957e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80094ee:	2300      	movs	r3, #0
 80094f0:	613b      	str	r3, [r7, #16]
 80094f2:	4b25      	ldr	r3, [pc, #148]	@ (8009588 <HAL_HCD_MspInit+0xbc>)
 80094f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094f6:	4a24      	ldr	r2, [pc, #144]	@ (8009588 <HAL_HCD_MspInit+0xbc>)
 80094f8:	f043 0301 	orr.w	r3, r3, #1
 80094fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80094fe:	4b22      	ldr	r3, [pc, #136]	@ (8009588 <HAL_HCD_MspInit+0xbc>)
 8009500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009502:	f003 0301 	and.w	r3, r3, #1
 8009506:	613b      	str	r3, [r7, #16]
 8009508:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800950a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800950e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009510:	2300      	movs	r3, #0
 8009512:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009514:	2300      	movs	r3, #0
 8009516:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009518:	f107 0314 	add.w	r3, r7, #20
 800951c:	4619      	mov	r1, r3
 800951e:	481b      	ldr	r0, [pc, #108]	@ (800958c <HAL_HCD_MspInit+0xc0>)
 8009520:	f7f8 fe6c 	bl	80021fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009524:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8009528:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800952a:	2302      	movs	r3, #2
 800952c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800952e:	2300      	movs	r3, #0
 8009530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009532:	2300      	movs	r3, #0
 8009534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009536:	230a      	movs	r3, #10
 8009538:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800953a:	f107 0314 	add.w	r3, r7, #20
 800953e:	4619      	mov	r1, r3
 8009540:	4812      	ldr	r0, [pc, #72]	@ (800958c <HAL_HCD_MspInit+0xc0>)
 8009542:	f7f8 fe5b 	bl	80021fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009546:	4b10      	ldr	r3, [pc, #64]	@ (8009588 <HAL_HCD_MspInit+0xbc>)
 8009548:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800954a:	4a0f      	ldr	r2, [pc, #60]	@ (8009588 <HAL_HCD_MspInit+0xbc>)
 800954c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009550:	6353      	str	r3, [r2, #52]	@ 0x34
 8009552:	2300      	movs	r3, #0
 8009554:	60fb      	str	r3, [r7, #12]
 8009556:	4b0c      	ldr	r3, [pc, #48]	@ (8009588 <HAL_HCD_MspInit+0xbc>)
 8009558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800955a:	4a0b      	ldr	r2, [pc, #44]	@ (8009588 <HAL_HCD_MspInit+0xbc>)
 800955c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009560:	6453      	str	r3, [r2, #68]	@ 0x44
 8009562:	4b09      	ldr	r3, [pc, #36]	@ (8009588 <HAL_HCD_MspInit+0xbc>)
 8009564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009566:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800956a:	60fb      	str	r3, [r7, #12]
 800956c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800956e:	2200      	movs	r2, #0
 8009570:	2100      	movs	r1, #0
 8009572:	2043      	movs	r0, #67	@ 0x43
 8009574:	f7f8 fa9b 	bl	8001aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009578:	2043      	movs	r0, #67	@ 0x43
 800957a:	f7f8 fab4 	bl	8001ae6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800957e:	bf00      	nop
 8009580:	3728      	adds	r7, #40	@ 0x28
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	40023800 	.word	0x40023800
 800958c:	40020000 	.word	0x40020000

08009590 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b082      	sub	sp, #8
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800959e:	4618      	mov	r0, r3
 80095a0:	f7fe ff73 	bl	800848a <USBH_LL_IncTimer>
}
 80095a4:	bf00      	nop
 80095a6:	3708      	adds	r7, #8
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b082      	sub	sp, #8
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80095ba:	4618      	mov	r0, r3
 80095bc:	f7fe ffab 	bl	8008516 <USBH_LL_Connect>
}
 80095c0:	bf00      	nop
 80095c2:	3708      	adds	r7, #8
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7fe ffb4 	bl	8008544 <USBH_LL_Disconnect>
}
 80095dc:	bf00      	nop
 80095de:	3708      	adds	r7, #8
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b083      	sub	sp, #12
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	460b      	mov	r3, r1
 80095ee:	70fb      	strb	r3, [r7, #3]
 80095f0:	4613      	mov	r3, r2
 80095f2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80095f4:	bf00      	nop
 80095f6:	370c      	adds	r7, #12
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	4770      	bx	lr

08009600 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b082      	sub	sp, #8
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800960e:	4618      	mov	r0, r3
 8009610:	f7fe ff65 	bl	80084de <USBH_LL_PortEnabled>
}
 8009614:	bf00      	nop
 8009616:	3708      	adds	r7, #8
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800962a:	4618      	mov	r0, r3
 800962c:	f7fe ff65 	bl	80084fa <USBH_LL_PortDisabled>
}
 8009630:	bf00      	nop
 8009632:	3708      	adds	r7, #8
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009646:	2b01      	cmp	r3, #1
 8009648:	d12a      	bne.n	80096a0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800964a:	4a18      	ldr	r2, [pc, #96]	@ (80096ac <USBH_LL_Init+0x74>)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	4a15      	ldr	r2, [pc, #84]	@ (80096ac <USBH_LL_Init+0x74>)
 8009656:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800965a:	4b14      	ldr	r3, [pc, #80]	@ (80096ac <USBH_LL_Init+0x74>)
 800965c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009660:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009662:	4b12      	ldr	r3, [pc, #72]	@ (80096ac <USBH_LL_Init+0x74>)
 8009664:	2208      	movs	r2, #8
 8009666:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009668:	4b10      	ldr	r3, [pc, #64]	@ (80096ac <USBH_LL_Init+0x74>)
 800966a:	2201      	movs	r2, #1
 800966c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800966e:	4b0f      	ldr	r3, [pc, #60]	@ (80096ac <USBH_LL_Init+0x74>)
 8009670:	2200      	movs	r2, #0
 8009672:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009674:	4b0d      	ldr	r3, [pc, #52]	@ (80096ac <USBH_LL_Init+0x74>)
 8009676:	2202      	movs	r2, #2
 8009678:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800967a:	4b0c      	ldr	r3, [pc, #48]	@ (80096ac <USBH_LL_Init+0x74>)
 800967c:	2200      	movs	r2, #0
 800967e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009680:	480a      	ldr	r0, [pc, #40]	@ (80096ac <USBH_LL_Init+0x74>)
 8009682:	f7f8 ff70 	bl	8002566 <HAL_HCD_Init>
 8009686:	4603      	mov	r3, r0
 8009688:	2b00      	cmp	r3, #0
 800968a:	d001      	beq.n	8009690 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800968c:	f7f7 fa10 	bl	8000ab0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009690:	4806      	ldr	r0, [pc, #24]	@ (80096ac <USBH_LL_Init+0x74>)
 8009692:	f7f9 fbd1 	bl	8002e38 <HAL_HCD_GetCurrentFrame>
 8009696:	4603      	mov	r3, r0
 8009698:	4619      	mov	r1, r3
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f7fe fee6 	bl	800846c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80096a0:	2300      	movs	r3, #0
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3708      	adds	r7, #8
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop
 80096ac:	20000624 	.word	0x20000624

080096b0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096b8:	2300      	movs	r3, #0
 80096ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80096bc:	2300      	movs	r3, #0
 80096be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80096c6:	4618      	mov	r0, r3
 80096c8:	f7f9 fb3e 	bl	8002d48 <HAL_HCD_Start>
 80096cc:	4603      	mov	r3, r0
 80096ce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80096d0:	7bfb      	ldrb	r3, [r7, #15]
 80096d2:	4618      	mov	r0, r3
 80096d4:	f000 f95e 	bl	8009994 <USBH_Get_USB_Status>
 80096d8:	4603      	mov	r3, r0
 80096da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3710      	adds	r7, #16
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b084      	sub	sp, #16
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096ee:	2300      	movs	r3, #0
 80096f0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80096f2:	2300      	movs	r3, #0
 80096f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80096fc:	4618      	mov	r0, r3
 80096fe:	f7f9 fb46 	bl	8002d8e <HAL_HCD_Stop>
 8009702:	4603      	mov	r3, r0
 8009704:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009706:	7bfb      	ldrb	r3, [r7, #15]
 8009708:	4618      	mov	r0, r3
 800970a:	f000 f943 	bl	8009994 <USBH_Get_USB_Status>
 800970e:	4603      	mov	r3, r0
 8009710:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009712:	7bbb      	ldrb	r3, [r7, #14]
}
 8009714:	4618      	mov	r0, r3
 8009716:	3710      	adds	r7, #16
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b084      	sub	sp, #16
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009724:	2301      	movs	r3, #1
 8009726:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800972e:	4618      	mov	r0, r3
 8009730:	f7f9 fb90 	bl	8002e54 <HAL_HCD_GetCurrentSpeed>
 8009734:	4603      	mov	r3, r0
 8009736:	2b02      	cmp	r3, #2
 8009738:	d00c      	beq.n	8009754 <USBH_LL_GetSpeed+0x38>
 800973a:	2b02      	cmp	r3, #2
 800973c:	d80d      	bhi.n	800975a <USBH_LL_GetSpeed+0x3e>
 800973e:	2b00      	cmp	r3, #0
 8009740:	d002      	beq.n	8009748 <USBH_LL_GetSpeed+0x2c>
 8009742:	2b01      	cmp	r3, #1
 8009744:	d003      	beq.n	800974e <USBH_LL_GetSpeed+0x32>
 8009746:	e008      	b.n	800975a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009748:	2300      	movs	r3, #0
 800974a:	73fb      	strb	r3, [r7, #15]
    break;
 800974c:	e008      	b.n	8009760 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800974e:	2301      	movs	r3, #1
 8009750:	73fb      	strb	r3, [r7, #15]
    break;
 8009752:	e005      	b.n	8009760 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009754:	2302      	movs	r3, #2
 8009756:	73fb      	strb	r3, [r7, #15]
    break;
 8009758:	e002      	b.n	8009760 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800975a:	2301      	movs	r3, #1
 800975c:	73fb      	strb	r3, [r7, #15]
    break;
 800975e:	bf00      	nop
  }
  return  speed;
 8009760:	7bfb      	ldrb	r3, [r7, #15]
}
 8009762:	4618      	mov	r0, r3
 8009764:	3710      	adds	r7, #16
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}

0800976a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800976a:	b580      	push	{r7, lr}
 800976c:	b084      	sub	sp, #16
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009772:	2300      	movs	r3, #0
 8009774:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009776:	2300      	movs	r3, #0
 8009778:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009780:	4618      	mov	r0, r3
 8009782:	f7f9 fb21 	bl	8002dc8 <HAL_HCD_ResetPort>
 8009786:	4603      	mov	r3, r0
 8009788:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800978a:	7bfb      	ldrb	r3, [r7, #15]
 800978c:	4618      	mov	r0, r3
 800978e:	f000 f901 	bl	8009994 <USBH_Get_USB_Status>
 8009792:	4603      	mov	r3, r0
 8009794:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009796:	7bbb      	ldrb	r3, [r7, #14]
}
 8009798:	4618      	mov	r0, r3
 800979a:	3710      	adds	r7, #16
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	460b      	mov	r3, r1
 80097aa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80097b2:	78fa      	ldrb	r2, [r7, #3]
 80097b4:	4611      	mov	r1, r2
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7f9 fb29 	bl	8002e0e <HAL_HCD_HC_GetXferCount>
 80097bc:	4603      	mov	r3, r0
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3708      	adds	r7, #8
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80097c6:	b590      	push	{r4, r7, lr}
 80097c8:	b089      	sub	sp, #36	@ 0x24
 80097ca:	af04      	add	r7, sp, #16
 80097cc:	6078      	str	r0, [r7, #4]
 80097ce:	4608      	mov	r0, r1
 80097d0:	4611      	mov	r1, r2
 80097d2:	461a      	mov	r2, r3
 80097d4:	4603      	mov	r3, r0
 80097d6:	70fb      	strb	r3, [r7, #3]
 80097d8:	460b      	mov	r3, r1
 80097da:	70bb      	strb	r3, [r7, #2]
 80097dc:	4613      	mov	r3, r2
 80097de:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097e0:	2300      	movs	r3, #0
 80097e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80097e4:	2300      	movs	r3, #0
 80097e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80097ee:	787c      	ldrb	r4, [r7, #1]
 80097f0:	78ba      	ldrb	r2, [r7, #2]
 80097f2:	78f9      	ldrb	r1, [r7, #3]
 80097f4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80097f6:	9302      	str	r3, [sp, #8]
 80097f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80097fc:	9301      	str	r3, [sp, #4]
 80097fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009802:	9300      	str	r3, [sp, #0]
 8009804:	4623      	mov	r3, r4
 8009806:	f7f8 ff15 	bl	8002634 <HAL_HCD_HC_Init>
 800980a:	4603      	mov	r3, r0
 800980c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800980e:	7bfb      	ldrb	r3, [r7, #15]
 8009810:	4618      	mov	r0, r3
 8009812:	f000 f8bf 	bl	8009994 <USBH_Get_USB_Status>
 8009816:	4603      	mov	r3, r0
 8009818:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800981a:	7bbb      	ldrb	r3, [r7, #14]
}
 800981c:	4618      	mov	r0, r3
 800981e:	3714      	adds	r7, #20
 8009820:	46bd      	mov	sp, r7
 8009822:	bd90      	pop	{r4, r7, pc}

08009824 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b084      	sub	sp, #16
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	460b      	mov	r3, r1
 800982e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009830:	2300      	movs	r3, #0
 8009832:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009834:	2300      	movs	r3, #0
 8009836:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800983e:	78fa      	ldrb	r2, [r7, #3]
 8009840:	4611      	mov	r1, r2
 8009842:	4618      	mov	r0, r3
 8009844:	f7f8 ffae 	bl	80027a4 <HAL_HCD_HC_Halt>
 8009848:	4603      	mov	r3, r0
 800984a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800984c:	7bfb      	ldrb	r3, [r7, #15]
 800984e:	4618      	mov	r0, r3
 8009850:	f000 f8a0 	bl	8009994 <USBH_Get_USB_Status>
 8009854:	4603      	mov	r3, r0
 8009856:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009858:	7bbb      	ldrb	r3, [r7, #14]
}
 800985a:	4618      	mov	r0, r3
 800985c:	3710      	adds	r7, #16
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}

08009862 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009862:	b590      	push	{r4, r7, lr}
 8009864:	b089      	sub	sp, #36	@ 0x24
 8009866:	af04      	add	r7, sp, #16
 8009868:	6078      	str	r0, [r7, #4]
 800986a:	4608      	mov	r0, r1
 800986c:	4611      	mov	r1, r2
 800986e:	461a      	mov	r2, r3
 8009870:	4603      	mov	r3, r0
 8009872:	70fb      	strb	r3, [r7, #3]
 8009874:	460b      	mov	r3, r1
 8009876:	70bb      	strb	r3, [r7, #2]
 8009878:	4613      	mov	r3, r2
 800987a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800987c:	2300      	movs	r3, #0
 800987e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009880:	2300      	movs	r3, #0
 8009882:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800988a:	787c      	ldrb	r4, [r7, #1]
 800988c:	78ba      	ldrb	r2, [r7, #2]
 800988e:	78f9      	ldrb	r1, [r7, #3]
 8009890:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009894:	9303      	str	r3, [sp, #12]
 8009896:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009898:	9302      	str	r3, [sp, #8]
 800989a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800989c:	9301      	str	r3, [sp, #4]
 800989e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80098a2:	9300      	str	r3, [sp, #0]
 80098a4:	4623      	mov	r3, r4
 80098a6:	f7f8 ffa1 	bl	80027ec <HAL_HCD_HC_SubmitRequest>
 80098aa:	4603      	mov	r3, r0
 80098ac:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80098ae:	7bfb      	ldrb	r3, [r7, #15]
 80098b0:	4618      	mov	r0, r3
 80098b2:	f000 f86f 	bl	8009994 <USBH_Get_USB_Status>
 80098b6:	4603      	mov	r3, r0
 80098b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3714      	adds	r7, #20
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd90      	pop	{r4, r7, pc}

080098c4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b082      	sub	sp, #8
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	460b      	mov	r3, r1
 80098ce:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80098d6:	78fa      	ldrb	r2, [r7, #3]
 80098d8:	4611      	mov	r1, r2
 80098da:	4618      	mov	r0, r3
 80098dc:	f7f9 fa82 	bl	8002de4 <HAL_HCD_HC_GetURBState>
 80098e0:	4603      	mov	r3, r0
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3708      	adds	r7, #8
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}

080098ea <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80098ea:	b580      	push	{r7, lr}
 80098ec:	b082      	sub	sp, #8
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	6078      	str	r0, [r7, #4]
 80098f2:	460b      	mov	r3, r1
 80098f4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d103      	bne.n	8009908 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009900:	78fb      	ldrb	r3, [r7, #3]
 8009902:	4618      	mov	r0, r3
 8009904:	f000 f872 	bl	80099ec <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009908:	20c8      	movs	r0, #200	@ 0xc8
 800990a:	f7f7 fbc9 	bl	80010a0 <HAL_Delay>
  return USBH_OK;
 800990e:	2300      	movs	r3, #0
}
 8009910:	4618      	mov	r0, r3
 8009912:	3708      	adds	r7, #8
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009918:	b480      	push	{r7}
 800991a:	b085      	sub	sp, #20
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	460b      	mov	r3, r1
 8009922:	70fb      	strb	r3, [r7, #3]
 8009924:	4613      	mov	r3, r2
 8009926:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800992e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009930:	78fa      	ldrb	r2, [r7, #3]
 8009932:	68f9      	ldr	r1, [r7, #12]
 8009934:	4613      	mov	r3, r2
 8009936:	011b      	lsls	r3, r3, #4
 8009938:	1a9b      	subs	r3, r3, r2
 800993a:	009b      	lsls	r3, r3, #2
 800993c:	440b      	add	r3, r1
 800993e:	3317      	adds	r3, #23
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d00a      	beq.n	800995c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009946:	78fa      	ldrb	r2, [r7, #3]
 8009948:	68f9      	ldr	r1, [r7, #12]
 800994a:	4613      	mov	r3, r2
 800994c:	011b      	lsls	r3, r3, #4
 800994e:	1a9b      	subs	r3, r3, r2
 8009950:	009b      	lsls	r3, r3, #2
 8009952:	440b      	add	r3, r1
 8009954:	333c      	adds	r3, #60	@ 0x3c
 8009956:	78ba      	ldrb	r2, [r7, #2]
 8009958:	701a      	strb	r2, [r3, #0]
 800995a:	e009      	b.n	8009970 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800995c:	78fa      	ldrb	r2, [r7, #3]
 800995e:	68f9      	ldr	r1, [r7, #12]
 8009960:	4613      	mov	r3, r2
 8009962:	011b      	lsls	r3, r3, #4
 8009964:	1a9b      	subs	r3, r3, r2
 8009966:	009b      	lsls	r3, r3, #2
 8009968:	440b      	add	r3, r1
 800996a:	333d      	adds	r3, #61	@ 0x3d
 800996c:	78ba      	ldrb	r2, [r7, #2]
 800996e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009970:	2300      	movs	r3, #0
}
 8009972:	4618      	mov	r0, r3
 8009974:	3714      	adds	r7, #20
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr

0800997e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800997e:	b580      	push	{r7, lr}
 8009980:	b082      	sub	sp, #8
 8009982:	af00      	add	r7, sp, #0
 8009984:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f7f7 fb8a 	bl	80010a0 <HAL_Delay>
}
 800998c:	bf00      	nop
 800998e:	3708      	adds	r7, #8
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009994:	b480      	push	{r7}
 8009996:	b085      	sub	sp, #20
 8009998:	af00      	add	r7, sp, #0
 800999a:	4603      	mov	r3, r0
 800999c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800999e:	2300      	movs	r3, #0
 80099a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80099a2:	79fb      	ldrb	r3, [r7, #7]
 80099a4:	2b03      	cmp	r3, #3
 80099a6:	d817      	bhi.n	80099d8 <USBH_Get_USB_Status+0x44>
 80099a8:	a201      	add	r2, pc, #4	@ (adr r2, 80099b0 <USBH_Get_USB_Status+0x1c>)
 80099aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ae:	bf00      	nop
 80099b0:	080099c1 	.word	0x080099c1
 80099b4:	080099c7 	.word	0x080099c7
 80099b8:	080099cd 	.word	0x080099cd
 80099bc:	080099d3 	.word	0x080099d3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80099c0:	2300      	movs	r3, #0
 80099c2:	73fb      	strb	r3, [r7, #15]
    break;
 80099c4:	e00b      	b.n	80099de <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80099c6:	2302      	movs	r3, #2
 80099c8:	73fb      	strb	r3, [r7, #15]
    break;
 80099ca:	e008      	b.n	80099de <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80099cc:	2301      	movs	r3, #1
 80099ce:	73fb      	strb	r3, [r7, #15]
    break;
 80099d0:	e005      	b.n	80099de <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80099d2:	2302      	movs	r3, #2
 80099d4:	73fb      	strb	r3, [r7, #15]
    break;
 80099d6:	e002      	b.n	80099de <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80099d8:	2302      	movs	r3, #2
 80099da:	73fb      	strb	r3, [r7, #15]
    break;
 80099dc:	bf00      	nop
  }
  return usb_status;
 80099de:	7bfb      	ldrb	r3, [r7, #15]
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3714      	adds	r7, #20
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr

080099ec <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b084      	sub	sp, #16
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	4603      	mov	r3, r0
 80099f4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80099f6:	79fb      	ldrb	r3, [r7, #7]
 80099f8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80099fa:	79fb      	ldrb	r3, [r7, #7]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d102      	bne.n	8009a06 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009a00:	2300      	movs	r3, #0
 8009a02:	73fb      	strb	r3, [r7, #15]
 8009a04:	e001      	b.n	8009a0a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009a06:	2301      	movs	r3, #1
 8009a08:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009a0a:	7bfb      	ldrb	r3, [r7, #15]
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	2101      	movs	r1, #1
 8009a10:	4803      	ldr	r0, [pc, #12]	@ (8009a20 <MX_DriverVbusFS+0x34>)
 8009a12:	f7f8 fd8f 	bl	8002534 <HAL_GPIO_WritePin>
}
 8009a16:	bf00      	nop
 8009a18:	3710      	adds	r7, #16
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	40020800 	.word	0x40020800

08009a24 <malloc>:
 8009a24:	4b02      	ldr	r3, [pc, #8]	@ (8009a30 <malloc+0xc>)
 8009a26:	4601      	mov	r1, r0
 8009a28:	6818      	ldr	r0, [r3, #0]
 8009a2a:	f000 b82d 	b.w	8009a88 <_malloc_r>
 8009a2e:	bf00      	nop
 8009a30:	2000002c 	.word	0x2000002c

08009a34 <free>:
 8009a34:	4b02      	ldr	r3, [pc, #8]	@ (8009a40 <free+0xc>)
 8009a36:	4601      	mov	r1, r0
 8009a38:	6818      	ldr	r0, [r3, #0]
 8009a3a:	f000 b8f5 	b.w	8009c28 <_free_r>
 8009a3e:	bf00      	nop
 8009a40:	2000002c 	.word	0x2000002c

08009a44 <sbrk_aligned>:
 8009a44:	b570      	push	{r4, r5, r6, lr}
 8009a46:	4e0f      	ldr	r6, [pc, #60]	@ (8009a84 <sbrk_aligned+0x40>)
 8009a48:	460c      	mov	r4, r1
 8009a4a:	6831      	ldr	r1, [r6, #0]
 8009a4c:	4605      	mov	r5, r0
 8009a4e:	b911      	cbnz	r1, 8009a56 <sbrk_aligned+0x12>
 8009a50:	f000 f8ae 	bl	8009bb0 <_sbrk_r>
 8009a54:	6030      	str	r0, [r6, #0]
 8009a56:	4621      	mov	r1, r4
 8009a58:	4628      	mov	r0, r5
 8009a5a:	f000 f8a9 	bl	8009bb0 <_sbrk_r>
 8009a5e:	1c43      	adds	r3, r0, #1
 8009a60:	d103      	bne.n	8009a6a <sbrk_aligned+0x26>
 8009a62:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009a66:	4620      	mov	r0, r4
 8009a68:	bd70      	pop	{r4, r5, r6, pc}
 8009a6a:	1cc4      	adds	r4, r0, #3
 8009a6c:	f024 0403 	bic.w	r4, r4, #3
 8009a70:	42a0      	cmp	r0, r4
 8009a72:	d0f8      	beq.n	8009a66 <sbrk_aligned+0x22>
 8009a74:	1a21      	subs	r1, r4, r0
 8009a76:	4628      	mov	r0, r5
 8009a78:	f000 f89a 	bl	8009bb0 <_sbrk_r>
 8009a7c:	3001      	adds	r0, #1
 8009a7e:	d1f2      	bne.n	8009a66 <sbrk_aligned+0x22>
 8009a80:	e7ef      	b.n	8009a62 <sbrk_aligned+0x1e>
 8009a82:	bf00      	nop
 8009a84:	20000a04 	.word	0x20000a04

08009a88 <_malloc_r>:
 8009a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a8c:	1ccd      	adds	r5, r1, #3
 8009a8e:	f025 0503 	bic.w	r5, r5, #3
 8009a92:	3508      	adds	r5, #8
 8009a94:	2d0c      	cmp	r5, #12
 8009a96:	bf38      	it	cc
 8009a98:	250c      	movcc	r5, #12
 8009a9a:	2d00      	cmp	r5, #0
 8009a9c:	4606      	mov	r6, r0
 8009a9e:	db01      	blt.n	8009aa4 <_malloc_r+0x1c>
 8009aa0:	42a9      	cmp	r1, r5
 8009aa2:	d904      	bls.n	8009aae <_malloc_r+0x26>
 8009aa4:	230c      	movs	r3, #12
 8009aa6:	6033      	str	r3, [r6, #0]
 8009aa8:	2000      	movs	r0, #0
 8009aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009aae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009b84 <_malloc_r+0xfc>
 8009ab2:	f000 f869 	bl	8009b88 <__malloc_lock>
 8009ab6:	f8d8 3000 	ldr.w	r3, [r8]
 8009aba:	461c      	mov	r4, r3
 8009abc:	bb44      	cbnz	r4, 8009b10 <_malloc_r+0x88>
 8009abe:	4629      	mov	r1, r5
 8009ac0:	4630      	mov	r0, r6
 8009ac2:	f7ff ffbf 	bl	8009a44 <sbrk_aligned>
 8009ac6:	1c43      	adds	r3, r0, #1
 8009ac8:	4604      	mov	r4, r0
 8009aca:	d158      	bne.n	8009b7e <_malloc_r+0xf6>
 8009acc:	f8d8 4000 	ldr.w	r4, [r8]
 8009ad0:	4627      	mov	r7, r4
 8009ad2:	2f00      	cmp	r7, #0
 8009ad4:	d143      	bne.n	8009b5e <_malloc_r+0xd6>
 8009ad6:	2c00      	cmp	r4, #0
 8009ad8:	d04b      	beq.n	8009b72 <_malloc_r+0xea>
 8009ada:	6823      	ldr	r3, [r4, #0]
 8009adc:	4639      	mov	r1, r7
 8009ade:	4630      	mov	r0, r6
 8009ae0:	eb04 0903 	add.w	r9, r4, r3
 8009ae4:	f000 f864 	bl	8009bb0 <_sbrk_r>
 8009ae8:	4581      	cmp	r9, r0
 8009aea:	d142      	bne.n	8009b72 <_malloc_r+0xea>
 8009aec:	6821      	ldr	r1, [r4, #0]
 8009aee:	1a6d      	subs	r5, r5, r1
 8009af0:	4629      	mov	r1, r5
 8009af2:	4630      	mov	r0, r6
 8009af4:	f7ff ffa6 	bl	8009a44 <sbrk_aligned>
 8009af8:	3001      	adds	r0, #1
 8009afa:	d03a      	beq.n	8009b72 <_malloc_r+0xea>
 8009afc:	6823      	ldr	r3, [r4, #0]
 8009afe:	442b      	add	r3, r5
 8009b00:	6023      	str	r3, [r4, #0]
 8009b02:	f8d8 3000 	ldr.w	r3, [r8]
 8009b06:	685a      	ldr	r2, [r3, #4]
 8009b08:	bb62      	cbnz	r2, 8009b64 <_malloc_r+0xdc>
 8009b0a:	f8c8 7000 	str.w	r7, [r8]
 8009b0e:	e00f      	b.n	8009b30 <_malloc_r+0xa8>
 8009b10:	6822      	ldr	r2, [r4, #0]
 8009b12:	1b52      	subs	r2, r2, r5
 8009b14:	d420      	bmi.n	8009b58 <_malloc_r+0xd0>
 8009b16:	2a0b      	cmp	r2, #11
 8009b18:	d917      	bls.n	8009b4a <_malloc_r+0xc2>
 8009b1a:	1961      	adds	r1, r4, r5
 8009b1c:	42a3      	cmp	r3, r4
 8009b1e:	6025      	str	r5, [r4, #0]
 8009b20:	bf18      	it	ne
 8009b22:	6059      	strne	r1, [r3, #4]
 8009b24:	6863      	ldr	r3, [r4, #4]
 8009b26:	bf08      	it	eq
 8009b28:	f8c8 1000 	streq.w	r1, [r8]
 8009b2c:	5162      	str	r2, [r4, r5]
 8009b2e:	604b      	str	r3, [r1, #4]
 8009b30:	4630      	mov	r0, r6
 8009b32:	f000 f82f 	bl	8009b94 <__malloc_unlock>
 8009b36:	f104 000b 	add.w	r0, r4, #11
 8009b3a:	1d23      	adds	r3, r4, #4
 8009b3c:	f020 0007 	bic.w	r0, r0, #7
 8009b40:	1ac2      	subs	r2, r0, r3
 8009b42:	bf1c      	itt	ne
 8009b44:	1a1b      	subne	r3, r3, r0
 8009b46:	50a3      	strne	r3, [r4, r2]
 8009b48:	e7af      	b.n	8009aaa <_malloc_r+0x22>
 8009b4a:	6862      	ldr	r2, [r4, #4]
 8009b4c:	42a3      	cmp	r3, r4
 8009b4e:	bf0c      	ite	eq
 8009b50:	f8c8 2000 	streq.w	r2, [r8]
 8009b54:	605a      	strne	r2, [r3, #4]
 8009b56:	e7eb      	b.n	8009b30 <_malloc_r+0xa8>
 8009b58:	4623      	mov	r3, r4
 8009b5a:	6864      	ldr	r4, [r4, #4]
 8009b5c:	e7ae      	b.n	8009abc <_malloc_r+0x34>
 8009b5e:	463c      	mov	r4, r7
 8009b60:	687f      	ldr	r7, [r7, #4]
 8009b62:	e7b6      	b.n	8009ad2 <_malloc_r+0x4a>
 8009b64:	461a      	mov	r2, r3
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	42a3      	cmp	r3, r4
 8009b6a:	d1fb      	bne.n	8009b64 <_malloc_r+0xdc>
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	6053      	str	r3, [r2, #4]
 8009b70:	e7de      	b.n	8009b30 <_malloc_r+0xa8>
 8009b72:	230c      	movs	r3, #12
 8009b74:	6033      	str	r3, [r6, #0]
 8009b76:	4630      	mov	r0, r6
 8009b78:	f000 f80c 	bl	8009b94 <__malloc_unlock>
 8009b7c:	e794      	b.n	8009aa8 <_malloc_r+0x20>
 8009b7e:	6005      	str	r5, [r0, #0]
 8009b80:	e7d6      	b.n	8009b30 <_malloc_r+0xa8>
 8009b82:	bf00      	nop
 8009b84:	20000a08 	.word	0x20000a08

08009b88 <__malloc_lock>:
 8009b88:	4801      	ldr	r0, [pc, #4]	@ (8009b90 <__malloc_lock+0x8>)
 8009b8a:	f000 b84b 	b.w	8009c24 <__retarget_lock_acquire_recursive>
 8009b8e:	bf00      	nop
 8009b90:	20000b44 	.word	0x20000b44

08009b94 <__malloc_unlock>:
 8009b94:	4801      	ldr	r0, [pc, #4]	@ (8009b9c <__malloc_unlock+0x8>)
 8009b96:	f000 b846 	b.w	8009c26 <__retarget_lock_release_recursive>
 8009b9a:	bf00      	nop
 8009b9c:	20000b44 	.word	0x20000b44

08009ba0 <memset>:
 8009ba0:	4402      	add	r2, r0
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d100      	bne.n	8009baa <memset+0xa>
 8009ba8:	4770      	bx	lr
 8009baa:	f803 1b01 	strb.w	r1, [r3], #1
 8009bae:	e7f9      	b.n	8009ba4 <memset+0x4>

08009bb0 <_sbrk_r>:
 8009bb0:	b538      	push	{r3, r4, r5, lr}
 8009bb2:	4d06      	ldr	r5, [pc, #24]	@ (8009bcc <_sbrk_r+0x1c>)
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	4604      	mov	r4, r0
 8009bb8:	4608      	mov	r0, r1
 8009bba:	602b      	str	r3, [r5, #0]
 8009bbc:	f7f7 f98c 	bl	8000ed8 <_sbrk>
 8009bc0:	1c43      	adds	r3, r0, #1
 8009bc2:	d102      	bne.n	8009bca <_sbrk_r+0x1a>
 8009bc4:	682b      	ldr	r3, [r5, #0]
 8009bc6:	b103      	cbz	r3, 8009bca <_sbrk_r+0x1a>
 8009bc8:	6023      	str	r3, [r4, #0]
 8009bca:	bd38      	pop	{r3, r4, r5, pc}
 8009bcc:	20000b48 	.word	0x20000b48

08009bd0 <__errno>:
 8009bd0:	4b01      	ldr	r3, [pc, #4]	@ (8009bd8 <__errno+0x8>)
 8009bd2:	6818      	ldr	r0, [r3, #0]
 8009bd4:	4770      	bx	lr
 8009bd6:	bf00      	nop
 8009bd8:	2000002c 	.word	0x2000002c

08009bdc <__libc_init_array>:
 8009bdc:	b570      	push	{r4, r5, r6, lr}
 8009bde:	4d0d      	ldr	r5, [pc, #52]	@ (8009c14 <__libc_init_array+0x38>)
 8009be0:	4c0d      	ldr	r4, [pc, #52]	@ (8009c18 <__libc_init_array+0x3c>)
 8009be2:	1b64      	subs	r4, r4, r5
 8009be4:	10a4      	asrs	r4, r4, #2
 8009be6:	2600      	movs	r6, #0
 8009be8:	42a6      	cmp	r6, r4
 8009bea:	d109      	bne.n	8009c00 <__libc_init_array+0x24>
 8009bec:	4d0b      	ldr	r5, [pc, #44]	@ (8009c1c <__libc_init_array+0x40>)
 8009bee:	4c0c      	ldr	r4, [pc, #48]	@ (8009c20 <__libc_init_array+0x44>)
 8009bf0:	f000 f864 	bl	8009cbc <_init>
 8009bf4:	1b64      	subs	r4, r4, r5
 8009bf6:	10a4      	asrs	r4, r4, #2
 8009bf8:	2600      	movs	r6, #0
 8009bfa:	42a6      	cmp	r6, r4
 8009bfc:	d105      	bne.n	8009c0a <__libc_init_array+0x2e>
 8009bfe:	bd70      	pop	{r4, r5, r6, pc}
 8009c00:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c04:	4798      	blx	r3
 8009c06:	3601      	adds	r6, #1
 8009c08:	e7ee      	b.n	8009be8 <__libc_init_array+0xc>
 8009c0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c0e:	4798      	blx	r3
 8009c10:	3601      	adds	r6, #1
 8009c12:	e7f2      	b.n	8009bfa <__libc_init_array+0x1e>
 8009c14:	08009d00 	.word	0x08009d00
 8009c18:	08009d00 	.word	0x08009d00
 8009c1c:	08009d00 	.word	0x08009d00
 8009c20:	08009d04 	.word	0x08009d04

08009c24 <__retarget_lock_acquire_recursive>:
 8009c24:	4770      	bx	lr

08009c26 <__retarget_lock_release_recursive>:
 8009c26:	4770      	bx	lr

08009c28 <_free_r>:
 8009c28:	b538      	push	{r3, r4, r5, lr}
 8009c2a:	4605      	mov	r5, r0
 8009c2c:	2900      	cmp	r1, #0
 8009c2e:	d041      	beq.n	8009cb4 <_free_r+0x8c>
 8009c30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c34:	1f0c      	subs	r4, r1, #4
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	bfb8      	it	lt
 8009c3a:	18e4      	addlt	r4, r4, r3
 8009c3c:	f7ff ffa4 	bl	8009b88 <__malloc_lock>
 8009c40:	4a1d      	ldr	r2, [pc, #116]	@ (8009cb8 <_free_r+0x90>)
 8009c42:	6813      	ldr	r3, [r2, #0]
 8009c44:	b933      	cbnz	r3, 8009c54 <_free_r+0x2c>
 8009c46:	6063      	str	r3, [r4, #4]
 8009c48:	6014      	str	r4, [r2, #0]
 8009c4a:	4628      	mov	r0, r5
 8009c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c50:	f7ff bfa0 	b.w	8009b94 <__malloc_unlock>
 8009c54:	42a3      	cmp	r3, r4
 8009c56:	d908      	bls.n	8009c6a <_free_r+0x42>
 8009c58:	6820      	ldr	r0, [r4, #0]
 8009c5a:	1821      	adds	r1, r4, r0
 8009c5c:	428b      	cmp	r3, r1
 8009c5e:	bf01      	itttt	eq
 8009c60:	6819      	ldreq	r1, [r3, #0]
 8009c62:	685b      	ldreq	r3, [r3, #4]
 8009c64:	1809      	addeq	r1, r1, r0
 8009c66:	6021      	streq	r1, [r4, #0]
 8009c68:	e7ed      	b.n	8009c46 <_free_r+0x1e>
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	b10b      	cbz	r3, 8009c74 <_free_r+0x4c>
 8009c70:	42a3      	cmp	r3, r4
 8009c72:	d9fa      	bls.n	8009c6a <_free_r+0x42>
 8009c74:	6811      	ldr	r1, [r2, #0]
 8009c76:	1850      	adds	r0, r2, r1
 8009c78:	42a0      	cmp	r0, r4
 8009c7a:	d10b      	bne.n	8009c94 <_free_r+0x6c>
 8009c7c:	6820      	ldr	r0, [r4, #0]
 8009c7e:	4401      	add	r1, r0
 8009c80:	1850      	adds	r0, r2, r1
 8009c82:	4283      	cmp	r3, r0
 8009c84:	6011      	str	r1, [r2, #0]
 8009c86:	d1e0      	bne.n	8009c4a <_free_r+0x22>
 8009c88:	6818      	ldr	r0, [r3, #0]
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	6053      	str	r3, [r2, #4]
 8009c8e:	4408      	add	r0, r1
 8009c90:	6010      	str	r0, [r2, #0]
 8009c92:	e7da      	b.n	8009c4a <_free_r+0x22>
 8009c94:	d902      	bls.n	8009c9c <_free_r+0x74>
 8009c96:	230c      	movs	r3, #12
 8009c98:	602b      	str	r3, [r5, #0]
 8009c9a:	e7d6      	b.n	8009c4a <_free_r+0x22>
 8009c9c:	6820      	ldr	r0, [r4, #0]
 8009c9e:	1821      	adds	r1, r4, r0
 8009ca0:	428b      	cmp	r3, r1
 8009ca2:	bf04      	itt	eq
 8009ca4:	6819      	ldreq	r1, [r3, #0]
 8009ca6:	685b      	ldreq	r3, [r3, #4]
 8009ca8:	6063      	str	r3, [r4, #4]
 8009caa:	bf04      	itt	eq
 8009cac:	1809      	addeq	r1, r1, r0
 8009cae:	6021      	streq	r1, [r4, #0]
 8009cb0:	6054      	str	r4, [r2, #4]
 8009cb2:	e7ca      	b.n	8009c4a <_free_r+0x22>
 8009cb4:	bd38      	pop	{r3, r4, r5, pc}
 8009cb6:	bf00      	nop
 8009cb8:	20000a08 	.word	0x20000a08

08009cbc <_init>:
 8009cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cbe:	bf00      	nop
 8009cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cc2:	bc08      	pop	{r3}
 8009cc4:	469e      	mov	lr, r3
 8009cc6:	4770      	bx	lr

08009cc8 <_fini>:
 8009cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cca:	bf00      	nop
 8009ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cce:	bc08      	pop	{r3}
 8009cd0:	469e      	mov	lr, r3
 8009cd2:	4770      	bx	lr
