
2025_STM32F407_DAC_Pooling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008674  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080087fc  080087fc  000097fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008818  08008818  0000a080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008818  08008818  00009818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008820  08008820  0000a080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008820  08008820  00009820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008824  08008824  00009824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08008828  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a080  2**0
                  CONTENTS
 10 .bss          00000994  20000080  20000080  0000a080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a14  20000a14  0000a080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a080  2**0
                  CONTENTS, READONLY
 13 .debug_info   000119b0  00000000  00000000  0000a0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030f8  00000000  00000000  0001ba60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e40  00000000  00000000  0001eb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ac3  00000000  00000000  0001f998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022a1b  00000000  00000000  0002045b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013308  00000000  00000000  00042e76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c968e  00000000  00000000  0005617e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011f80c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003f28  00000000  00000000  0011f850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000080  00000000  00000000  00123778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080087e4 	.word	0x080087e4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	080087e4 	.word	0x080087e4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a58:	f000 b988 	b.w	8000d6c <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	9d08      	ldr	r5, [sp, #32]
 8000a7a:	468e      	mov	lr, r1
 8000a7c:	4604      	mov	r4, r0
 8000a7e:	4688      	mov	r8, r1
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d14a      	bne.n	8000b1a <__udivmoddi4+0xa6>
 8000a84:	428a      	cmp	r2, r1
 8000a86:	4617      	mov	r7, r2
 8000a88:	d962      	bls.n	8000b50 <__udivmoddi4+0xdc>
 8000a8a:	fab2 f682 	clz	r6, r2
 8000a8e:	b14e      	cbz	r6, 8000aa4 <__udivmoddi4+0x30>
 8000a90:	f1c6 0320 	rsb	r3, r6, #32
 8000a94:	fa01 f806 	lsl.w	r8, r1, r6
 8000a98:	fa20 f303 	lsr.w	r3, r0, r3
 8000a9c:	40b7      	lsls	r7, r6
 8000a9e:	ea43 0808 	orr.w	r8, r3, r8
 8000aa2:	40b4      	lsls	r4, r6
 8000aa4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000aa8:	fa1f fc87 	uxth.w	ip, r7
 8000aac:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ab0:	0c23      	lsrs	r3, r4, #16
 8000ab2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ab6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000aba:	fb01 f20c 	mul.w	r2, r1, ip
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d909      	bls.n	8000ad6 <__udivmoddi4+0x62>
 8000ac2:	18fb      	adds	r3, r7, r3
 8000ac4:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000ac8:	f080 80ea 	bcs.w	8000ca0 <__udivmoddi4+0x22c>
 8000acc:	429a      	cmp	r2, r3
 8000ace:	f240 80e7 	bls.w	8000ca0 <__udivmoddi4+0x22c>
 8000ad2:	3902      	subs	r1, #2
 8000ad4:	443b      	add	r3, r7
 8000ad6:	1a9a      	subs	r2, r3, r2
 8000ad8:	b2a3      	uxth	r3, r4
 8000ada:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ade:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ae2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ae6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000aea:	459c      	cmp	ip, r3
 8000aec:	d909      	bls.n	8000b02 <__udivmoddi4+0x8e>
 8000aee:	18fb      	adds	r3, r7, r3
 8000af0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000af4:	f080 80d6 	bcs.w	8000ca4 <__udivmoddi4+0x230>
 8000af8:	459c      	cmp	ip, r3
 8000afa:	f240 80d3 	bls.w	8000ca4 <__udivmoddi4+0x230>
 8000afe:	443b      	add	r3, r7
 8000b00:	3802      	subs	r0, #2
 8000b02:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b06:	eba3 030c 	sub.w	r3, r3, ip
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	b11d      	cbz	r5, 8000b16 <__udivmoddi4+0xa2>
 8000b0e:	40f3      	lsrs	r3, r6
 8000b10:	2200      	movs	r2, #0
 8000b12:	e9c5 3200 	strd	r3, r2, [r5]
 8000b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	d905      	bls.n	8000b2a <__udivmoddi4+0xb6>
 8000b1e:	b10d      	cbz	r5, 8000b24 <__udivmoddi4+0xb0>
 8000b20:	e9c5 0100 	strd	r0, r1, [r5]
 8000b24:	2100      	movs	r1, #0
 8000b26:	4608      	mov	r0, r1
 8000b28:	e7f5      	b.n	8000b16 <__udivmoddi4+0xa2>
 8000b2a:	fab3 f183 	clz	r1, r3
 8000b2e:	2900      	cmp	r1, #0
 8000b30:	d146      	bne.n	8000bc0 <__udivmoddi4+0x14c>
 8000b32:	4573      	cmp	r3, lr
 8000b34:	d302      	bcc.n	8000b3c <__udivmoddi4+0xc8>
 8000b36:	4282      	cmp	r2, r0
 8000b38:	f200 8105 	bhi.w	8000d46 <__udivmoddi4+0x2d2>
 8000b3c:	1a84      	subs	r4, r0, r2
 8000b3e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b42:	2001      	movs	r0, #1
 8000b44:	4690      	mov	r8, r2
 8000b46:	2d00      	cmp	r5, #0
 8000b48:	d0e5      	beq.n	8000b16 <__udivmoddi4+0xa2>
 8000b4a:	e9c5 4800 	strd	r4, r8, [r5]
 8000b4e:	e7e2      	b.n	8000b16 <__udivmoddi4+0xa2>
 8000b50:	2a00      	cmp	r2, #0
 8000b52:	f000 8090 	beq.w	8000c76 <__udivmoddi4+0x202>
 8000b56:	fab2 f682 	clz	r6, r2
 8000b5a:	2e00      	cmp	r6, #0
 8000b5c:	f040 80a4 	bne.w	8000ca8 <__udivmoddi4+0x234>
 8000b60:	1a8a      	subs	r2, r1, r2
 8000b62:	0c03      	lsrs	r3, r0, #16
 8000b64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b68:	b280      	uxth	r0, r0
 8000b6a:	b2bc      	uxth	r4, r7
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b72:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b7a:	fb04 f20c 	mul.w	r2, r4, ip
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d907      	bls.n	8000b92 <__udivmoddi4+0x11e>
 8000b82:	18fb      	adds	r3, r7, r3
 8000b84:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000b88:	d202      	bcs.n	8000b90 <__udivmoddi4+0x11c>
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	f200 80e0 	bhi.w	8000d50 <__udivmoddi4+0x2dc>
 8000b90:	46c4      	mov	ip, r8
 8000b92:	1a9b      	subs	r3, r3, r2
 8000b94:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b98:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b9c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ba0:	fb02 f404 	mul.w	r4, r2, r4
 8000ba4:	429c      	cmp	r4, r3
 8000ba6:	d907      	bls.n	8000bb8 <__udivmoddi4+0x144>
 8000ba8:	18fb      	adds	r3, r7, r3
 8000baa:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x142>
 8000bb0:	429c      	cmp	r4, r3
 8000bb2:	f200 80ca 	bhi.w	8000d4a <__udivmoddi4+0x2d6>
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	1b1b      	subs	r3, r3, r4
 8000bba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bbe:	e7a5      	b.n	8000b0c <__udivmoddi4+0x98>
 8000bc0:	f1c1 0620 	rsb	r6, r1, #32
 8000bc4:	408b      	lsls	r3, r1
 8000bc6:	fa22 f706 	lsr.w	r7, r2, r6
 8000bca:	431f      	orrs	r7, r3
 8000bcc:	fa0e f401 	lsl.w	r4, lr, r1
 8000bd0:	fa20 f306 	lsr.w	r3, r0, r6
 8000bd4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000bd8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000bdc:	4323      	orrs	r3, r4
 8000bde:	fa00 f801 	lsl.w	r8, r0, r1
 8000be2:	fa1f fc87 	uxth.w	ip, r7
 8000be6:	fbbe f0f9 	udiv	r0, lr, r9
 8000bea:	0c1c      	lsrs	r4, r3, #16
 8000bec:	fb09 ee10 	mls	lr, r9, r0, lr
 8000bf0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000bf4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000bf8:	45a6      	cmp	lr, r4
 8000bfa:	fa02 f201 	lsl.w	r2, r2, r1
 8000bfe:	d909      	bls.n	8000c14 <__udivmoddi4+0x1a0>
 8000c00:	193c      	adds	r4, r7, r4
 8000c02:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000c06:	f080 809c 	bcs.w	8000d42 <__udivmoddi4+0x2ce>
 8000c0a:	45a6      	cmp	lr, r4
 8000c0c:	f240 8099 	bls.w	8000d42 <__udivmoddi4+0x2ce>
 8000c10:	3802      	subs	r0, #2
 8000c12:	443c      	add	r4, r7
 8000c14:	eba4 040e 	sub.w	r4, r4, lr
 8000c18:	fa1f fe83 	uxth.w	lr, r3
 8000c1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c20:	fb09 4413 	mls	r4, r9, r3, r4
 8000c24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c2c:	45a4      	cmp	ip, r4
 8000c2e:	d908      	bls.n	8000c42 <__udivmoddi4+0x1ce>
 8000c30:	193c      	adds	r4, r7, r4
 8000c32:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000c36:	f080 8082 	bcs.w	8000d3e <__udivmoddi4+0x2ca>
 8000c3a:	45a4      	cmp	ip, r4
 8000c3c:	d97f      	bls.n	8000d3e <__udivmoddi4+0x2ca>
 8000c3e:	3b02      	subs	r3, #2
 8000c40:	443c      	add	r4, r7
 8000c42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c46:	eba4 040c 	sub.w	r4, r4, ip
 8000c4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c4e:	4564      	cmp	r4, ip
 8000c50:	4673      	mov	r3, lr
 8000c52:	46e1      	mov	r9, ip
 8000c54:	d362      	bcc.n	8000d1c <__udivmoddi4+0x2a8>
 8000c56:	d05f      	beq.n	8000d18 <__udivmoddi4+0x2a4>
 8000c58:	b15d      	cbz	r5, 8000c72 <__udivmoddi4+0x1fe>
 8000c5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000c5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000c62:	fa04 f606 	lsl.w	r6, r4, r6
 8000c66:	fa22 f301 	lsr.w	r3, r2, r1
 8000c6a:	431e      	orrs	r6, r3
 8000c6c:	40cc      	lsrs	r4, r1
 8000c6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000c72:	2100      	movs	r1, #0
 8000c74:	e74f      	b.n	8000b16 <__udivmoddi4+0xa2>
 8000c76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c7a:	0c01      	lsrs	r1, r0, #16
 8000c7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c80:	b280      	uxth	r0, r0
 8000c82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c86:	463b      	mov	r3, r7
 8000c88:	4638      	mov	r0, r7
 8000c8a:	463c      	mov	r4, r7
 8000c8c:	46b8      	mov	r8, r7
 8000c8e:	46be      	mov	lr, r7
 8000c90:	2620      	movs	r6, #32
 8000c92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c96:	eba2 0208 	sub.w	r2, r2, r8
 8000c9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c9e:	e766      	b.n	8000b6e <__udivmoddi4+0xfa>
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	e718      	b.n	8000ad6 <__udivmoddi4+0x62>
 8000ca4:	4610      	mov	r0, r2
 8000ca6:	e72c      	b.n	8000b02 <__udivmoddi4+0x8e>
 8000ca8:	f1c6 0220 	rsb	r2, r6, #32
 8000cac:	fa2e f302 	lsr.w	r3, lr, r2
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	40b1      	lsls	r1, r6
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cc2:	b2bc      	uxth	r4, r7
 8000cc4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000cc8:	0c11      	lsrs	r1, r2, #16
 8000cca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cce:	fb08 f904 	mul.w	r9, r8, r4
 8000cd2:	40b0      	lsls	r0, r6
 8000cd4:	4589      	cmp	r9, r1
 8000cd6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000cda:	b280      	uxth	r0, r0
 8000cdc:	d93e      	bls.n	8000d5c <__udivmoddi4+0x2e8>
 8000cde:	1879      	adds	r1, r7, r1
 8000ce0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000ce4:	d201      	bcs.n	8000cea <__udivmoddi4+0x276>
 8000ce6:	4589      	cmp	r9, r1
 8000ce8:	d81f      	bhi.n	8000d2a <__udivmoddi4+0x2b6>
 8000cea:	eba1 0109 	sub.w	r1, r1, r9
 8000cee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cf2:	fb09 f804 	mul.w	r8, r9, r4
 8000cf6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cfa:	b292      	uxth	r2, r2
 8000cfc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d00:	4542      	cmp	r2, r8
 8000d02:	d229      	bcs.n	8000d58 <__udivmoddi4+0x2e4>
 8000d04:	18ba      	adds	r2, r7, r2
 8000d06:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000d0a:	d2c4      	bcs.n	8000c96 <__udivmoddi4+0x222>
 8000d0c:	4542      	cmp	r2, r8
 8000d0e:	d2c2      	bcs.n	8000c96 <__udivmoddi4+0x222>
 8000d10:	f1a9 0102 	sub.w	r1, r9, #2
 8000d14:	443a      	add	r2, r7
 8000d16:	e7be      	b.n	8000c96 <__udivmoddi4+0x222>
 8000d18:	45f0      	cmp	r8, lr
 8000d1a:	d29d      	bcs.n	8000c58 <__udivmoddi4+0x1e4>
 8000d1c:	ebbe 0302 	subs.w	r3, lr, r2
 8000d20:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d24:	3801      	subs	r0, #1
 8000d26:	46e1      	mov	r9, ip
 8000d28:	e796      	b.n	8000c58 <__udivmoddi4+0x1e4>
 8000d2a:	eba7 0909 	sub.w	r9, r7, r9
 8000d2e:	4449      	add	r1, r9
 8000d30:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d34:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d38:	fb09 f804 	mul.w	r8, r9, r4
 8000d3c:	e7db      	b.n	8000cf6 <__udivmoddi4+0x282>
 8000d3e:	4673      	mov	r3, lr
 8000d40:	e77f      	b.n	8000c42 <__udivmoddi4+0x1ce>
 8000d42:	4650      	mov	r0, sl
 8000d44:	e766      	b.n	8000c14 <__udivmoddi4+0x1a0>
 8000d46:	4608      	mov	r0, r1
 8000d48:	e6fd      	b.n	8000b46 <__udivmoddi4+0xd2>
 8000d4a:	443b      	add	r3, r7
 8000d4c:	3a02      	subs	r2, #2
 8000d4e:	e733      	b.n	8000bb8 <__udivmoddi4+0x144>
 8000d50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d54:	443b      	add	r3, r7
 8000d56:	e71c      	b.n	8000b92 <__udivmoddi4+0x11e>
 8000d58:	4649      	mov	r1, r9
 8000d5a:	e79c      	b.n	8000c96 <__udivmoddi4+0x222>
 8000d5c:	eba1 0109 	sub.w	r1, r1, r9
 8000d60:	46c4      	mov	ip, r8
 8000d62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d66:	fb09 f804 	mul.w	r8, r9, r4
 8000d6a:	e7c4      	b.n	8000cf6 <__udivmoddi4+0x282>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d74:	f000 fb9c 	bl	80014b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d78:	f000 f864 	bl	8000e44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d7c:	f000 f924 	bl	8000fc8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d80:	f000 f8f4 	bl	8000f6c <MX_I2C1_Init>
  MX_USB_HOST_Init();
 8000d84:	f007 f8d8 	bl	8007f38 <MX_USB_HOST_Init>
  MX_DAC_Init();
 8000d88:	f000 f8c6 	bl	8000f18 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */

  HAL_DAC_Start(&hdac, DAC_CHANNEL_1); // start DAC
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4828      	ldr	r0, [pc, #160]	@ (8000e30 <main+0xc0>)
 8000d90:	f000 fd57 	bl	8001842 <HAL_DAC_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  gDOR = gValue *(4096)/3.3; //conver analog to digital
 8000d94:	4b27      	ldr	r3, [pc, #156]	@ (8000e34 <main+0xc4>)
 8000d96:	edd3 7a00 	vldr	s15, [r3]
 8000d9a:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8000e38 <main+0xc8>
 8000d9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000da2:	ee17 0a90 	vmov	r0, s15
 8000da6:	f7ff fb73 	bl	8000490 <__aeabi_f2d>
 8000daa:	a31d      	add	r3, pc, #116	@ (adr r3, 8000e20 <main+0xb0>)
 8000dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db0:	f7ff fcf0 	bl	8000794 <__aeabi_ddiv>
 8000db4:	4602      	mov	r2, r0
 8000db6:	460b      	mov	r3, r1
 8000db8:	4610      	mov	r0, r2
 8000dba:	4619      	mov	r1, r3
 8000dbc:	f7ff fdd2 	bl	8000964 <__aeabi_d2uiz>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	4a1e      	ldr	r2, [pc, #120]	@ (8000e3c <main+0xcc>)
 8000dc4:	6013      	str	r3, [r2, #0]
	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, gDOR);
 8000dc6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e3c <main+0xcc>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4818      	ldr	r0, [pc, #96]	@ (8000e30 <main+0xc0>)
 8000dd0:	f000 fd8e 	bl	80018f0 <HAL_DAC_SetValue>

	  gValue += 0.01; // increment analog value
 8000dd4:	4b17      	ldr	r3, [pc, #92]	@ (8000e34 <main+0xc4>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fb59 	bl	8000490 <__aeabi_f2d>
 8000dde:	a312      	add	r3, pc, #72	@ (adr r3, 8000e28 <main+0xb8>)
 8000de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000de4:	f7ff f9f6 	bl	80001d4 <__adddf3>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4610      	mov	r0, r2
 8000dee:	4619      	mov	r1, r3
 8000df0:	f7ff fdd8 	bl	80009a4 <__aeabi_d2f>
 8000df4:	4603      	mov	r3, r0
 8000df6:	4a0f      	ldr	r2, [pc, #60]	@ (8000e34 <main+0xc4>)
 8000df8:	6013      	str	r3, [r2, #0]

	  //check if analog value doesnt exceed 3.3V

	  if(gValue >3){
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000e34 <main+0xc4>)
 8000dfc:	edd3 7a00 	vldr	s15, [r3]
 8000e00:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8000e04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e0c:	dd02      	ble.n	8000e14 <main+0xa4>
		  gValue = 0.2;
 8000e0e:	4b09      	ldr	r3, [pc, #36]	@ (8000e34 <main+0xc4>)
 8000e10:	4a0b      	ldr	r2, [pc, #44]	@ (8000e40 <main+0xd0>)
 8000e12:	601a      	str	r2, [r3, #0]
	  }
	  HAL_Delay(1);
 8000e14:	2001      	movs	r0, #1
 8000e16:	f000 fbbd 	bl	8001594 <HAL_Delay>

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000e1a:	f007 f8b3 	bl	8007f84 <MX_USB_HOST_Process>
	  gDOR = gValue *(4096)/3.3; //conver analog to digital
 8000e1e:	e7b9      	b.n	8000d94 <main+0x24>
 8000e20:	66666666 	.word	0x66666666
 8000e24:	400a6666 	.word	0x400a6666
 8000e28:	47ae147b 	.word	0x47ae147b
 8000e2c:	3f847ae1 	.word	0x3f847ae1
 8000e30:	2000009c 	.word	0x2000009c
 8000e34:	20000000 	.word	0x20000000
 8000e38:	45800000 	.word	0x45800000
 8000e3c:	20000104 	.word	0x20000104
 8000e40:	3e4ccccd 	.word	0x3e4ccccd

08000e44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b094      	sub	sp, #80	@ 0x50
 8000e48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e4a:	f107 0320 	add.w	r3, r7, #32
 8000e4e:	2230      	movs	r2, #48	@ 0x30
 8000e50:	2100      	movs	r1, #0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f007 fc38 	bl	80086c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e58:	f107 030c 	add.w	r3, r7, #12
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	4b28      	ldr	r3, [pc, #160]	@ (8000f10 <SystemClock_Config+0xcc>)
 8000e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e70:	4a27      	ldr	r2, [pc, #156]	@ (8000f10 <SystemClock_Config+0xcc>)
 8000e72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e76:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e78:	4b25      	ldr	r3, [pc, #148]	@ (8000f10 <SystemClock_Config+0xcc>)
 8000e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e84:	2300      	movs	r3, #0
 8000e86:	607b      	str	r3, [r7, #4]
 8000e88:	4b22      	ldr	r3, [pc, #136]	@ (8000f14 <SystemClock_Config+0xd0>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a21      	ldr	r2, [pc, #132]	@ (8000f14 <SystemClock_Config+0xd0>)
 8000e8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e92:	6013      	str	r3, [r2, #0]
 8000e94:	4b1f      	ldr	r3, [pc, #124]	@ (8000f14 <SystemClock_Config+0xd0>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ea4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ea8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000eb4:	2308      	movs	r3, #8
 8000eb6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000eb8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000ebc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ec2:	2307      	movs	r3, #7
 8000ec4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec6:	f107 0320 	add.w	r3, r7, #32
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f003 f9c2 	bl	8004254 <HAL_RCC_OscConfig>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000ed6:	f000 f985 	bl	80011e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eda:	230f      	movs	r3, #15
 8000edc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ee6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000eea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000eec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ef0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ef2:	f107 030c 	add.w	r3, r7, #12
 8000ef6:	2105      	movs	r1, #5
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f003 fc23 	bl	8004744 <HAL_RCC_ClockConfig>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f04:	f000 f96e 	bl	80011e4 <Error_Handler>
  }
}
 8000f08:	bf00      	nop
 8000f0a:	3750      	adds	r7, #80	@ 0x50
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40007000 	.word	0x40007000

08000f18 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f1e:	463b      	mov	r3, r7
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000f26:	4b0f      	ldr	r3, [pc, #60]	@ (8000f64 <MX_DAC_Init+0x4c>)
 8000f28:	4a0f      	ldr	r2, [pc, #60]	@ (8000f68 <MX_DAC_Init+0x50>)
 8000f2a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000f2c:	480d      	ldr	r0, [pc, #52]	@ (8000f64 <MX_DAC_Init+0x4c>)
 8000f2e:	f000 fc66 	bl	80017fe <HAL_DAC_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000f38:	f000 f954 	bl	80011e4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f44:	463b      	mov	r3, r7
 8000f46:	2200      	movs	r2, #0
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4806      	ldr	r0, [pc, #24]	@ (8000f64 <MX_DAC_Init+0x4c>)
 8000f4c:	f000 fcfa 	bl	8001944 <HAL_DAC_ConfigChannel>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000f56:	f000 f945 	bl	80011e4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	2000009c 	.word	0x2000009c
 8000f68:	40007400 	.word	0x40007400

08000f6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f70:	4b12      	ldr	r3, [pc, #72]	@ (8000fbc <MX_I2C1_Init+0x50>)
 8000f72:	4a13      	ldr	r2, [pc, #76]	@ (8000fc0 <MX_I2C1_Init+0x54>)
 8000f74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f76:	4b11      	ldr	r3, [pc, #68]	@ (8000fbc <MX_I2C1_Init+0x50>)
 8000f78:	4a12      	ldr	r2, [pc, #72]	@ (8000fc4 <MX_I2C1_Init+0x58>)
 8000f7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fbc <MX_I2C1_Init+0x50>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f82:	4b0e      	ldr	r3, [pc, #56]	@ (8000fbc <MX_I2C1_Init+0x50>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f88:	4b0c      	ldr	r3, [pc, #48]	@ (8000fbc <MX_I2C1_Init+0x50>)
 8000f8a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f8e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f90:	4b0a      	ldr	r3, [pc, #40]	@ (8000fbc <MX_I2C1_Init+0x50>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f96:	4b09      	ldr	r3, [pc, #36]	@ (8000fbc <MX_I2C1_Init+0x50>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f9c:	4b07      	ldr	r3, [pc, #28]	@ (8000fbc <MX_I2C1_Init+0x50>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fa2:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <MX_I2C1_Init+0x50>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fa8:	4804      	ldr	r0, [pc, #16]	@ (8000fbc <MX_I2C1_Init+0x50>)
 8000faa:	f003 f80f 	bl	8003fcc <HAL_I2C_Init>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fb4:	f000 f916 	bl	80011e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	200000b0 	.word	0x200000b0
 8000fc0:	40005400 	.word	0x40005400
 8000fc4:	000186a0 	.word	0x000186a0

08000fc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08c      	sub	sp, #48	@ 0x30
 8000fcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fce:	f107 031c 	add.w	r3, r7, #28
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
 8000fdc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61bb      	str	r3, [r7, #24]
 8000fe2:	4b7a      	ldr	r3, [pc, #488]	@ (80011cc <MX_GPIO_Init+0x204>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe6:	4a79      	ldr	r2, [pc, #484]	@ (80011cc <MX_GPIO_Init+0x204>)
 8000fe8:	f043 0310 	orr.w	r3, r3, #16
 8000fec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fee:	4b77      	ldr	r3, [pc, #476]	@ (80011cc <MX_GPIO_Init+0x204>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff2:	f003 0310 	and.w	r3, r3, #16
 8000ff6:	61bb      	str	r3, [r7, #24]
 8000ff8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
 8000ffe:	4b73      	ldr	r3, [pc, #460]	@ (80011cc <MX_GPIO_Init+0x204>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	4a72      	ldr	r2, [pc, #456]	@ (80011cc <MX_GPIO_Init+0x204>)
 8001004:	f043 0304 	orr.w	r3, r3, #4
 8001008:	6313      	str	r3, [r2, #48]	@ 0x30
 800100a:	4b70      	ldr	r3, [pc, #448]	@ (80011cc <MX_GPIO_Init+0x204>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100e:	f003 0304 	and.w	r3, r3, #4
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	4b6c      	ldr	r3, [pc, #432]	@ (80011cc <MX_GPIO_Init+0x204>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	4a6b      	ldr	r2, [pc, #428]	@ (80011cc <MX_GPIO_Init+0x204>)
 8001020:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001024:	6313      	str	r3, [r2, #48]	@ 0x30
 8001026:	4b69      	ldr	r3, [pc, #420]	@ (80011cc <MX_GPIO_Init+0x204>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	4b65      	ldr	r3, [pc, #404]	@ (80011cc <MX_GPIO_Init+0x204>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	4a64      	ldr	r2, [pc, #400]	@ (80011cc <MX_GPIO_Init+0x204>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6313      	str	r3, [r2, #48]	@ 0x30
 8001042:	4b62      	ldr	r3, [pc, #392]	@ (80011cc <MX_GPIO_Init+0x204>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	4b5e      	ldr	r3, [pc, #376]	@ (80011cc <MX_GPIO_Init+0x204>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	4a5d      	ldr	r2, [pc, #372]	@ (80011cc <MX_GPIO_Init+0x204>)
 8001058:	f043 0302 	orr.w	r3, r3, #2
 800105c:	6313      	str	r3, [r2, #48]	@ 0x30
 800105e:	4b5b      	ldr	r3, [pc, #364]	@ (80011cc <MX_GPIO_Init+0x204>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	4b57      	ldr	r3, [pc, #348]	@ (80011cc <MX_GPIO_Init+0x204>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	4a56      	ldr	r2, [pc, #344]	@ (80011cc <MX_GPIO_Init+0x204>)
 8001074:	f043 0308 	orr.w	r3, r3, #8
 8001078:	6313      	str	r3, [r2, #48]	@ 0x30
 800107a:	4b54      	ldr	r3, [pc, #336]	@ (80011cc <MX_GPIO_Init+0x204>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	f003 0308 	and.w	r3, r3, #8
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001086:	2200      	movs	r2, #0
 8001088:	2108      	movs	r1, #8
 800108a:	4851      	ldr	r0, [pc, #324]	@ (80011d0 <MX_GPIO_Init+0x208>)
 800108c:	f000 fe50 	bl	8001d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001090:	2201      	movs	r2, #1
 8001092:	2101      	movs	r1, #1
 8001094:	484f      	ldr	r0, [pc, #316]	@ (80011d4 <MX_GPIO_Init+0x20c>)
 8001096:	f000 fe4b 	bl	8001d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800109a:	2200      	movs	r2, #0
 800109c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80010a0:	484d      	ldr	r0, [pc, #308]	@ (80011d8 <MX_GPIO_Init+0x210>)
 80010a2:	f000 fe45 	bl	8001d30 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80010a6:	2308      	movs	r3, #8
 80010a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010aa:	2301      	movs	r3, #1
 80010ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b2:	2300      	movs	r3, #0
 80010b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80010b6:	f107 031c 	add.w	r3, r7, #28
 80010ba:	4619      	mov	r1, r3
 80010bc:	4844      	ldr	r0, [pc, #272]	@ (80011d0 <MX_GPIO_Init+0x208>)
 80010be:	f000 fc9b 	bl	80019f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80010c2:	2301      	movs	r3, #1
 80010c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c6:	2301      	movs	r3, #1
 80010c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2300      	movs	r3, #0
 80010d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80010d2:	f107 031c 	add.w	r3, r7, #28
 80010d6:	4619      	mov	r1, r3
 80010d8:	483e      	ldr	r0, [pc, #248]	@ (80011d4 <MX_GPIO_Init+0x20c>)
 80010da:	f000 fc8d 	bl	80019f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80010de:	2308      	movs	r3, #8
 80010e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	2302      	movs	r3, #2
 80010e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ea:	2300      	movs	r3, #0
 80010ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010ee:	2305      	movs	r3, #5
 80010f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80010f2:	f107 031c 	add.w	r3, r7, #28
 80010f6:	4619      	mov	r1, r3
 80010f8:	4836      	ldr	r0, [pc, #216]	@ (80011d4 <MX_GPIO_Init+0x20c>)
 80010fa:	f000 fc7d 	bl	80019f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010fe:	2301      	movs	r3, #1
 8001100:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001102:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001106:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800110c:	f107 031c 	add.w	r3, r7, #28
 8001110:	4619      	mov	r1, r3
 8001112:	4832      	ldr	r0, [pc, #200]	@ (80011dc <MX_GPIO_Init+0x214>)
 8001114:	f000 fc70 	bl	80019f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001118:	2304      	movs	r3, #4
 800111a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800111c:	2300      	movs	r3, #0
 800111e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001124:	f107 031c 	add.w	r3, r7, #28
 8001128:	4619      	mov	r1, r3
 800112a:	482d      	ldr	r0, [pc, #180]	@ (80011e0 <MX_GPIO_Init+0x218>)
 800112c:	f000 fc64 	bl	80019f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001130:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001134:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001136:	2302      	movs	r3, #2
 8001138:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113e:	2300      	movs	r3, #0
 8001140:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001142:	2305      	movs	r3, #5
 8001144:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001146:	f107 031c 	add.w	r3, r7, #28
 800114a:	4619      	mov	r1, r3
 800114c:	4824      	ldr	r0, [pc, #144]	@ (80011e0 <MX_GPIO_Init+0x218>)
 800114e:	f000 fc53 	bl	80019f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001152:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001156:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001158:	2301      	movs	r3, #1
 800115a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001160:	2300      	movs	r3, #0
 8001162:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001164:	f107 031c 	add.w	r3, r7, #28
 8001168:	4619      	mov	r1, r3
 800116a:	481b      	ldr	r0, [pc, #108]	@ (80011d8 <MX_GPIO_Init+0x210>)
 800116c:	f000 fc44 	bl	80019f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001170:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001174:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2300      	movs	r3, #0
 8001180:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001182:	2306      	movs	r3, #6
 8001184:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001186:	f107 031c 	add.w	r3, r7, #28
 800118a:	4619      	mov	r1, r3
 800118c:	4811      	ldr	r0, [pc, #68]	@ (80011d4 <MX_GPIO_Init+0x20c>)
 800118e:	f000 fc33 	bl	80019f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001192:	2320      	movs	r3, #32
 8001194:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001196:	2300      	movs	r3, #0
 8001198:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800119e:	f107 031c 	add.w	r3, r7, #28
 80011a2:	4619      	mov	r1, r3
 80011a4:	480c      	ldr	r0, [pc, #48]	@ (80011d8 <MX_GPIO_Init+0x210>)
 80011a6:	f000 fc27 	bl	80019f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80011aa:	2302      	movs	r3, #2
 80011ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80011ae:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80011b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80011b8:	f107 031c 	add.w	r3, r7, #28
 80011bc:	4619      	mov	r1, r3
 80011be:	4804      	ldr	r0, [pc, #16]	@ (80011d0 <MX_GPIO_Init+0x208>)
 80011c0:	f000 fc1a 	bl	80019f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80011c4:	bf00      	nop
 80011c6:	3730      	adds	r7, #48	@ 0x30
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40021000 	.word	0x40021000
 80011d4:	40020800 	.word	0x40020800
 80011d8:	40020c00 	.word	0x40020c00
 80011dc:	40020000 	.word	0x40020000
 80011e0:	40020400 	.word	0x40020400

080011e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e8:	b672      	cpsid	i
}
 80011ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ec:	bf00      	nop
 80011ee:	e7fd      	b.n	80011ec <Error_Handler+0x8>

080011f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	4b10      	ldr	r3, [pc, #64]	@ (800123c <HAL_MspInit+0x4c>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011fe:	4a0f      	ldr	r2, [pc, #60]	@ (800123c <HAL_MspInit+0x4c>)
 8001200:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001204:	6453      	str	r3, [r2, #68]	@ 0x44
 8001206:	4b0d      	ldr	r3, [pc, #52]	@ (800123c <HAL_MspInit+0x4c>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800120a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	603b      	str	r3, [r7, #0]
 8001216:	4b09      	ldr	r3, [pc, #36]	@ (800123c <HAL_MspInit+0x4c>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121a:	4a08      	ldr	r2, [pc, #32]	@ (800123c <HAL_MspInit+0x4c>)
 800121c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001220:	6413      	str	r3, [r2, #64]	@ 0x40
 8001222:	4b06      	ldr	r3, [pc, #24]	@ (800123c <HAL_MspInit+0x4c>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001226:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800122a:	603b      	str	r3, [r7, #0]
 800122c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800122e:	2007      	movs	r0, #7
 8001230:	f000 faa4 	bl	800177c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40023800 	.word	0x40023800

08001240 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08a      	sub	sp, #40	@ 0x28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a17      	ldr	r2, [pc, #92]	@ (80012bc <HAL_DAC_MspInit+0x7c>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d127      	bne.n	80012b2 <HAL_DAC_MspInit+0x72>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
 8001266:	4b16      	ldr	r3, [pc, #88]	@ (80012c0 <HAL_DAC_MspInit+0x80>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126a:	4a15      	ldr	r2, [pc, #84]	@ (80012c0 <HAL_DAC_MspInit+0x80>)
 800126c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001270:	6413      	str	r3, [r2, #64]	@ 0x40
 8001272:	4b13      	ldr	r3, [pc, #76]	@ (80012c0 <HAL_DAC_MspInit+0x80>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001276:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	4b0f      	ldr	r3, [pc, #60]	@ (80012c0 <HAL_DAC_MspInit+0x80>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	4a0e      	ldr	r2, [pc, #56]	@ (80012c0 <HAL_DAC_MspInit+0x80>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6313      	str	r3, [r2, #48]	@ 0x30
 800128e:	4b0c      	ldr	r3, [pc, #48]	@ (80012c0 <HAL_DAC_MspInit+0x80>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800129a:	2310      	movs	r3, #16
 800129c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800129e:	2303      	movs	r3, #3
 80012a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	4619      	mov	r1, r3
 80012ac:	4805      	ldr	r0, [pc, #20]	@ (80012c4 <HAL_DAC_MspInit+0x84>)
 80012ae:	f000 fba3 	bl	80019f8 <HAL_GPIO_Init>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 80012b2:	bf00      	nop
 80012b4:	3728      	adds	r7, #40	@ 0x28
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40007400 	.word	0x40007400
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40020000 	.word	0x40020000

080012c8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	@ 0x28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a19      	ldr	r2, [pc, #100]	@ (800134c <HAL_I2C_MspInit+0x84>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d12c      	bne.n	8001344 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	4b18      	ldr	r3, [pc, #96]	@ (8001350 <HAL_I2C_MspInit+0x88>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	4a17      	ldr	r2, [pc, #92]	@ (8001350 <HAL_I2C_MspInit+0x88>)
 80012f4:	f043 0302 	orr.w	r3, r3, #2
 80012f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012fa:	4b15      	ldr	r3, [pc, #84]	@ (8001350 <HAL_I2C_MspInit+0x88>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001306:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800130a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800130c:	2312      	movs	r3, #18
 800130e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001310:	2301      	movs	r3, #1
 8001312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001314:	2300      	movs	r3, #0
 8001316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001318:	2304      	movs	r3, #4
 800131a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4619      	mov	r1, r3
 8001322:	480c      	ldr	r0, [pc, #48]	@ (8001354 <HAL_I2C_MspInit+0x8c>)
 8001324:	f000 fb68 	bl	80019f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	4b08      	ldr	r3, [pc, #32]	@ (8001350 <HAL_I2C_MspInit+0x88>)
 800132e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001330:	4a07      	ldr	r2, [pc, #28]	@ (8001350 <HAL_I2C_MspInit+0x88>)
 8001332:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001336:	6413      	str	r3, [r2, #64]	@ 0x40
 8001338:	4b05      	ldr	r3, [pc, #20]	@ (8001350 <HAL_I2C_MspInit+0x88>)
 800133a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001344:	bf00      	nop
 8001346:	3728      	adds	r7, #40	@ 0x28
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40005400 	.word	0x40005400
 8001350:	40023800 	.word	0x40023800
 8001354:	40020400 	.word	0x40020400

08001358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800135c:	bf00      	nop
 800135e:	e7fd      	b.n	800135c <NMI_Handler+0x4>

08001360 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001364:	bf00      	nop
 8001366:	e7fd      	b.n	8001364 <HardFault_Handler+0x4>

08001368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800136c:	bf00      	nop
 800136e:	e7fd      	b.n	800136c <MemManage_Handler+0x4>

08001370 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <BusFault_Handler+0x4>

08001378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <UsageFault_Handler+0x4>

08001380 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ae:	f000 f8d1 	bl	8001554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
	...

080013b8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80013bc:	4802      	ldr	r0, [pc, #8]	@ (80013c8 <OTG_FS_IRQHandler+0x10>)
 80013be:	f000 ffb1 	bl	8002324 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	200004ec 	.word	0x200004ec

080013cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013d4:	4a14      	ldr	r2, [pc, #80]	@ (8001428 <_sbrk+0x5c>)
 80013d6:	4b15      	ldr	r3, [pc, #84]	@ (800142c <_sbrk+0x60>)
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013e0:	4b13      	ldr	r3, [pc, #76]	@ (8001430 <_sbrk+0x64>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d102      	bne.n	80013ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013e8:	4b11      	ldr	r3, [pc, #68]	@ (8001430 <_sbrk+0x64>)
 80013ea:	4a12      	ldr	r2, [pc, #72]	@ (8001434 <_sbrk+0x68>)
 80013ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ee:	4b10      	ldr	r3, [pc, #64]	@ (8001430 <_sbrk+0x64>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4413      	add	r3, r2
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d207      	bcs.n	800140c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013fc:	f007 f97c 	bl	80086f8 <__errno>
 8001400:	4603      	mov	r3, r0
 8001402:	220c      	movs	r2, #12
 8001404:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001406:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800140a:	e009      	b.n	8001420 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800140c:	4b08      	ldr	r3, [pc, #32]	@ (8001430 <_sbrk+0x64>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001412:	4b07      	ldr	r3, [pc, #28]	@ (8001430 <_sbrk+0x64>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4413      	add	r3, r2
 800141a:	4a05      	ldr	r2, [pc, #20]	@ (8001430 <_sbrk+0x64>)
 800141c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800141e:	68fb      	ldr	r3, [r7, #12]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20020000 	.word	0x20020000
 800142c:	00000400 	.word	0x00000400
 8001430:	20000108 	.word	0x20000108
 8001434:	20000a18 	.word	0x20000a18

08001438 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800143c:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <SystemInit+0x20>)
 800143e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001442:	4a05      	ldr	r2, [pc, #20]	@ (8001458 <SystemInit+0x20>)
 8001444:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001448:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800145c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001494 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001460:	f7ff ffea 	bl	8001438 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001464:	480c      	ldr	r0, [pc, #48]	@ (8001498 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001466:	490d      	ldr	r1, [pc, #52]	@ (800149c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001468:	4a0d      	ldr	r2, [pc, #52]	@ (80014a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800146a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800146c:	e002      	b.n	8001474 <LoopCopyDataInit>

0800146e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800146e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001470:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001472:	3304      	adds	r3, #4

08001474 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001474:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001476:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001478:	d3f9      	bcc.n	800146e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800147a:	4a0a      	ldr	r2, [pc, #40]	@ (80014a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800147c:	4c0a      	ldr	r4, [pc, #40]	@ (80014a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800147e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001480:	e001      	b.n	8001486 <LoopFillZerobss>

08001482 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001482:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001484:	3204      	adds	r2, #4

08001486 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001486:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001488:	d3fb      	bcc.n	8001482 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800148a:	f007 f93b 	bl	8008704 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800148e:	f7ff fc6f 	bl	8000d70 <main>
  bx  lr    
 8001492:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001494:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001498:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800149c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80014a0:	08008828 	.word	0x08008828
  ldr r2, =_sbss
 80014a4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80014a8:	20000a14 	.word	0x20000a14

080014ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014ac:	e7fe      	b.n	80014ac <ADC_IRQHandler>
	...

080014b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014b4:	4b0e      	ldr	r3, [pc, #56]	@ (80014f0 <HAL_Init+0x40>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a0d      	ldr	r2, [pc, #52]	@ (80014f0 <HAL_Init+0x40>)
 80014ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014c0:	4b0b      	ldr	r3, [pc, #44]	@ (80014f0 <HAL_Init+0x40>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a0a      	ldr	r2, [pc, #40]	@ (80014f0 <HAL_Init+0x40>)
 80014c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014cc:	4b08      	ldr	r3, [pc, #32]	@ (80014f0 <HAL_Init+0x40>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a07      	ldr	r2, [pc, #28]	@ (80014f0 <HAL_Init+0x40>)
 80014d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d8:	2003      	movs	r0, #3
 80014da:	f000 f94f 	bl	800177c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014de:	2000      	movs	r0, #0
 80014e0:	f000 f808 	bl	80014f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014e4:	f7ff fe84 	bl	80011f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40023c00 	.word	0x40023c00

080014f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014fc:	4b12      	ldr	r3, [pc, #72]	@ (8001548 <HAL_InitTick+0x54>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4b12      	ldr	r3, [pc, #72]	@ (800154c <HAL_InitTick+0x58>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	4619      	mov	r1, r3
 8001506:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800150a:	fbb3 f3f1 	udiv	r3, r3, r1
 800150e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001512:	4618      	mov	r0, r3
 8001514:	f000 f967 	bl	80017e6 <HAL_SYSTICK_Config>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e00e      	b.n	8001540 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b0f      	cmp	r3, #15
 8001526:	d80a      	bhi.n	800153e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001528:	2200      	movs	r2, #0
 800152a:	6879      	ldr	r1, [r7, #4]
 800152c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001530:	f000 f92f 	bl	8001792 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001534:	4a06      	ldr	r2, [pc, #24]	@ (8001550 <HAL_InitTick+0x5c>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800153a:	2300      	movs	r3, #0
 800153c:	e000      	b.n	8001540 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
}
 8001540:	4618      	mov	r0, r3
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000004 	.word	0x20000004
 800154c:	2000000c 	.word	0x2000000c
 8001550:	20000008 	.word	0x20000008

08001554 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001558:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <HAL_IncTick+0x20>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <HAL_IncTick+0x24>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4413      	add	r3, r2
 8001564:	4a04      	ldr	r2, [pc, #16]	@ (8001578 <HAL_IncTick+0x24>)
 8001566:	6013      	str	r3, [r2, #0]
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	2000000c 	.word	0x2000000c
 8001578:	2000010c 	.word	0x2000010c

0800157c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return uwTick;
 8001580:	4b03      	ldr	r3, [pc, #12]	@ (8001590 <HAL_GetTick+0x14>)
 8001582:	681b      	ldr	r3, [r3, #0]
}
 8001584:	4618      	mov	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	2000010c 	.word	0x2000010c

08001594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800159c:	f7ff ffee 	bl	800157c <HAL_GetTick>
 80015a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80015ac:	d005      	beq.n	80015ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ae:	4b0a      	ldr	r3, [pc, #40]	@ (80015d8 <HAL_Delay+0x44>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	461a      	mov	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015ba:	bf00      	nop
 80015bc:	f7ff ffde 	bl	800157c <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d8f7      	bhi.n	80015bc <HAL_Delay+0x28>
  {
  }
}
 80015cc:	bf00      	nop
 80015ce:	bf00      	nop
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	2000000c 	.word	0x2000000c

080015dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001620 <__NVIC_SetPriorityGrouping+0x44>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015f8:	4013      	ands	r3, r2
 80015fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001604:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001608:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800160c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800160e:	4a04      	ldr	r2, [pc, #16]	@ (8001620 <__NVIC_SetPriorityGrouping+0x44>)
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	60d3      	str	r3, [r2, #12]
}
 8001614:	bf00      	nop
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001628:	4b04      	ldr	r3, [pc, #16]	@ (800163c <__NVIC_GetPriorityGrouping+0x18>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	0a1b      	lsrs	r3, r3, #8
 800162e:	f003 0307 	and.w	r3, r3, #7
}
 8001632:	4618      	mov	r0, r3
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164e:	2b00      	cmp	r3, #0
 8001650:	db0b      	blt.n	800166a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	f003 021f 	and.w	r2, r3, #31
 8001658:	4907      	ldr	r1, [pc, #28]	@ (8001678 <__NVIC_EnableIRQ+0x38>)
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	095b      	lsrs	r3, r3, #5
 8001660:	2001      	movs	r0, #1
 8001662:	fa00 f202 	lsl.w	r2, r0, r2
 8001666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	e000e100 	.word	0xe000e100

0800167c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	6039      	str	r1, [r7, #0]
 8001686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168c:	2b00      	cmp	r3, #0
 800168e:	db0a      	blt.n	80016a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	b2da      	uxtb	r2, r3
 8001694:	490c      	ldr	r1, [pc, #48]	@ (80016c8 <__NVIC_SetPriority+0x4c>)
 8001696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169a:	0112      	lsls	r2, r2, #4
 800169c:	b2d2      	uxtb	r2, r2
 800169e:	440b      	add	r3, r1
 80016a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a4:	e00a      	b.n	80016bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	4908      	ldr	r1, [pc, #32]	@ (80016cc <__NVIC_SetPriority+0x50>)
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	f003 030f 	and.w	r3, r3, #15
 80016b2:	3b04      	subs	r3, #4
 80016b4:	0112      	lsls	r2, r2, #4
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	440b      	add	r3, r1
 80016ba:	761a      	strb	r2, [r3, #24]
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000e100 	.word	0xe000e100
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b089      	sub	sp, #36	@ 0x24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f1c3 0307 	rsb	r3, r3, #7
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	bf28      	it	cs
 80016ee:	2304      	movcs	r3, #4
 80016f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3304      	adds	r3, #4
 80016f6:	2b06      	cmp	r3, #6
 80016f8:	d902      	bls.n	8001700 <NVIC_EncodePriority+0x30>
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3b03      	subs	r3, #3
 80016fe:	e000      	b.n	8001702 <NVIC_EncodePriority+0x32>
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001704:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43da      	mvns	r2, r3
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	401a      	ands	r2, r3
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001718:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	fa01 f303 	lsl.w	r3, r1, r3
 8001722:	43d9      	mvns	r1, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001728:	4313      	orrs	r3, r2
         );
}
 800172a:	4618      	mov	r0, r3
 800172c:	3724      	adds	r7, #36	@ 0x24
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
	...

08001738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3b01      	subs	r3, #1
 8001744:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001748:	d301      	bcc.n	800174e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800174a:	2301      	movs	r3, #1
 800174c:	e00f      	b.n	800176e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800174e:	4a0a      	ldr	r2, [pc, #40]	@ (8001778 <SysTick_Config+0x40>)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3b01      	subs	r3, #1
 8001754:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001756:	210f      	movs	r1, #15
 8001758:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800175c:	f7ff ff8e 	bl	800167c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001760:	4b05      	ldr	r3, [pc, #20]	@ (8001778 <SysTick_Config+0x40>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001766:	4b04      	ldr	r3, [pc, #16]	@ (8001778 <SysTick_Config+0x40>)
 8001768:	2207      	movs	r2, #7
 800176a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	e000e010 	.word	0xe000e010

0800177c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff ff29 	bl	80015dc <__NVIC_SetPriorityGrouping>
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001792:	b580      	push	{r7, lr}
 8001794:	b086      	sub	sp, #24
 8001796:	af00      	add	r7, sp, #0
 8001798:	4603      	mov	r3, r0
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	607a      	str	r2, [r7, #4]
 800179e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017a4:	f7ff ff3e 	bl	8001624 <__NVIC_GetPriorityGrouping>
 80017a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	68b9      	ldr	r1, [r7, #8]
 80017ae:	6978      	ldr	r0, [r7, #20]
 80017b0:	f7ff ff8e 	bl	80016d0 <NVIC_EncodePriority>
 80017b4:	4602      	mov	r2, r0
 80017b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ba:	4611      	mov	r1, r2
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ff5d 	bl	800167c <__NVIC_SetPriority>
}
 80017c2:	bf00      	nop
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	4603      	mov	r3, r0
 80017d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff ff31 	bl	8001640 <__NVIC_EnableIRQ>
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff ffa2 	bl	8001738 <SysTick_Config>
 80017f4:	4603      	mov	r3, r0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d101      	bne.n	8001810 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e014      	b.n	800183a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	791b      	ldrb	r3, [r3, #4]
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d105      	bne.n	8001826 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff fd0d 	bl	8001240 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2202      	movs	r2, #2
 800182a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2201      	movs	r2, #1
 8001836:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
 800184a:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e046      	b.n	80018e4 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	795b      	ldrb	r3, [r3, #5]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d101      	bne.n	8001862 <HAL_DAC_Start+0x20>
 800185e:	2302      	movs	r3, #2
 8001860:	e040      	b.n	80018e4 <HAL_DAC_Start+0xa2>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2201      	movs	r2, #1
 8001866:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2202      	movs	r2, #2
 800186c:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6819      	ldr	r1, [r3, #0]
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	f003 0310 	and.w	r3, r3, #16
 800187a:	2201      	movs	r2, #1
 800187c:	409a      	lsls	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	430a      	orrs	r2, r1
 8001884:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d10f      	bne.n	80018ac <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8001896:	2b3c      	cmp	r3, #60	@ 0x3c
 8001898:	d11d      	bne.n	80018d6 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f042 0201 	orr.w	r2, r2, #1
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	e014      	b.n	80018d6 <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	f003 0310 	and.w	r3, r3, #16
 80018bc:	213c      	movs	r1, #60	@ 0x3c
 80018be:	fa01 f303 	lsl.w	r3, r1, r3
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d107      	bne.n	80018d6 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f042 0202 	orr.w	r2, r2, #2
 80018d4:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2201      	movs	r2, #1
 80018da:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b087      	sub	sp, #28
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
 80018fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e015      	b.n	8001938 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d105      	bne.n	8001924 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4413      	add	r3, r2
 800191e:	3308      	adds	r3, #8
 8001920:	617b      	str	r3, [r7, #20]
 8001922:	e004      	b.n	800192e <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4413      	add	r3, r2
 800192a:	3314      	adds	r3, #20
 800192c:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	461a      	mov	r2, r3
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001936:	2300      	movs	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	371c      	adds	r7, #28
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001944:	b480      	push	{r7}
 8001946:	b089      	sub	sp, #36	@ 0x24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001950:	2300      	movs	r3, #0
 8001952:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d002      	beq.n	8001960 <HAL_DAC_ConfigChannel+0x1c>
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d101      	bne.n	8001964 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e042      	b.n	80019ea <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	795b      	ldrb	r3, [r3, #5]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d101      	bne.n	8001970 <HAL_DAC_ConfigChannel+0x2c>
 800196c:	2302      	movs	r3, #2
 800196e:	e03c      	b.n	80019ea <HAL_DAC_ConfigChannel+0xa6>
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2201      	movs	r2, #1
 8001974:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2202      	movs	r2, #2
 800197a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f003 0310 	and.w	r3, r3, #16
 800198a:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8001992:	43db      	mvns	r3, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4013      	ands	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f003 0310 	and.w	r3, r3, #16
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6819      	ldr	r1, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f003 0310 	and.w	r3, r3, #16
 80019cc:	22c0      	movs	r2, #192	@ 0xc0
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43da      	mvns	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	400a      	ands	r2, r1
 80019da:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2201      	movs	r2, #1
 80019e0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2200      	movs	r2, #0
 80019e6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80019e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3724      	adds	r7, #36	@ 0x24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
	...

080019f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b089      	sub	sp, #36	@ 0x24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
 8001a12:	e16b      	b.n	8001cec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a14:	2201      	movs	r2, #1
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	697a      	ldr	r2, [r7, #20]
 8001a24:	4013      	ands	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	f040 815a 	bne.w	8001ce6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d005      	beq.n	8001a4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d130      	bne.n	8001aac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	2203      	movs	r2, #3
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	68da      	ldr	r2, [r3, #12]
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a80:	2201      	movs	r2, #1
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	091b      	lsrs	r3, r3, #4
 8001a96:	f003 0201 	and.w	r2, r3, #1
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	2b03      	cmp	r3, #3
 8001ab6:	d017      	beq.n	8001ae8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	2203      	movs	r2, #3
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d123      	bne.n	8001b3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	08da      	lsrs	r2, r3, #3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3208      	adds	r2, #8
 8001afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	220f      	movs	r2, #15
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	691a      	ldr	r2, [r3, #16]
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	08da      	lsrs	r2, r3, #3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3208      	adds	r2, #8
 8001b36:	69b9      	ldr	r1, [r7, #24]
 8001b38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	2203      	movs	r2, #3
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4013      	ands	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 0203 	and.w	r2, r3, #3
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f000 80b4 	beq.w	8001ce6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	4b60      	ldr	r3, [pc, #384]	@ (8001d04 <HAL_GPIO_Init+0x30c>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b86:	4a5f      	ldr	r2, [pc, #380]	@ (8001d04 <HAL_GPIO_Init+0x30c>)
 8001b88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b8e:	4b5d      	ldr	r3, [pc, #372]	@ (8001d04 <HAL_GPIO_Init+0x30c>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b9a:	4a5b      	ldr	r2, [pc, #364]	@ (8001d08 <HAL_GPIO_Init+0x310>)
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	089b      	lsrs	r3, r3, #2
 8001ba0:	3302      	adds	r3, #2
 8001ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f003 0303 	and.w	r3, r3, #3
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	220f      	movs	r2, #15
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a52      	ldr	r2, [pc, #328]	@ (8001d0c <HAL_GPIO_Init+0x314>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d02b      	beq.n	8001c1e <HAL_GPIO_Init+0x226>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a51      	ldr	r2, [pc, #324]	@ (8001d10 <HAL_GPIO_Init+0x318>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d025      	beq.n	8001c1a <HAL_GPIO_Init+0x222>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a50      	ldr	r2, [pc, #320]	@ (8001d14 <HAL_GPIO_Init+0x31c>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d01f      	beq.n	8001c16 <HAL_GPIO_Init+0x21e>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a4f      	ldr	r2, [pc, #316]	@ (8001d18 <HAL_GPIO_Init+0x320>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d019      	beq.n	8001c12 <HAL_GPIO_Init+0x21a>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a4e      	ldr	r2, [pc, #312]	@ (8001d1c <HAL_GPIO_Init+0x324>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d013      	beq.n	8001c0e <HAL_GPIO_Init+0x216>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a4d      	ldr	r2, [pc, #308]	@ (8001d20 <HAL_GPIO_Init+0x328>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d00d      	beq.n	8001c0a <HAL_GPIO_Init+0x212>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a4c      	ldr	r2, [pc, #304]	@ (8001d24 <HAL_GPIO_Init+0x32c>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d007      	beq.n	8001c06 <HAL_GPIO_Init+0x20e>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a4b      	ldr	r2, [pc, #300]	@ (8001d28 <HAL_GPIO_Init+0x330>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d101      	bne.n	8001c02 <HAL_GPIO_Init+0x20a>
 8001bfe:	2307      	movs	r3, #7
 8001c00:	e00e      	b.n	8001c20 <HAL_GPIO_Init+0x228>
 8001c02:	2308      	movs	r3, #8
 8001c04:	e00c      	b.n	8001c20 <HAL_GPIO_Init+0x228>
 8001c06:	2306      	movs	r3, #6
 8001c08:	e00a      	b.n	8001c20 <HAL_GPIO_Init+0x228>
 8001c0a:	2305      	movs	r3, #5
 8001c0c:	e008      	b.n	8001c20 <HAL_GPIO_Init+0x228>
 8001c0e:	2304      	movs	r3, #4
 8001c10:	e006      	b.n	8001c20 <HAL_GPIO_Init+0x228>
 8001c12:	2303      	movs	r3, #3
 8001c14:	e004      	b.n	8001c20 <HAL_GPIO_Init+0x228>
 8001c16:	2302      	movs	r3, #2
 8001c18:	e002      	b.n	8001c20 <HAL_GPIO_Init+0x228>
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e000      	b.n	8001c20 <HAL_GPIO_Init+0x228>
 8001c1e:	2300      	movs	r3, #0
 8001c20:	69fa      	ldr	r2, [r7, #28]
 8001c22:	f002 0203 	and.w	r2, r2, #3
 8001c26:	0092      	lsls	r2, r2, #2
 8001c28:	4093      	lsls	r3, r2
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c30:	4935      	ldr	r1, [pc, #212]	@ (8001d08 <HAL_GPIO_Init+0x310>)
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	089b      	lsrs	r3, r3, #2
 8001c36:	3302      	adds	r3, #2
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c3e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d2c <HAL_GPIO_Init+0x334>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	43db      	mvns	r3, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c62:	4a32      	ldr	r2, [pc, #200]	@ (8001d2c <HAL_GPIO_Init+0x334>)
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c68:	4b30      	ldr	r3, [pc, #192]	@ (8001d2c <HAL_GPIO_Init+0x334>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	43db      	mvns	r3, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4013      	ands	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c8c:	4a27      	ldr	r2, [pc, #156]	@ (8001d2c <HAL_GPIO_Init+0x334>)
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c92:	4b26      	ldr	r3, [pc, #152]	@ (8001d2c <HAL_GPIO_Init+0x334>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cb6:	4a1d      	ldr	r2, [pc, #116]	@ (8001d2c <HAL_GPIO_Init+0x334>)
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d2c <HAL_GPIO_Init+0x334>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d003      	beq.n	8001ce0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ce0:	4a12      	ldr	r2, [pc, #72]	@ (8001d2c <HAL_GPIO_Init+0x334>)
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	61fb      	str	r3, [r7, #28]
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	2b0f      	cmp	r3, #15
 8001cf0:	f67f ae90 	bls.w	8001a14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cf4:	bf00      	nop
 8001cf6:	bf00      	nop
 8001cf8:	3724      	adds	r7, #36	@ 0x24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40013800 	.word	0x40013800
 8001d0c:	40020000 	.word	0x40020000
 8001d10:	40020400 	.word	0x40020400
 8001d14:	40020800 	.word	0x40020800
 8001d18:	40020c00 	.word	0x40020c00
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	40021400 	.word	0x40021400
 8001d24:	40021800 	.word	0x40021800
 8001d28:	40021c00 	.word	0x40021c00
 8001d2c:	40013c00 	.word	0x40013c00

08001d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	807b      	strh	r3, [r7, #2]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d40:	787b      	ldrb	r3, [r7, #1]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d46:	887a      	ldrh	r2, [r7, #2]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d4c:	e003      	b.n	8001d56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d4e:	887b      	ldrh	r3, [r7, #2]
 8001d50:	041a      	lsls	r2, r3, #16
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	619a      	str	r2, [r3, #24]
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b086      	sub	sp, #24
 8001d66:	af02      	add	r7, sp, #8
 8001d68:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e059      	b.n	8001e28 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d106      	bne.n	8001d94 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f006 f930 	bl	8007ff4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2203      	movs	r2, #3
 8001d98:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001da2:	d102      	bne.n	8001daa <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f002 ff49 	bl	8004c46 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6818      	ldr	r0, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	7c1a      	ldrb	r2, [r3, #16]
 8001dbc:	f88d 2000 	strb.w	r2, [sp]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dc4:	f002 feca 	bl	8004b5c <USB_CoreInit>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d005      	beq.n	8001dda <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e026      	b.n	8001e28 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2101      	movs	r1, #1
 8001de0:	4618      	mov	r0, r3
 8001de2:	f002 ff41 	bl	8004c68 <USB_SetCurrentMode>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d005      	beq.n	8001df8 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2202      	movs	r2, #2
 8001df0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e017      	b.n	8001e28 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6818      	ldr	r0, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	7c1a      	ldrb	r2, [r3, #16]
 8001e00:	f88d 2000 	strb.w	r2, [sp]
 8001e04:	3304      	adds	r3, #4
 8001e06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e08:	f003 f8e4 	bl	8004fd4 <USB_HostInit>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d005      	beq.n	8001e1e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2202      	movs	r2, #2
 8001e16:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e004      	b.n	8001e28 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001e30:	b590      	push	{r4, r7, lr}
 8001e32:	b08b      	sub	sp, #44	@ 0x2c
 8001e34:	af04      	add	r7, sp, #16
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	4608      	mov	r0, r1
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	4603      	mov	r3, r0
 8001e40:	70fb      	strb	r3, [r7, #3]
 8001e42:	460b      	mov	r3, r1
 8001e44:	70bb      	strb	r3, [r7, #2]
 8001e46:	4613      	mov	r3, r2
 8001e48:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001e4a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001e4c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d101      	bne.n	8001e5c <HAL_HCD_HC_Init+0x2c>
 8001e58:	2302      	movs	r3, #2
 8001e5a:	e09d      	b.n	8001f98 <HAL_HCD_HC_Init+0x168>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001e64:	78fa      	ldrb	r2, [r7, #3]
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	011b      	lsls	r3, r3, #4
 8001e6c:	1a9b      	subs	r3, r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	440b      	add	r3, r1
 8001e72:	3319      	adds	r3, #25
 8001e74:	2200      	movs	r2, #0
 8001e76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001e78:	78fa      	ldrb	r2, [r7, #3]
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	011b      	lsls	r3, r3, #4
 8001e80:	1a9b      	subs	r3, r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	440b      	add	r3, r1
 8001e86:	3314      	adds	r3, #20
 8001e88:	787a      	ldrb	r2, [r7, #1]
 8001e8a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001e8c:	78fa      	ldrb	r2, [r7, #3]
 8001e8e:	6879      	ldr	r1, [r7, #4]
 8001e90:	4613      	mov	r3, r2
 8001e92:	011b      	lsls	r3, r3, #4
 8001e94:	1a9b      	subs	r3, r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	440b      	add	r3, r1
 8001e9a:	3315      	adds	r3, #21
 8001e9c:	78fa      	ldrb	r2, [r7, #3]
 8001e9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001ea0:	78fa      	ldrb	r2, [r7, #3]
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	011b      	lsls	r3, r3, #4
 8001ea8:	1a9b      	subs	r3, r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	440b      	add	r3, r1
 8001eae:	3326      	adds	r3, #38	@ 0x26
 8001eb0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001eb4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001eb6:	78fa      	ldrb	r2, [r7, #3]
 8001eb8:	78bb      	ldrb	r3, [r7, #2]
 8001eba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ebe:	b2d8      	uxtb	r0, r3
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	011b      	lsls	r3, r3, #4
 8001ec6:	1a9b      	subs	r3, r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	440b      	add	r3, r1
 8001ecc:	3316      	adds	r3, #22
 8001ece:	4602      	mov	r2, r0
 8001ed0:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001ed2:	78fb      	ldrb	r3, [r7, #3]
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 fbc8 	bl	800266c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001edc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	da0a      	bge.n	8001efa <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001ee4:	78fa      	ldrb	r2, [r7, #3]
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	011b      	lsls	r3, r3, #4
 8001eec:	1a9b      	subs	r3, r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	3317      	adds	r3, #23
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	701a      	strb	r2, [r3, #0]
 8001ef8:	e009      	b.n	8001f0e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001efa:	78fa      	ldrb	r2, [r7, #3]
 8001efc:	6879      	ldr	r1, [r7, #4]
 8001efe:	4613      	mov	r3, r2
 8001f00:	011b      	lsls	r3, r3, #4
 8001f02:	1a9b      	subs	r3, r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	440b      	add	r3, r1
 8001f08:	3317      	adds	r3, #23
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f003 f9c2 	bl	800529c <USB_GetHostSpeed>
 8001f18:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001f1a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d10b      	bne.n	8001f3a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001f22:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d107      	bne.n	8001f3a <HAL_HCD_HC_Init+0x10a>
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d104      	bne.n	8001f3a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	2bbc      	cmp	r3, #188	@ 0xbc
 8001f34:	d901      	bls.n	8001f3a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001f36:	23bc      	movs	r3, #188	@ 0xbc
 8001f38:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001f3a:	78fa      	ldrb	r2, [r7, #3]
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	011b      	lsls	r3, r3, #4
 8001f42:	1a9b      	subs	r3, r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	440b      	add	r3, r1
 8001f48:	3318      	adds	r3, #24
 8001f4a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001f4e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001f50:	78fa      	ldrb	r2, [r7, #3]
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	b298      	uxth	r0, r3
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	011b      	lsls	r3, r3, #4
 8001f5c:	1a9b      	subs	r3, r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	440b      	add	r3, r1
 8001f62:	3328      	adds	r3, #40	@ 0x28
 8001f64:	4602      	mov	r2, r0
 8001f66:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6818      	ldr	r0, [r3, #0]
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	787c      	ldrb	r4, [r7, #1]
 8001f72:	78ba      	ldrb	r2, [r7, #2]
 8001f74:	78f9      	ldrb	r1, [r7, #3]
 8001f76:	9302      	str	r3, [sp, #8]
 8001f78:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001f7c:	9301      	str	r3, [sp, #4]
 8001f7e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	4623      	mov	r3, r4
 8001f86:	f003 f9b1 	bl	80052ec <USB_HC_Init>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	371c      	adds	r7, #28
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd90      	pop	{r4, r7, pc}

08001fa0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001fac:	2300      	movs	r3, #0
 8001fae:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d101      	bne.n	8001fbe <HAL_HCD_HC_Halt+0x1e>
 8001fba:	2302      	movs	r3, #2
 8001fbc:	e00f      	b.n	8001fde <HAL_HCD_HC_Halt+0x3e>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	78fa      	ldrb	r2, [r7, #3]
 8001fcc:	4611      	mov	r1, r2
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f003 fd43 	bl	8005a5a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	4608      	mov	r0, r1
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	70fb      	strb	r3, [r7, #3]
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	70bb      	strb	r3, [r7, #2]
 8001ffe:	4613      	mov	r3, r2
 8002000:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002002:	78fa      	ldrb	r2, [r7, #3]
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	4613      	mov	r3, r2
 8002008:	011b      	lsls	r3, r3, #4
 800200a:	1a9b      	subs	r3, r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	440b      	add	r3, r1
 8002010:	3317      	adds	r3, #23
 8002012:	78ba      	ldrb	r2, [r7, #2]
 8002014:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002016:	78fa      	ldrb	r2, [r7, #3]
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	4613      	mov	r3, r2
 800201c:	011b      	lsls	r3, r3, #4
 800201e:	1a9b      	subs	r3, r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	440b      	add	r3, r1
 8002024:	3326      	adds	r3, #38	@ 0x26
 8002026:	787a      	ldrb	r2, [r7, #1]
 8002028:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800202a:	7c3b      	ldrb	r3, [r7, #16]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d114      	bne.n	800205a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002030:	78fa      	ldrb	r2, [r7, #3]
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	011b      	lsls	r3, r3, #4
 8002038:	1a9b      	subs	r3, r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	332a      	adds	r3, #42	@ 0x2a
 8002040:	2203      	movs	r2, #3
 8002042:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002044:	78fa      	ldrb	r2, [r7, #3]
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	4613      	mov	r3, r2
 800204a:	011b      	lsls	r3, r3, #4
 800204c:	1a9b      	subs	r3, r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	440b      	add	r3, r1
 8002052:	3319      	adds	r3, #25
 8002054:	7f3a      	ldrb	r2, [r7, #28]
 8002056:	701a      	strb	r2, [r3, #0]
 8002058:	e009      	b.n	800206e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800205a:	78fa      	ldrb	r2, [r7, #3]
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	011b      	lsls	r3, r3, #4
 8002062:	1a9b      	subs	r3, r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	440b      	add	r3, r1
 8002068:	332a      	adds	r3, #42	@ 0x2a
 800206a:	2202      	movs	r2, #2
 800206c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800206e:	787b      	ldrb	r3, [r7, #1]
 8002070:	2b03      	cmp	r3, #3
 8002072:	f200 8102 	bhi.w	800227a <HAL_HCD_HC_SubmitRequest+0x292>
 8002076:	a201      	add	r2, pc, #4	@ (adr r2, 800207c <HAL_HCD_HC_SubmitRequest+0x94>)
 8002078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800207c:	0800208d 	.word	0x0800208d
 8002080:	08002265 	.word	0x08002265
 8002084:	08002151 	.word	0x08002151
 8002088:	080021db 	.word	0x080021db
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800208c:	7c3b      	ldrb	r3, [r7, #16]
 800208e:	2b01      	cmp	r3, #1
 8002090:	f040 80f5 	bne.w	800227e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002094:	78bb      	ldrb	r3, [r7, #2]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d12d      	bne.n	80020f6 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800209a:	8b3b      	ldrh	r3, [r7, #24]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d109      	bne.n	80020b4 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80020a0:	78fa      	ldrb	r2, [r7, #3]
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	4613      	mov	r3, r2
 80020a6:	011b      	lsls	r3, r3, #4
 80020a8:	1a9b      	subs	r3, r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	333d      	adds	r3, #61	@ 0x3d
 80020b0:	2201      	movs	r2, #1
 80020b2:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80020b4:	78fa      	ldrb	r2, [r7, #3]
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	4613      	mov	r3, r2
 80020ba:	011b      	lsls	r3, r3, #4
 80020bc:	1a9b      	subs	r3, r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	440b      	add	r3, r1
 80020c2:	333d      	adds	r3, #61	@ 0x3d
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10a      	bne.n	80020e0 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020ca:	78fa      	ldrb	r2, [r7, #3]
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	011b      	lsls	r3, r3, #4
 80020d2:	1a9b      	subs	r3, r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	440b      	add	r3, r1
 80020d8:	332a      	adds	r3, #42	@ 0x2a
 80020da:	2200      	movs	r2, #0
 80020dc:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80020de:	e0ce      	b.n	800227e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020e0:	78fa      	ldrb	r2, [r7, #3]
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	4613      	mov	r3, r2
 80020e6:	011b      	lsls	r3, r3, #4
 80020e8:	1a9b      	subs	r3, r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	440b      	add	r3, r1
 80020ee:	332a      	adds	r3, #42	@ 0x2a
 80020f0:	2202      	movs	r2, #2
 80020f2:	701a      	strb	r2, [r3, #0]
      break;
 80020f4:	e0c3      	b.n	800227e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80020f6:	78fa      	ldrb	r2, [r7, #3]
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	4613      	mov	r3, r2
 80020fc:	011b      	lsls	r3, r3, #4
 80020fe:	1a9b      	subs	r3, r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	440b      	add	r3, r1
 8002104:	331a      	adds	r3, #26
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b01      	cmp	r3, #1
 800210a:	f040 80b8 	bne.w	800227e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800210e:	78fa      	ldrb	r2, [r7, #3]
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	011b      	lsls	r3, r3, #4
 8002116:	1a9b      	subs	r3, r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	440b      	add	r3, r1
 800211c:	333c      	adds	r3, #60	@ 0x3c
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d10a      	bne.n	800213a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002124:	78fa      	ldrb	r2, [r7, #3]
 8002126:	6879      	ldr	r1, [r7, #4]
 8002128:	4613      	mov	r3, r2
 800212a:	011b      	lsls	r3, r3, #4
 800212c:	1a9b      	subs	r3, r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	332a      	adds	r3, #42	@ 0x2a
 8002134:	2200      	movs	r2, #0
 8002136:	701a      	strb	r2, [r3, #0]
      break;
 8002138:	e0a1      	b.n	800227e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800213a:	78fa      	ldrb	r2, [r7, #3]
 800213c:	6879      	ldr	r1, [r7, #4]
 800213e:	4613      	mov	r3, r2
 8002140:	011b      	lsls	r3, r3, #4
 8002142:	1a9b      	subs	r3, r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	440b      	add	r3, r1
 8002148:	332a      	adds	r3, #42	@ 0x2a
 800214a:	2202      	movs	r2, #2
 800214c:	701a      	strb	r2, [r3, #0]
      break;
 800214e:	e096      	b.n	800227e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002150:	78bb      	ldrb	r3, [r7, #2]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d120      	bne.n	8002198 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002156:	78fa      	ldrb	r2, [r7, #3]
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	4613      	mov	r3, r2
 800215c:	011b      	lsls	r3, r3, #4
 800215e:	1a9b      	subs	r3, r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	440b      	add	r3, r1
 8002164:	333d      	adds	r3, #61	@ 0x3d
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10a      	bne.n	8002182 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800216c:	78fa      	ldrb	r2, [r7, #3]
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	4613      	mov	r3, r2
 8002172:	011b      	lsls	r3, r3, #4
 8002174:	1a9b      	subs	r3, r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	440b      	add	r3, r1
 800217a:	332a      	adds	r3, #42	@ 0x2a
 800217c:	2200      	movs	r2, #0
 800217e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002180:	e07e      	b.n	8002280 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002182:	78fa      	ldrb	r2, [r7, #3]
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	4613      	mov	r3, r2
 8002188:	011b      	lsls	r3, r3, #4
 800218a:	1a9b      	subs	r3, r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	440b      	add	r3, r1
 8002190:	332a      	adds	r3, #42	@ 0x2a
 8002192:	2202      	movs	r2, #2
 8002194:	701a      	strb	r2, [r3, #0]
      break;
 8002196:	e073      	b.n	8002280 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002198:	78fa      	ldrb	r2, [r7, #3]
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	4613      	mov	r3, r2
 800219e:	011b      	lsls	r3, r3, #4
 80021a0:	1a9b      	subs	r3, r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	333c      	adds	r3, #60	@ 0x3c
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d10a      	bne.n	80021c4 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021ae:	78fa      	ldrb	r2, [r7, #3]
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	4613      	mov	r3, r2
 80021b4:	011b      	lsls	r3, r3, #4
 80021b6:	1a9b      	subs	r3, r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	440b      	add	r3, r1
 80021bc:	332a      	adds	r3, #42	@ 0x2a
 80021be:	2200      	movs	r2, #0
 80021c0:	701a      	strb	r2, [r3, #0]
      break;
 80021c2:	e05d      	b.n	8002280 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021c4:	78fa      	ldrb	r2, [r7, #3]
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	4613      	mov	r3, r2
 80021ca:	011b      	lsls	r3, r3, #4
 80021cc:	1a9b      	subs	r3, r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	440b      	add	r3, r1
 80021d2:	332a      	adds	r3, #42	@ 0x2a
 80021d4:	2202      	movs	r2, #2
 80021d6:	701a      	strb	r2, [r3, #0]
      break;
 80021d8:	e052      	b.n	8002280 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80021da:	78bb      	ldrb	r3, [r7, #2]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d120      	bne.n	8002222 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80021e0:	78fa      	ldrb	r2, [r7, #3]
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	4613      	mov	r3, r2
 80021e6:	011b      	lsls	r3, r3, #4
 80021e8:	1a9b      	subs	r3, r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	440b      	add	r3, r1
 80021ee:	333d      	adds	r3, #61	@ 0x3d
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10a      	bne.n	800220c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021f6:	78fa      	ldrb	r2, [r7, #3]
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	011b      	lsls	r3, r3, #4
 80021fe:	1a9b      	subs	r3, r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	440b      	add	r3, r1
 8002204:	332a      	adds	r3, #42	@ 0x2a
 8002206:	2200      	movs	r2, #0
 8002208:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800220a:	e039      	b.n	8002280 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800220c:	78fa      	ldrb	r2, [r7, #3]
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	4613      	mov	r3, r2
 8002212:	011b      	lsls	r3, r3, #4
 8002214:	1a9b      	subs	r3, r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	440b      	add	r3, r1
 800221a:	332a      	adds	r3, #42	@ 0x2a
 800221c:	2202      	movs	r2, #2
 800221e:	701a      	strb	r2, [r3, #0]
      break;
 8002220:	e02e      	b.n	8002280 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002222:	78fa      	ldrb	r2, [r7, #3]
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	011b      	lsls	r3, r3, #4
 800222a:	1a9b      	subs	r3, r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	440b      	add	r3, r1
 8002230:	333c      	adds	r3, #60	@ 0x3c
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10a      	bne.n	800224e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002238:	78fa      	ldrb	r2, [r7, #3]
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	4613      	mov	r3, r2
 800223e:	011b      	lsls	r3, r3, #4
 8002240:	1a9b      	subs	r3, r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	440b      	add	r3, r1
 8002246:	332a      	adds	r3, #42	@ 0x2a
 8002248:	2200      	movs	r2, #0
 800224a:	701a      	strb	r2, [r3, #0]
      break;
 800224c:	e018      	b.n	8002280 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800224e:	78fa      	ldrb	r2, [r7, #3]
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	4613      	mov	r3, r2
 8002254:	011b      	lsls	r3, r3, #4
 8002256:	1a9b      	subs	r3, r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	440b      	add	r3, r1
 800225c:	332a      	adds	r3, #42	@ 0x2a
 800225e:	2202      	movs	r2, #2
 8002260:	701a      	strb	r2, [r3, #0]
      break;
 8002262:	e00d      	b.n	8002280 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002264:	78fa      	ldrb	r2, [r7, #3]
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	4613      	mov	r3, r2
 800226a:	011b      	lsls	r3, r3, #4
 800226c:	1a9b      	subs	r3, r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	440b      	add	r3, r1
 8002272:	332a      	adds	r3, #42	@ 0x2a
 8002274:	2200      	movs	r2, #0
 8002276:	701a      	strb	r2, [r3, #0]
      break;
 8002278:	e002      	b.n	8002280 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800227a:	bf00      	nop
 800227c:	e000      	b.n	8002280 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800227e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002280:	78fa      	ldrb	r2, [r7, #3]
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	4613      	mov	r3, r2
 8002286:	011b      	lsls	r3, r3, #4
 8002288:	1a9b      	subs	r3, r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	440b      	add	r3, r1
 800228e:	332c      	adds	r3, #44	@ 0x2c
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002294:	78fa      	ldrb	r2, [r7, #3]
 8002296:	8b39      	ldrh	r1, [r7, #24]
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	011b      	lsls	r3, r3, #4
 800229e:	1a9b      	subs	r3, r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4403      	add	r3, r0
 80022a4:	3334      	adds	r3, #52	@ 0x34
 80022a6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80022a8:	78fa      	ldrb	r2, [r7, #3]
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	4613      	mov	r3, r2
 80022ae:	011b      	lsls	r3, r3, #4
 80022b0:	1a9b      	subs	r3, r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	440b      	add	r3, r1
 80022b6:	334c      	adds	r3, #76	@ 0x4c
 80022b8:	2200      	movs	r2, #0
 80022ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80022bc:	78fa      	ldrb	r2, [r7, #3]
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	011b      	lsls	r3, r3, #4
 80022c4:	1a9b      	subs	r3, r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	440b      	add	r3, r1
 80022ca:	3338      	adds	r3, #56	@ 0x38
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80022d0:	78fa      	ldrb	r2, [r7, #3]
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	4613      	mov	r3, r2
 80022d6:	011b      	lsls	r3, r3, #4
 80022d8:	1a9b      	subs	r3, r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	440b      	add	r3, r1
 80022de:	3315      	adds	r3, #21
 80022e0:	78fa      	ldrb	r2, [r7, #3]
 80022e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80022e4:	78fa      	ldrb	r2, [r7, #3]
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	011b      	lsls	r3, r3, #4
 80022ec:	1a9b      	subs	r3, r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	334d      	adds	r3, #77	@ 0x4d
 80022f4:	2200      	movs	r2, #0
 80022f6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6818      	ldr	r0, [r3, #0]
 80022fc:	78fa      	ldrb	r2, [r7, #3]
 80022fe:	4613      	mov	r3, r2
 8002300:	011b      	lsls	r3, r3, #4
 8002302:	1a9b      	subs	r3, r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	3310      	adds	r3, #16
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	4413      	add	r3, r2
 800230c:	1d19      	adds	r1, r3, #4
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	799b      	ldrb	r3, [r3, #6]
 8002312:	461a      	mov	r2, r3
 8002314:	f003 f916 	bl	8005544 <USB_HC_StartXfer>
 8002318:	4603      	mov	r3, r0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop

08002324 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f002 fe0a 	bl	8004f54 <USB_GetMode>
 8002340:	4603      	mov	r3, r0
 8002342:	2b01      	cmp	r3, #1
 8002344:	f040 80fb 	bne.w	800253e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4618      	mov	r0, r3
 800234e:	f002 fdcd 	bl	8004eec <USB_ReadInterrupts>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 80f1 	beq.w	800253c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f002 fdc4 	bl	8004eec <USB_ReadInterrupts>
 8002364:	4603      	mov	r3, r0
 8002366:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800236a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800236e:	d104      	bne.n	800237a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002378:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f002 fdb4 	bl	8004eec <USB_ReadInterrupts>
 8002384:	4603      	mov	r3, r0
 8002386:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800238a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800238e:	d104      	bne.n	800239a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002398:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f002 fda4 	bl	8004eec <USB_ReadInterrupts>
 80023a4:	4603      	mov	r3, r0
 80023a6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80023aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023ae:	d104      	bne.n	80023ba <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80023b8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f002 fd94 	bl	8004eec <USB_ReadInterrupts>
 80023c4:	4603      	mov	r3, r0
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d103      	bne.n	80023d6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2202      	movs	r2, #2
 80023d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f002 fd86 	bl	8004eec <USB_ReadInterrupts>
 80023e0:	4603      	mov	r3, r0
 80023e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80023e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80023ea:	d120      	bne.n	800242e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80023f4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d113      	bne.n	800242e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002406:	2110      	movs	r1, #16
 8002408:	6938      	ldr	r0, [r7, #16]
 800240a:	f002 fc79 	bl	8004d00 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800240e:	6938      	ldr	r0, [r7, #16]
 8002410:	f002 fca8 	bl	8004d64 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	7a5b      	ldrb	r3, [r3, #9]
 8002418:	2b02      	cmp	r3, #2
 800241a:	d105      	bne.n	8002428 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2101      	movs	r1, #1
 8002422:	4618      	mov	r0, r3
 8002424:	f002 fe9a 	bl	800515c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f005 fe61 	bl	80080f0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f002 fd5a 	bl	8004eec <USB_ReadInterrupts>
 8002438:	4603      	mov	r3, r0
 800243a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800243e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002442:	d102      	bne.n	800244a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f001 fd4d 	bl	8003ee4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f002 fd4c 	bl	8004eec <USB_ReadInterrupts>
 8002454:	4603      	mov	r3, r0
 8002456:	f003 0308 	and.w	r3, r3, #8
 800245a:	2b08      	cmp	r3, #8
 800245c:	d106      	bne.n	800246c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f005 fe2a 	bl	80080b8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2208      	movs	r2, #8
 800246a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f002 fd3b 	bl	8004eec <USB_ReadInterrupts>
 8002476:	4603      	mov	r3, r0
 8002478:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800247c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002480:	d139      	bne.n	80024f6 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f003 fad6 	bl	8005a38 <USB_HC_ReadInterrupt>
 800248c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800248e:	2300      	movs	r3, #0
 8002490:	617b      	str	r3, [r7, #20]
 8002492:	e025      	b.n	80024e0 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	fa22 f303 	lsr.w	r3, r2, r3
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d018      	beq.n	80024da <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	015a      	lsls	r2, r3, #5
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	4413      	add	r3, r2
 80024b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024be:	d106      	bne.n	80024ce <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	4619      	mov	r1, r3
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f905 	bl	80026d6 <HCD_HC_IN_IRQHandler>
 80024cc:	e005      	b.n	80024da <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	4619      	mov	r1, r3
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 ff67 	bl	80033a8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	3301      	adds	r3, #1
 80024de:	617b      	str	r3, [r7, #20]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	795b      	ldrb	r3, [r3, #5]
 80024e4:	461a      	mov	r2, r3
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d3d3      	bcc.n	8002494 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f002 fcf6 	bl	8004eec <USB_ReadInterrupts>
 8002500:	4603      	mov	r3, r0
 8002502:	f003 0310 	and.w	r3, r3, #16
 8002506:	2b10      	cmp	r3, #16
 8002508:	d101      	bne.n	800250e <HAL_HCD_IRQHandler+0x1ea>
 800250a:	2301      	movs	r3, #1
 800250c:	e000      	b.n	8002510 <HAL_HCD_IRQHandler+0x1ec>
 800250e:	2300      	movs	r3, #0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d014      	beq.n	800253e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	699a      	ldr	r2, [r3, #24]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 0210 	bic.w	r2, r2, #16
 8002522:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f001 fbfe 	bl	8003d26 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	699a      	ldr	r2, [r3, #24]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f042 0210 	orr.w	r2, r2, #16
 8002538:	619a      	str	r2, [r3, #24]
 800253a:	e000      	b.n	800253e <HAL_HCD_IRQHandler+0x21a>
      return;
 800253c:	bf00      	nop
    }
  }
}
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002552:	2b01      	cmp	r3, #1
 8002554:	d101      	bne.n	800255a <HAL_HCD_Start+0x16>
 8002556:	2302      	movs	r3, #2
 8002558:	e013      	b.n	8002582 <HAL_HCD_Start+0x3e>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2101      	movs	r1, #1
 8002568:	4618      	mov	r0, r3
 800256a:	f002 fe5e 	bl	800522a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f002 fb56 	bl	8004c24 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b082      	sub	sp, #8
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002598:	2b01      	cmp	r3, #1
 800259a:	d101      	bne.n	80025a0 <HAL_HCD_Stop+0x16>
 800259c:	2302      	movs	r3, #2
 800259e:	e00d      	b.n	80025bc <HAL_HCD_Stop+0x32>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f003 fbb1 	bl	8005d14 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f002 fe00 	bl	80051d6 <USB_ResetPort>
 80025d6:	4603      	mov	r3, r0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	460b      	mov	r3, r1
 80025ea:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80025ec:	78fa      	ldrb	r2, [r7, #3]
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	4613      	mov	r3, r2
 80025f2:	011b      	lsls	r3, r3, #4
 80025f4:	1a9b      	subs	r3, r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	334c      	adds	r3, #76	@ 0x4c
 80025fc:	781b      	ldrb	r3, [r3, #0]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
 8002612:	460b      	mov	r3, r1
 8002614:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002616:	78fa      	ldrb	r2, [r7, #3]
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	4613      	mov	r3, r2
 800261c:	011b      	lsls	r3, r3, #4
 800261e:	1a9b      	subs	r3, r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	440b      	add	r3, r1
 8002624:	3338      	adds	r3, #56	@ 0x38
 8002626:	681b      	ldr	r3, [r3, #0]
}
 8002628:	4618      	mov	r0, r3
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f002 fe42 	bl	80052ca <USB_GetCurrentFrame>
 8002646:	4603      	mov	r3, r0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f002 fe1d 	bl	800529c <USB_GetHostSpeed>
 8002662:	4603      	mov	r3, r0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002678:	78fa      	ldrb	r2, [r7, #3]
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	4613      	mov	r3, r2
 800267e:	011b      	lsls	r3, r3, #4
 8002680:	1a9b      	subs	r3, r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	440b      	add	r3, r1
 8002686:	331a      	adds	r3, #26
 8002688:	2200      	movs	r2, #0
 800268a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 800268c:	78fa      	ldrb	r2, [r7, #3]
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	4613      	mov	r3, r2
 8002692:	011b      	lsls	r3, r3, #4
 8002694:	1a9b      	subs	r3, r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	440b      	add	r3, r1
 800269a:	331b      	adds	r3, #27
 800269c:	2200      	movs	r2, #0
 800269e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80026a0:	78fa      	ldrb	r2, [r7, #3]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	1a9b      	subs	r3, r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	440b      	add	r3, r1
 80026ae:	3325      	adds	r3, #37	@ 0x25
 80026b0:	2200      	movs	r2, #0
 80026b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80026b4:	78fa      	ldrb	r2, [r7, #3]
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	4613      	mov	r3, r2
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	1a9b      	subs	r3, r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	3324      	adds	r3, #36	@ 0x24
 80026c4:	2200      	movs	r2, #0
 80026c6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b086      	sub	sp, #24
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
 80026de:	460b      	mov	r3, r1
 80026e0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	78fa      	ldrb	r2, [r7, #3]
 80026f2:	4611      	mov	r1, r2
 80026f4:	4618      	mov	r0, r3
 80026f6:	f002 fc0c 	bl	8004f12 <USB_ReadChInterrupts>
 80026fa:	4603      	mov	r3, r0
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b04      	cmp	r3, #4
 8002702:	d11a      	bne.n	800273a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002704:	78fb      	ldrb	r3, [r7, #3]
 8002706:	015a      	lsls	r2, r3, #5
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	4413      	add	r3, r2
 800270c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002710:	461a      	mov	r2, r3
 8002712:	2304      	movs	r3, #4
 8002714:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002716:	78fa      	ldrb	r2, [r7, #3]
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	4613      	mov	r3, r2
 800271c:	011b      	lsls	r3, r3, #4
 800271e:	1a9b      	subs	r3, r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	440b      	add	r3, r1
 8002724:	334d      	adds	r3, #77	@ 0x4d
 8002726:	2207      	movs	r2, #7
 8002728:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	78fa      	ldrb	r2, [r7, #3]
 8002730:	4611      	mov	r1, r2
 8002732:	4618      	mov	r0, r3
 8002734:	f003 f991 	bl	8005a5a <USB_HC_Halt>
 8002738:	e09e      	b.n	8002878 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	78fa      	ldrb	r2, [r7, #3]
 8002740:	4611      	mov	r1, r2
 8002742:	4618      	mov	r0, r3
 8002744:	f002 fbe5 	bl	8004f12 <USB_ReadChInterrupts>
 8002748:	4603      	mov	r3, r0
 800274a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800274e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002752:	d11b      	bne.n	800278c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002754:	78fb      	ldrb	r3, [r7, #3]
 8002756:	015a      	lsls	r2, r3, #5
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	4413      	add	r3, r2
 800275c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002760:	461a      	mov	r2, r3
 8002762:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002766:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002768:	78fa      	ldrb	r2, [r7, #3]
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	4613      	mov	r3, r2
 800276e:	011b      	lsls	r3, r3, #4
 8002770:	1a9b      	subs	r3, r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	440b      	add	r3, r1
 8002776:	334d      	adds	r3, #77	@ 0x4d
 8002778:	2208      	movs	r2, #8
 800277a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	78fa      	ldrb	r2, [r7, #3]
 8002782:	4611      	mov	r1, r2
 8002784:	4618      	mov	r0, r3
 8002786:	f003 f968 	bl	8005a5a <USB_HC_Halt>
 800278a:	e075      	b.n	8002878 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	78fa      	ldrb	r2, [r7, #3]
 8002792:	4611      	mov	r1, r2
 8002794:	4618      	mov	r0, r3
 8002796:	f002 fbbc 	bl	8004f12 <USB_ReadChInterrupts>
 800279a:	4603      	mov	r3, r0
 800279c:	f003 0308 	and.w	r3, r3, #8
 80027a0:	2b08      	cmp	r3, #8
 80027a2:	d11a      	bne.n	80027da <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80027a4:	78fb      	ldrb	r3, [r7, #3]
 80027a6:	015a      	lsls	r2, r3, #5
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	4413      	add	r3, r2
 80027ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027b0:	461a      	mov	r2, r3
 80027b2:	2308      	movs	r3, #8
 80027b4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80027b6:	78fa      	ldrb	r2, [r7, #3]
 80027b8:	6879      	ldr	r1, [r7, #4]
 80027ba:	4613      	mov	r3, r2
 80027bc:	011b      	lsls	r3, r3, #4
 80027be:	1a9b      	subs	r3, r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	440b      	add	r3, r1
 80027c4:	334d      	adds	r3, #77	@ 0x4d
 80027c6:	2206      	movs	r2, #6
 80027c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	78fa      	ldrb	r2, [r7, #3]
 80027d0:	4611      	mov	r1, r2
 80027d2:	4618      	mov	r0, r3
 80027d4:	f003 f941 	bl	8005a5a <USB_HC_Halt>
 80027d8:	e04e      	b.n	8002878 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	78fa      	ldrb	r2, [r7, #3]
 80027e0:	4611      	mov	r1, r2
 80027e2:	4618      	mov	r0, r3
 80027e4:	f002 fb95 	bl	8004f12 <USB_ReadChInterrupts>
 80027e8:	4603      	mov	r3, r0
 80027ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027f2:	d11b      	bne.n	800282c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80027f4:	78fb      	ldrb	r3, [r7, #3]
 80027f6:	015a      	lsls	r2, r3, #5
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	4413      	add	r3, r2
 80027fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002800:	461a      	mov	r2, r3
 8002802:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002806:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002808:	78fa      	ldrb	r2, [r7, #3]
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	4613      	mov	r3, r2
 800280e:	011b      	lsls	r3, r3, #4
 8002810:	1a9b      	subs	r3, r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	440b      	add	r3, r1
 8002816:	334d      	adds	r3, #77	@ 0x4d
 8002818:	2209      	movs	r2, #9
 800281a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	78fa      	ldrb	r2, [r7, #3]
 8002822:	4611      	mov	r1, r2
 8002824:	4618      	mov	r0, r3
 8002826:	f003 f918 	bl	8005a5a <USB_HC_Halt>
 800282a:	e025      	b.n	8002878 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	78fa      	ldrb	r2, [r7, #3]
 8002832:	4611      	mov	r1, r2
 8002834:	4618      	mov	r0, r3
 8002836:	f002 fb6c 	bl	8004f12 <USB_ReadChInterrupts>
 800283a:	4603      	mov	r3, r0
 800283c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002840:	2b80      	cmp	r3, #128	@ 0x80
 8002842:	d119      	bne.n	8002878 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002844:	78fb      	ldrb	r3, [r7, #3]
 8002846:	015a      	lsls	r2, r3, #5
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	4413      	add	r3, r2
 800284c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002850:	461a      	mov	r2, r3
 8002852:	2380      	movs	r3, #128	@ 0x80
 8002854:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002856:	78fa      	ldrb	r2, [r7, #3]
 8002858:	6879      	ldr	r1, [r7, #4]
 800285a:	4613      	mov	r3, r2
 800285c:	011b      	lsls	r3, r3, #4
 800285e:	1a9b      	subs	r3, r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	440b      	add	r3, r1
 8002864:	334d      	adds	r3, #77	@ 0x4d
 8002866:	2207      	movs	r2, #7
 8002868:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	78fa      	ldrb	r2, [r7, #3]
 8002870:	4611      	mov	r1, r2
 8002872:	4618      	mov	r0, r3
 8002874:	f003 f8f1 	bl	8005a5a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	78fa      	ldrb	r2, [r7, #3]
 800287e:	4611      	mov	r1, r2
 8002880:	4618      	mov	r0, r3
 8002882:	f002 fb46 	bl	8004f12 <USB_ReadChInterrupts>
 8002886:	4603      	mov	r3, r0
 8002888:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800288c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002890:	d112      	bne.n	80028b8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	78fa      	ldrb	r2, [r7, #3]
 8002898:	4611      	mov	r1, r2
 800289a:	4618      	mov	r0, r3
 800289c:	f003 f8dd 	bl	8005a5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80028a0:	78fb      	ldrb	r3, [r7, #3]
 80028a2:	015a      	lsls	r2, r3, #5
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	4413      	add	r3, r2
 80028a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028ac:	461a      	mov	r2, r3
 80028ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028b2:	6093      	str	r3, [r2, #8]
 80028b4:	f000 bd75 	b.w	80033a2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	78fa      	ldrb	r2, [r7, #3]
 80028be:	4611      	mov	r1, r2
 80028c0:	4618      	mov	r0, r3
 80028c2:	f002 fb26 	bl	8004f12 <USB_ReadChInterrupts>
 80028c6:	4603      	mov	r3, r0
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	f040 8128 	bne.w	8002b22 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80028d2:	78fb      	ldrb	r3, [r7, #3]
 80028d4:	015a      	lsls	r2, r3, #5
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	4413      	add	r3, r2
 80028da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028de:	461a      	mov	r2, r3
 80028e0:	2320      	movs	r3, #32
 80028e2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80028e4:	78fa      	ldrb	r2, [r7, #3]
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	1a9b      	subs	r3, r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	331b      	adds	r3, #27
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d119      	bne.n	800292e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80028fa:	78fa      	ldrb	r2, [r7, #3]
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	4613      	mov	r3, r2
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	1a9b      	subs	r3, r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	440b      	add	r3, r1
 8002908:	331b      	adds	r3, #27
 800290a:	2200      	movs	r2, #0
 800290c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800290e:	78fb      	ldrb	r3, [r7, #3]
 8002910:	015a      	lsls	r2, r3, #5
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	4413      	add	r3, r2
 8002916:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	78fa      	ldrb	r2, [r7, #3]
 800291e:	0151      	lsls	r1, r2, #5
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	440a      	add	r2, r1
 8002924:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002928:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800292c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	799b      	ldrb	r3, [r3, #6]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d01b      	beq.n	800296e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002936:	78fa      	ldrb	r2, [r7, #3]
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	4613      	mov	r3, r2
 800293c:	011b      	lsls	r3, r3, #4
 800293e:	1a9b      	subs	r3, r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	440b      	add	r3, r1
 8002944:	3330      	adds	r3, #48	@ 0x30
 8002946:	6819      	ldr	r1, [r3, #0]
 8002948:	78fb      	ldrb	r3, [r7, #3]
 800294a:	015a      	lsls	r2, r3, #5
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	4413      	add	r3, r2
 8002950:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800295a:	78fa      	ldrb	r2, [r7, #3]
 800295c:	1ac9      	subs	r1, r1, r3
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	011b      	lsls	r3, r3, #4
 8002964:	1a9b      	subs	r3, r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4403      	add	r3, r0
 800296a:	3338      	adds	r3, #56	@ 0x38
 800296c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800296e:	78fa      	ldrb	r2, [r7, #3]
 8002970:	6879      	ldr	r1, [r7, #4]
 8002972:	4613      	mov	r3, r2
 8002974:	011b      	lsls	r3, r3, #4
 8002976:	1a9b      	subs	r3, r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	440b      	add	r3, r1
 800297c:	334d      	adds	r3, #77	@ 0x4d
 800297e:	2201      	movs	r2, #1
 8002980:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002982:	78fa      	ldrb	r2, [r7, #3]
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	4613      	mov	r3, r2
 8002988:	011b      	lsls	r3, r3, #4
 800298a:	1a9b      	subs	r3, r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	440b      	add	r3, r1
 8002990:	3344      	adds	r3, #68	@ 0x44
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002996:	78fb      	ldrb	r3, [r7, #3]
 8002998:	015a      	lsls	r2, r3, #5
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	4413      	add	r3, r2
 800299e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029a2:	461a      	mov	r2, r3
 80029a4:	2301      	movs	r3, #1
 80029a6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029a8:	78fa      	ldrb	r2, [r7, #3]
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	1a9b      	subs	r3, r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	3326      	adds	r3, #38	@ 0x26
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00a      	beq.n	80029d4 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80029be:	78fa      	ldrb	r2, [r7, #3]
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	4613      	mov	r3, r2
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	1a9b      	subs	r3, r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	3326      	adds	r3, #38	@ 0x26
 80029ce:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d110      	bne.n	80029f6 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	78fa      	ldrb	r2, [r7, #3]
 80029da:	4611      	mov	r1, r2
 80029dc:	4618      	mov	r0, r3
 80029de:	f003 f83c 	bl	8005a5a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80029e2:	78fb      	ldrb	r3, [r7, #3]
 80029e4:	015a      	lsls	r2, r3, #5
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	4413      	add	r3, r2
 80029ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029ee:	461a      	mov	r2, r3
 80029f0:	2310      	movs	r3, #16
 80029f2:	6093      	str	r3, [r2, #8]
 80029f4:	e03d      	b.n	8002a72 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80029f6:	78fa      	ldrb	r2, [r7, #3]
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	4613      	mov	r3, r2
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	1a9b      	subs	r3, r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	440b      	add	r3, r1
 8002a04:	3326      	adds	r3, #38	@ 0x26
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	2b03      	cmp	r3, #3
 8002a0a:	d00a      	beq.n	8002a22 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002a0c:	78fa      	ldrb	r2, [r7, #3]
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	4613      	mov	r3, r2
 8002a12:	011b      	lsls	r3, r3, #4
 8002a14:	1a9b      	subs	r3, r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	3326      	adds	r3, #38	@ 0x26
 8002a1c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d127      	bne.n	8002a72 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002a22:	78fb      	ldrb	r3, [r7, #3]
 8002a24:	015a      	lsls	r2, r3, #5
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	4413      	add	r3, r2
 8002a2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	78fa      	ldrb	r2, [r7, #3]
 8002a32:	0151      	lsls	r1, r2, #5
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	440a      	add	r2, r1
 8002a38:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a3c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002a40:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002a42:	78fa      	ldrb	r2, [r7, #3]
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	4613      	mov	r3, r2
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	1a9b      	subs	r3, r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	440b      	add	r3, r1
 8002a50:	334c      	adds	r3, #76	@ 0x4c
 8002a52:	2201      	movs	r2, #1
 8002a54:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002a56:	78fa      	ldrb	r2, [r7, #3]
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	011b      	lsls	r3, r3, #4
 8002a5e:	1a9b      	subs	r3, r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	440b      	add	r3, r1
 8002a64:	334c      	adds	r3, #76	@ 0x4c
 8002a66:	781a      	ldrb	r2, [r3, #0]
 8002a68:	78fb      	ldrb	r3, [r7, #3]
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f005 fb4d 	bl	800810c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	799b      	ldrb	r3, [r3, #6]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d13b      	bne.n	8002af2 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002a7a:	78fa      	ldrb	r2, [r7, #3]
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	011b      	lsls	r3, r3, #4
 8002a82:	1a9b      	subs	r3, r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	440b      	add	r3, r1
 8002a88:	3338      	adds	r3, #56	@ 0x38
 8002a8a:	6819      	ldr	r1, [r3, #0]
 8002a8c:	78fa      	ldrb	r2, [r7, #3]
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	4613      	mov	r3, r2
 8002a92:	011b      	lsls	r3, r3, #4
 8002a94:	1a9b      	subs	r3, r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4403      	add	r3, r0
 8002a9a:	3328      	adds	r3, #40	@ 0x28
 8002a9c:	881b      	ldrh	r3, [r3, #0]
 8002a9e:	440b      	add	r3, r1
 8002aa0:	1e59      	subs	r1, r3, #1
 8002aa2:	78fa      	ldrb	r2, [r7, #3]
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	011b      	lsls	r3, r3, #4
 8002aaa:	1a9b      	subs	r3, r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4403      	add	r3, r0
 8002ab0:	3328      	adds	r3, #40	@ 0x28
 8002ab2:	881b      	ldrh	r3, [r3, #0]
 8002ab4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 8470 	beq.w	80033a2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002ac2:	78fa      	ldrb	r2, [r7, #3]
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	1a9b      	subs	r3, r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	440b      	add	r3, r1
 8002ad0:	333c      	adds	r3, #60	@ 0x3c
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	78fa      	ldrb	r2, [r7, #3]
 8002ad6:	f083 0301 	eor.w	r3, r3, #1
 8002ada:	b2d8      	uxtb	r0, r3
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	011b      	lsls	r3, r3, #4
 8002ae2:	1a9b      	subs	r3, r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	440b      	add	r3, r1
 8002ae8:	333c      	adds	r3, #60	@ 0x3c
 8002aea:	4602      	mov	r2, r0
 8002aec:	701a      	strb	r2, [r3, #0]
 8002aee:	f000 bc58 	b.w	80033a2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002af2:	78fa      	ldrb	r2, [r7, #3]
 8002af4:	6879      	ldr	r1, [r7, #4]
 8002af6:	4613      	mov	r3, r2
 8002af8:	011b      	lsls	r3, r3, #4
 8002afa:	1a9b      	subs	r3, r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	440b      	add	r3, r1
 8002b00:	333c      	adds	r3, #60	@ 0x3c
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	78fa      	ldrb	r2, [r7, #3]
 8002b06:	f083 0301 	eor.w	r3, r3, #1
 8002b0a:	b2d8      	uxtb	r0, r3
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	1a9b      	subs	r3, r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	440b      	add	r3, r1
 8002b18:	333c      	adds	r3, #60	@ 0x3c
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	701a      	strb	r2, [r3, #0]
 8002b1e:	f000 bc40 	b.w	80033a2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	78fa      	ldrb	r2, [r7, #3]
 8002b28:	4611      	mov	r1, r2
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f002 f9f1 	bl	8004f12 <USB_ReadChInterrupts>
 8002b30:	4603      	mov	r3, r0
 8002b32:	f003 0320 	and.w	r3, r3, #32
 8002b36:	2b20      	cmp	r3, #32
 8002b38:	d131      	bne.n	8002b9e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002b3a:	78fb      	ldrb	r3, [r7, #3]
 8002b3c:	015a      	lsls	r2, r3, #5
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	4413      	add	r3, r2
 8002b42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b46:	461a      	mov	r2, r3
 8002b48:	2320      	movs	r3, #32
 8002b4a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002b4c:	78fa      	ldrb	r2, [r7, #3]
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	4613      	mov	r3, r2
 8002b52:	011b      	lsls	r3, r3, #4
 8002b54:	1a9b      	subs	r3, r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	331a      	adds	r3, #26
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	f040 841f 	bne.w	80033a2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002b64:	78fa      	ldrb	r2, [r7, #3]
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	1a9b      	subs	r3, r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	440b      	add	r3, r1
 8002b72:	331b      	adds	r3, #27
 8002b74:	2201      	movs	r2, #1
 8002b76:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002b78:	78fa      	ldrb	r2, [r7, #3]
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	011b      	lsls	r3, r3, #4
 8002b80:	1a9b      	subs	r3, r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	440b      	add	r3, r1
 8002b86:	334d      	adds	r3, #77	@ 0x4d
 8002b88:	2203      	movs	r2, #3
 8002b8a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	78fa      	ldrb	r2, [r7, #3]
 8002b92:	4611      	mov	r1, r2
 8002b94:	4618      	mov	r0, r3
 8002b96:	f002 ff60 	bl	8005a5a <USB_HC_Halt>
 8002b9a:	f000 bc02 	b.w	80033a2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	78fa      	ldrb	r2, [r7, #3]
 8002ba4:	4611      	mov	r1, r2
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f002 f9b3 	bl	8004f12 <USB_ReadChInterrupts>
 8002bac:	4603      	mov	r3, r0
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	f040 8305 	bne.w	80031c2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002bb8:	78fb      	ldrb	r3, [r7, #3]
 8002bba:	015a      	lsls	r2, r3, #5
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002bca:	78fa      	ldrb	r2, [r7, #3]
 8002bcc:	6879      	ldr	r1, [r7, #4]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	011b      	lsls	r3, r3, #4
 8002bd2:	1a9b      	subs	r3, r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	440b      	add	r3, r1
 8002bd8:	334d      	adds	r3, #77	@ 0x4d
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d114      	bne.n	8002c0a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002be0:	78fa      	ldrb	r2, [r7, #3]
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	4613      	mov	r3, r2
 8002be6:	011b      	lsls	r3, r3, #4
 8002be8:	1a9b      	subs	r3, r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	334d      	adds	r3, #77	@ 0x4d
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002bf4:	78fa      	ldrb	r2, [r7, #3]
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	1a9b      	subs	r3, r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	334c      	adds	r3, #76	@ 0x4c
 8002c04:	2201      	movs	r2, #1
 8002c06:	701a      	strb	r2, [r3, #0]
 8002c08:	e2cc      	b.n	80031a4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002c0a:	78fa      	ldrb	r2, [r7, #3]
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	011b      	lsls	r3, r3, #4
 8002c12:	1a9b      	subs	r3, r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	440b      	add	r3, r1
 8002c18:	334d      	adds	r3, #77	@ 0x4d
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b06      	cmp	r3, #6
 8002c1e:	d114      	bne.n	8002c4a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c20:	78fa      	ldrb	r2, [r7, #3]
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	4613      	mov	r3, r2
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	1a9b      	subs	r3, r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	334d      	adds	r3, #77	@ 0x4d
 8002c30:	2202      	movs	r2, #2
 8002c32:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002c34:	78fa      	ldrb	r2, [r7, #3]
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	011b      	lsls	r3, r3, #4
 8002c3c:	1a9b      	subs	r3, r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	334c      	adds	r3, #76	@ 0x4c
 8002c44:	2205      	movs	r2, #5
 8002c46:	701a      	strb	r2, [r3, #0]
 8002c48:	e2ac      	b.n	80031a4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002c4a:	78fa      	ldrb	r2, [r7, #3]
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	011b      	lsls	r3, r3, #4
 8002c52:	1a9b      	subs	r3, r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	440b      	add	r3, r1
 8002c58:	334d      	adds	r3, #77	@ 0x4d
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	2b07      	cmp	r3, #7
 8002c5e:	d00b      	beq.n	8002c78 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002c60:	78fa      	ldrb	r2, [r7, #3]
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	4613      	mov	r3, r2
 8002c66:	011b      	lsls	r3, r3, #4
 8002c68:	1a9b      	subs	r3, r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	334d      	adds	r3, #77	@ 0x4d
 8002c70:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002c72:	2b09      	cmp	r3, #9
 8002c74:	f040 80a6 	bne.w	8002dc4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c78:	78fa      	ldrb	r2, [r7, #3]
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	011b      	lsls	r3, r3, #4
 8002c80:	1a9b      	subs	r3, r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	440b      	add	r3, r1
 8002c86:	334d      	adds	r3, #77	@ 0x4d
 8002c88:	2202      	movs	r2, #2
 8002c8a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002c8c:	78fa      	ldrb	r2, [r7, #3]
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	4613      	mov	r3, r2
 8002c92:	011b      	lsls	r3, r3, #4
 8002c94:	1a9b      	subs	r3, r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	440b      	add	r3, r1
 8002c9a:	3344      	adds	r3, #68	@ 0x44
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	1c59      	adds	r1, r3, #1
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	011b      	lsls	r3, r3, #4
 8002ca6:	1a9b      	subs	r3, r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4403      	add	r3, r0
 8002cac:	3344      	adds	r3, #68	@ 0x44
 8002cae:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002cb0:	78fa      	ldrb	r2, [r7, #3]
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	011b      	lsls	r3, r3, #4
 8002cb8:	1a9b      	subs	r3, r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	3344      	adds	r3, #68	@ 0x44
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d943      	bls.n	8002d4e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002cc6:	78fa      	ldrb	r2, [r7, #3]
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	011b      	lsls	r3, r3, #4
 8002cce:	1a9b      	subs	r3, r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	3344      	adds	r3, #68	@ 0x44
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002cda:	78fa      	ldrb	r2, [r7, #3]
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	011b      	lsls	r3, r3, #4
 8002ce2:	1a9b      	subs	r3, r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	331a      	adds	r3, #26
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d123      	bne.n	8002d38 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002cf0:	78fa      	ldrb	r2, [r7, #3]
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	011b      	lsls	r3, r3, #4
 8002cf8:	1a9b      	subs	r3, r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	331b      	adds	r3, #27
 8002d00:	2200      	movs	r2, #0
 8002d02:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002d04:	78fa      	ldrb	r2, [r7, #3]
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	011b      	lsls	r3, r3, #4
 8002d0c:	1a9b      	subs	r3, r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	331c      	adds	r3, #28
 8002d14:	2200      	movs	r2, #0
 8002d16:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002d18:	78fb      	ldrb	r3, [r7, #3]
 8002d1a:	015a      	lsls	r2, r3, #5
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	4413      	add	r3, r2
 8002d20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	78fa      	ldrb	r2, [r7, #3]
 8002d28:	0151      	lsls	r1, r2, #5
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	440a      	add	r2, r1
 8002d2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d36:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002d38:	78fa      	ldrb	r2, [r7, #3]
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	011b      	lsls	r3, r3, #4
 8002d40:	1a9b      	subs	r3, r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	334c      	adds	r3, #76	@ 0x4c
 8002d48:	2204      	movs	r2, #4
 8002d4a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002d4c:	e229      	b.n	80031a2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002d4e:	78fa      	ldrb	r2, [r7, #3]
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	4613      	mov	r3, r2
 8002d54:	011b      	lsls	r3, r3, #4
 8002d56:	1a9b      	subs	r3, r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	440b      	add	r3, r1
 8002d5c:	334c      	adds	r3, #76	@ 0x4c
 8002d5e:	2202      	movs	r2, #2
 8002d60:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d62:	78fa      	ldrb	r2, [r7, #3]
 8002d64:	6879      	ldr	r1, [r7, #4]
 8002d66:	4613      	mov	r3, r2
 8002d68:	011b      	lsls	r3, r3, #4
 8002d6a:	1a9b      	subs	r3, r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	440b      	add	r3, r1
 8002d70:	3326      	adds	r3, #38	@ 0x26
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00b      	beq.n	8002d90 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002d78:	78fa      	ldrb	r2, [r7, #3]
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	011b      	lsls	r3, r3, #4
 8002d80:	1a9b      	subs	r3, r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	440b      	add	r3, r1
 8002d86:	3326      	adds	r3, #38	@ 0x26
 8002d88:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	f040 8209 	bne.w	80031a2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002d90:	78fb      	ldrb	r3, [r7, #3]
 8002d92:	015a      	lsls	r2, r3, #5
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	4413      	add	r3, r2
 8002d98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002da6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002dae:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002db0:	78fb      	ldrb	r3, [r7, #3]
 8002db2:	015a      	lsls	r2, r3, #5
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	4413      	add	r3, r2
 8002db8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002dc2:	e1ee      	b.n	80031a2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002dc4:	78fa      	ldrb	r2, [r7, #3]
 8002dc6:	6879      	ldr	r1, [r7, #4]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	011b      	lsls	r3, r3, #4
 8002dcc:	1a9b      	subs	r3, r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	334d      	adds	r3, #77	@ 0x4d
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2b05      	cmp	r3, #5
 8002dd8:	f040 80c8 	bne.w	8002f6c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ddc:	78fa      	ldrb	r2, [r7, #3]
 8002dde:	6879      	ldr	r1, [r7, #4]
 8002de0:	4613      	mov	r3, r2
 8002de2:	011b      	lsls	r3, r3, #4
 8002de4:	1a9b      	subs	r3, r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	440b      	add	r3, r1
 8002dea:	334d      	adds	r3, #77	@ 0x4d
 8002dec:	2202      	movs	r2, #2
 8002dee:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002df0:	78fa      	ldrb	r2, [r7, #3]
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	4613      	mov	r3, r2
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	1a9b      	subs	r3, r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	331b      	adds	r3, #27
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	f040 81ce 	bne.w	80031a4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002e08:	78fa      	ldrb	r2, [r7, #3]
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	011b      	lsls	r3, r3, #4
 8002e10:	1a9b      	subs	r3, r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	440b      	add	r3, r1
 8002e16:	3326      	adds	r3, #38	@ 0x26
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	d16b      	bne.n	8002ef6 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002e1e:	78fa      	ldrb	r2, [r7, #3]
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	4613      	mov	r3, r2
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	1a9b      	subs	r3, r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	440b      	add	r3, r1
 8002e2c:	3348      	adds	r3, #72	@ 0x48
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	1c59      	adds	r1, r3, #1
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	4613      	mov	r3, r2
 8002e36:	011b      	lsls	r3, r3, #4
 8002e38:	1a9b      	subs	r3, r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4403      	add	r3, r0
 8002e3e:	3348      	adds	r3, #72	@ 0x48
 8002e40:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002e42:	78fa      	ldrb	r2, [r7, #3]
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	4613      	mov	r3, r2
 8002e48:	011b      	lsls	r3, r3, #4
 8002e4a:	1a9b      	subs	r3, r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	440b      	add	r3, r1
 8002e50:	3348      	adds	r3, #72	@ 0x48
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d943      	bls.n	8002ee0 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002e58:	78fa      	ldrb	r2, [r7, #3]
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	011b      	lsls	r3, r3, #4
 8002e60:	1a9b      	subs	r3, r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	440b      	add	r3, r1
 8002e66:	3348      	adds	r3, #72	@ 0x48
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002e6c:	78fa      	ldrb	r2, [r7, #3]
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	4613      	mov	r3, r2
 8002e72:	011b      	lsls	r3, r3, #4
 8002e74:	1a9b      	subs	r3, r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	440b      	add	r3, r1
 8002e7a:	331b      	adds	r3, #27
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002e80:	78fa      	ldrb	r2, [r7, #3]
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	4613      	mov	r3, r2
 8002e86:	011b      	lsls	r3, r3, #4
 8002e88:	1a9b      	subs	r3, r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	3344      	adds	r3, #68	@ 0x44
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d809      	bhi.n	8002eaa <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002e96:	78fa      	ldrb	r2, [r7, #3]
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	011b      	lsls	r3, r3, #4
 8002e9e:	1a9b      	subs	r3, r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	440b      	add	r3, r1
 8002ea4:	331c      	adds	r3, #28
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002eaa:	78fb      	ldrb	r3, [r7, #3]
 8002eac:	015a      	lsls	r2, r3, #5
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	78fa      	ldrb	r2, [r7, #3]
 8002eba:	0151      	lsls	r1, r2, #5
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	440a      	add	r2, r1
 8002ec0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ec4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ec8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002eca:	78fa      	ldrb	r2, [r7, #3]
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	011b      	lsls	r3, r3, #4
 8002ed2:	1a9b      	subs	r3, r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	334c      	adds	r3, #76	@ 0x4c
 8002eda:	2204      	movs	r2, #4
 8002edc:	701a      	strb	r2, [r3, #0]
 8002ede:	e014      	b.n	8002f0a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ee0:	78fa      	ldrb	r2, [r7, #3]
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	011b      	lsls	r3, r3, #4
 8002ee8:	1a9b      	subs	r3, r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	334c      	adds	r3, #76	@ 0x4c
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	701a      	strb	r2, [r3, #0]
 8002ef4:	e009      	b.n	8002f0a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ef6:	78fa      	ldrb	r2, [r7, #3]
 8002ef8:	6879      	ldr	r1, [r7, #4]
 8002efa:	4613      	mov	r3, r2
 8002efc:	011b      	lsls	r3, r3, #4
 8002efe:	1a9b      	subs	r3, r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	440b      	add	r3, r1
 8002f04:	334c      	adds	r3, #76	@ 0x4c
 8002f06:	2202      	movs	r2, #2
 8002f08:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f0a:	78fa      	ldrb	r2, [r7, #3]
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	011b      	lsls	r3, r3, #4
 8002f12:	1a9b      	subs	r3, r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	440b      	add	r3, r1
 8002f18:	3326      	adds	r3, #38	@ 0x26
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00b      	beq.n	8002f38 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002f20:	78fa      	ldrb	r2, [r7, #3]
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	4613      	mov	r3, r2
 8002f26:	011b      	lsls	r3, r3, #4
 8002f28:	1a9b      	subs	r3, r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	3326      	adds	r3, #38	@ 0x26
 8002f30:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	f040 8136 	bne.w	80031a4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002f38:	78fb      	ldrb	r3, [r7, #3]
 8002f3a:	015a      	lsls	r2, r3, #5
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	4413      	add	r3, r2
 8002f40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002f4e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002f56:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002f58:	78fb      	ldrb	r3, [r7, #3]
 8002f5a:	015a      	lsls	r2, r3, #5
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	4413      	add	r3, r2
 8002f60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f64:	461a      	mov	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6013      	str	r3, [r2, #0]
 8002f6a:	e11b      	b.n	80031a4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002f6c:	78fa      	ldrb	r2, [r7, #3]
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	4613      	mov	r3, r2
 8002f72:	011b      	lsls	r3, r3, #4
 8002f74:	1a9b      	subs	r3, r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	334d      	adds	r3, #77	@ 0x4d
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	2b03      	cmp	r3, #3
 8002f80:	f040 8081 	bne.w	8003086 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f84:	78fa      	ldrb	r2, [r7, #3]
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	011b      	lsls	r3, r3, #4
 8002f8c:	1a9b      	subs	r3, r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	440b      	add	r3, r1
 8002f92:	334d      	adds	r3, #77	@ 0x4d
 8002f94:	2202      	movs	r2, #2
 8002f96:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002f98:	78fa      	ldrb	r2, [r7, #3]
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	011b      	lsls	r3, r3, #4
 8002fa0:	1a9b      	subs	r3, r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	331b      	adds	r3, #27
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	f040 80fa 	bne.w	80031a4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002fb0:	78fa      	ldrb	r2, [r7, #3]
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	011b      	lsls	r3, r3, #4
 8002fb8:	1a9b      	subs	r3, r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	334c      	adds	r3, #76	@ 0x4c
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002fc4:	78fb      	ldrb	r3, [r7, #3]
 8002fc6:	015a      	lsls	r2, r3, #5
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	4413      	add	r3, r2
 8002fcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	78fa      	ldrb	r2, [r7, #3]
 8002fd4:	0151      	lsls	r1, r2, #5
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	440a      	add	r2, r1
 8002fda:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002fde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fe2:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002fe4:	78fb      	ldrb	r3, [r7, #3]
 8002fe6:	015a      	lsls	r2, r3, #5
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	4413      	add	r3, r2
 8002fec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	78fa      	ldrb	r2, [r7, #3]
 8002ff4:	0151      	lsls	r1, r2, #5
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	440a      	add	r2, r1
 8002ffa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ffe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003002:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003004:	78fb      	ldrb	r3, [r7, #3]
 8003006:	015a      	lsls	r2, r3, #5
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	4413      	add	r3, r2
 800300c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	78fa      	ldrb	r2, [r7, #3]
 8003014:	0151      	lsls	r1, r2, #5
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	440a      	add	r2, r1
 800301a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800301e:	f023 0320 	bic.w	r3, r3, #32
 8003022:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003024:	78fa      	ldrb	r2, [r7, #3]
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	4613      	mov	r3, r2
 800302a:	011b      	lsls	r3, r3, #4
 800302c:	1a9b      	subs	r3, r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	3326      	adds	r3, #38	@ 0x26
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00b      	beq.n	8003052 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800303a:	78fa      	ldrb	r2, [r7, #3]
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	4613      	mov	r3, r2
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	1a9b      	subs	r3, r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	440b      	add	r3, r1
 8003048:	3326      	adds	r3, #38	@ 0x26
 800304a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800304c:	2b02      	cmp	r3, #2
 800304e:	f040 80a9 	bne.w	80031a4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003052:	78fb      	ldrb	r3, [r7, #3]
 8003054:	015a      	lsls	r2, r3, #5
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	4413      	add	r3, r2
 800305a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003068:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003070:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003072:	78fb      	ldrb	r3, [r7, #3]
 8003074:	015a      	lsls	r2, r3, #5
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	4413      	add	r3, r2
 800307a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800307e:	461a      	mov	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6013      	str	r3, [r2, #0]
 8003084:	e08e      	b.n	80031a4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003086:	78fa      	ldrb	r2, [r7, #3]
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	4613      	mov	r3, r2
 800308c:	011b      	lsls	r3, r3, #4
 800308e:	1a9b      	subs	r3, r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	440b      	add	r3, r1
 8003094:	334d      	adds	r3, #77	@ 0x4d
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b04      	cmp	r3, #4
 800309a:	d143      	bne.n	8003124 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800309c:	78fa      	ldrb	r2, [r7, #3]
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	4613      	mov	r3, r2
 80030a2:	011b      	lsls	r3, r3, #4
 80030a4:	1a9b      	subs	r3, r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	440b      	add	r3, r1
 80030aa:	334d      	adds	r3, #77	@ 0x4d
 80030ac:	2202      	movs	r2, #2
 80030ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80030b0:	78fa      	ldrb	r2, [r7, #3]
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	4613      	mov	r3, r2
 80030b6:	011b      	lsls	r3, r3, #4
 80030b8:	1a9b      	subs	r3, r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	440b      	add	r3, r1
 80030be:	334c      	adds	r3, #76	@ 0x4c
 80030c0:	2202      	movs	r2, #2
 80030c2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030c4:	78fa      	ldrb	r2, [r7, #3]
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	4613      	mov	r3, r2
 80030ca:	011b      	lsls	r3, r3, #4
 80030cc:	1a9b      	subs	r3, r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	3326      	adds	r3, #38	@ 0x26
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00a      	beq.n	80030f0 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80030da:	78fa      	ldrb	r2, [r7, #3]
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	1a9b      	subs	r3, r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	440b      	add	r3, r1
 80030e8:	3326      	adds	r3, #38	@ 0x26
 80030ea:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d159      	bne.n	80031a4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80030f0:	78fb      	ldrb	r3, [r7, #3]
 80030f2:	015a      	lsls	r2, r3, #5
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	4413      	add	r3, r2
 80030f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003106:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800310e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003110:	78fb      	ldrb	r3, [r7, #3]
 8003112:	015a      	lsls	r2, r3, #5
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	4413      	add	r3, r2
 8003118:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800311c:	461a      	mov	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	e03f      	b.n	80031a4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003124:	78fa      	ldrb	r2, [r7, #3]
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	4613      	mov	r3, r2
 800312a:	011b      	lsls	r3, r3, #4
 800312c:	1a9b      	subs	r3, r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	334d      	adds	r3, #77	@ 0x4d
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	2b08      	cmp	r3, #8
 8003138:	d126      	bne.n	8003188 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800313a:	78fa      	ldrb	r2, [r7, #3]
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	4613      	mov	r3, r2
 8003140:	011b      	lsls	r3, r3, #4
 8003142:	1a9b      	subs	r3, r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	440b      	add	r3, r1
 8003148:	334d      	adds	r3, #77	@ 0x4d
 800314a:	2202      	movs	r2, #2
 800314c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800314e:	78fa      	ldrb	r2, [r7, #3]
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	011b      	lsls	r3, r3, #4
 8003156:	1a9b      	subs	r3, r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	440b      	add	r3, r1
 800315c:	3344      	adds	r3, #68	@ 0x44
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	1c59      	adds	r1, r3, #1
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	4613      	mov	r3, r2
 8003166:	011b      	lsls	r3, r3, #4
 8003168:	1a9b      	subs	r3, r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4403      	add	r3, r0
 800316e:	3344      	adds	r3, #68	@ 0x44
 8003170:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003172:	78fa      	ldrb	r2, [r7, #3]
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	4613      	mov	r3, r2
 8003178:	011b      	lsls	r3, r3, #4
 800317a:	1a9b      	subs	r3, r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	440b      	add	r3, r1
 8003180:	334c      	adds	r3, #76	@ 0x4c
 8003182:	2204      	movs	r2, #4
 8003184:	701a      	strb	r2, [r3, #0]
 8003186:	e00d      	b.n	80031a4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003188:	78fa      	ldrb	r2, [r7, #3]
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	4613      	mov	r3, r2
 800318e:	011b      	lsls	r3, r3, #4
 8003190:	1a9b      	subs	r3, r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	334d      	adds	r3, #77	@ 0x4d
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	2b02      	cmp	r3, #2
 800319c:	f000 8100 	beq.w	80033a0 <HCD_HC_IN_IRQHandler+0xcca>
 80031a0:	e000      	b.n	80031a4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80031a2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80031a4:	78fa      	ldrb	r2, [r7, #3]
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	4613      	mov	r3, r2
 80031aa:	011b      	lsls	r3, r3, #4
 80031ac:	1a9b      	subs	r3, r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	440b      	add	r3, r1
 80031b2:	334c      	adds	r3, #76	@ 0x4c
 80031b4:	781a      	ldrb	r2, [r3, #0]
 80031b6:	78fb      	ldrb	r3, [r7, #3]
 80031b8:	4619      	mov	r1, r3
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f004 ffa6 	bl	800810c <HAL_HCD_HC_NotifyURBChange_Callback>
 80031c0:	e0ef      	b.n	80033a2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	78fa      	ldrb	r2, [r7, #3]
 80031c8:	4611      	mov	r1, r2
 80031ca:	4618      	mov	r0, r3
 80031cc:	f001 fea1 	bl	8004f12 <USB_ReadChInterrupts>
 80031d0:	4603      	mov	r3, r0
 80031d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031d6:	2b40      	cmp	r3, #64	@ 0x40
 80031d8:	d12f      	bne.n	800323a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80031da:	78fb      	ldrb	r3, [r7, #3]
 80031dc:	015a      	lsls	r2, r3, #5
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	4413      	add	r3, r2
 80031e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031e6:	461a      	mov	r2, r3
 80031e8:	2340      	movs	r3, #64	@ 0x40
 80031ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80031ec:	78fa      	ldrb	r2, [r7, #3]
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	4613      	mov	r3, r2
 80031f2:	011b      	lsls	r3, r3, #4
 80031f4:	1a9b      	subs	r3, r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	334d      	adds	r3, #77	@ 0x4d
 80031fc:	2205      	movs	r2, #5
 80031fe:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003200:	78fa      	ldrb	r2, [r7, #3]
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	4613      	mov	r3, r2
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	1a9b      	subs	r3, r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	331a      	adds	r3, #26
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d109      	bne.n	800322a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003216:	78fa      	ldrb	r2, [r7, #3]
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	3344      	adds	r3, #68	@ 0x44
 8003226:	2200      	movs	r2, #0
 8003228:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	78fa      	ldrb	r2, [r7, #3]
 8003230:	4611      	mov	r1, r2
 8003232:	4618      	mov	r0, r3
 8003234:	f002 fc11 	bl	8005a5a <USB_HC_Halt>
 8003238:	e0b3      	b.n	80033a2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	78fa      	ldrb	r2, [r7, #3]
 8003240:	4611      	mov	r1, r2
 8003242:	4618      	mov	r0, r3
 8003244:	f001 fe65 	bl	8004f12 <USB_ReadChInterrupts>
 8003248:	4603      	mov	r3, r0
 800324a:	f003 0310 	and.w	r3, r3, #16
 800324e:	2b10      	cmp	r3, #16
 8003250:	f040 80a7 	bne.w	80033a2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003254:	78fa      	ldrb	r2, [r7, #3]
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	4613      	mov	r3, r2
 800325a:	011b      	lsls	r3, r3, #4
 800325c:	1a9b      	subs	r3, r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	3326      	adds	r3, #38	@ 0x26
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b03      	cmp	r3, #3
 8003268:	d11b      	bne.n	80032a2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800326a:	78fa      	ldrb	r2, [r7, #3]
 800326c:	6879      	ldr	r1, [r7, #4]
 800326e:	4613      	mov	r3, r2
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	1a9b      	subs	r3, r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	440b      	add	r3, r1
 8003278:	3344      	adds	r3, #68	@ 0x44
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800327e:	78fa      	ldrb	r2, [r7, #3]
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	4613      	mov	r3, r2
 8003284:	011b      	lsls	r3, r3, #4
 8003286:	1a9b      	subs	r3, r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	440b      	add	r3, r1
 800328c:	334d      	adds	r3, #77	@ 0x4d
 800328e:	2204      	movs	r2, #4
 8003290:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	78fa      	ldrb	r2, [r7, #3]
 8003298:	4611      	mov	r1, r2
 800329a:	4618      	mov	r0, r3
 800329c:	f002 fbdd 	bl	8005a5a <USB_HC_Halt>
 80032a0:	e03f      	b.n	8003322 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032a2:	78fa      	ldrb	r2, [r7, #3]
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	1a9b      	subs	r3, r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	440b      	add	r3, r1
 80032b0:	3326      	adds	r3, #38	@ 0x26
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00a      	beq.n	80032ce <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80032b8:	78fa      	ldrb	r2, [r7, #3]
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	4613      	mov	r3, r2
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	1a9b      	subs	r3, r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	3326      	adds	r3, #38	@ 0x26
 80032c8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d129      	bne.n	8003322 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80032ce:	78fa      	ldrb	r2, [r7, #3]
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	1a9b      	subs	r3, r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	440b      	add	r3, r1
 80032dc:	3344      	adds	r3, #68	@ 0x44
 80032de:	2200      	movs	r2, #0
 80032e0:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	799b      	ldrb	r3, [r3, #6]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00a      	beq.n	8003300 <HCD_HC_IN_IRQHandler+0xc2a>
 80032ea:	78fa      	ldrb	r2, [r7, #3]
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	1a9b      	subs	r3, r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	440b      	add	r3, r1
 80032f8:	331b      	adds	r3, #27
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d110      	bne.n	8003322 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003300:	78fa      	ldrb	r2, [r7, #3]
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	4613      	mov	r3, r2
 8003306:	011b      	lsls	r3, r3, #4
 8003308:	1a9b      	subs	r3, r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	334d      	adds	r3, #77	@ 0x4d
 8003310:	2204      	movs	r2, #4
 8003312:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	78fa      	ldrb	r2, [r7, #3]
 800331a:	4611      	mov	r1, r2
 800331c:	4618      	mov	r0, r3
 800331e:	f002 fb9c 	bl	8005a5a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003322:	78fa      	ldrb	r2, [r7, #3]
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	1a9b      	subs	r3, r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	440b      	add	r3, r1
 8003330:	331b      	adds	r3, #27
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d129      	bne.n	800338c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003338:	78fa      	ldrb	r2, [r7, #3]
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	4613      	mov	r3, r2
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	1a9b      	subs	r3, r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	440b      	add	r3, r1
 8003346:	331b      	adds	r3, #27
 8003348:	2200      	movs	r2, #0
 800334a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800334c:	78fb      	ldrb	r3, [r7, #3]
 800334e:	015a      	lsls	r2, r3, #5
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	4413      	add	r3, r2
 8003354:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	78fa      	ldrb	r2, [r7, #3]
 800335c:	0151      	lsls	r1, r2, #5
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	440a      	add	r2, r1
 8003362:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003366:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800336a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800336c:	78fb      	ldrb	r3, [r7, #3]
 800336e:	015a      	lsls	r2, r3, #5
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	4413      	add	r3, r2
 8003374:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	78fa      	ldrb	r2, [r7, #3]
 800337c:	0151      	lsls	r1, r2, #5
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	440a      	add	r2, r1
 8003382:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003386:	f043 0320 	orr.w	r3, r3, #32
 800338a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800338c:	78fb      	ldrb	r3, [r7, #3]
 800338e:	015a      	lsls	r2, r3, #5
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	4413      	add	r3, r2
 8003394:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003398:	461a      	mov	r2, r3
 800339a:	2310      	movs	r3, #16
 800339c:	6093      	str	r3, [r2, #8]
 800339e:	e000      	b.n	80033a2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80033a0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80033a2:	3718      	adds	r7, #24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	460b      	mov	r3, r1
 80033b2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	78fa      	ldrb	r2, [r7, #3]
 80033c4:	4611      	mov	r1, r2
 80033c6:	4618      	mov	r0, r3
 80033c8:	f001 fda3 	bl	8004f12 <USB_ReadChInterrupts>
 80033cc:	4603      	mov	r3, r0
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d11b      	bne.n	800340e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80033d6:	78fb      	ldrb	r3, [r7, #3]
 80033d8:	015a      	lsls	r2, r3, #5
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	4413      	add	r3, r2
 80033de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033e2:	461a      	mov	r2, r3
 80033e4:	2304      	movs	r3, #4
 80033e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80033e8:	78fa      	ldrb	r2, [r7, #3]
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	1a9b      	subs	r3, r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	334d      	adds	r3, #77	@ 0x4d
 80033f8:	2207      	movs	r2, #7
 80033fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	78fa      	ldrb	r2, [r7, #3]
 8003402:	4611      	mov	r1, r2
 8003404:	4618      	mov	r0, r3
 8003406:	f002 fb28 	bl	8005a5a <USB_HC_Halt>
 800340a:	f000 bc89 	b.w	8003d20 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	78fa      	ldrb	r2, [r7, #3]
 8003414:	4611      	mov	r1, r2
 8003416:	4618      	mov	r0, r3
 8003418:	f001 fd7b 	bl	8004f12 <USB_ReadChInterrupts>
 800341c:	4603      	mov	r3, r0
 800341e:	f003 0320 	and.w	r3, r3, #32
 8003422:	2b20      	cmp	r3, #32
 8003424:	f040 8082 	bne.w	800352c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003428:	78fb      	ldrb	r3, [r7, #3]
 800342a:	015a      	lsls	r2, r3, #5
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	4413      	add	r3, r2
 8003430:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003434:	461a      	mov	r2, r3
 8003436:	2320      	movs	r3, #32
 8003438:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800343a:	78fa      	ldrb	r2, [r7, #3]
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	4613      	mov	r3, r2
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	1a9b      	subs	r3, r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	440b      	add	r3, r1
 8003448:	3319      	adds	r3, #25
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d124      	bne.n	800349a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003450:	78fa      	ldrb	r2, [r7, #3]
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	4613      	mov	r3, r2
 8003456:	011b      	lsls	r3, r3, #4
 8003458:	1a9b      	subs	r3, r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	3319      	adds	r3, #25
 8003460:	2200      	movs	r2, #0
 8003462:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003464:	78fa      	ldrb	r2, [r7, #3]
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	4613      	mov	r3, r2
 800346a:	011b      	lsls	r3, r3, #4
 800346c:	1a9b      	subs	r3, r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	334c      	adds	r3, #76	@ 0x4c
 8003474:	2202      	movs	r2, #2
 8003476:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003478:	78fa      	ldrb	r2, [r7, #3]
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	4613      	mov	r3, r2
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	1a9b      	subs	r3, r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	440b      	add	r3, r1
 8003486:	334d      	adds	r3, #77	@ 0x4d
 8003488:	2203      	movs	r2, #3
 800348a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	78fa      	ldrb	r2, [r7, #3]
 8003492:	4611      	mov	r1, r2
 8003494:	4618      	mov	r0, r3
 8003496:	f002 fae0 	bl	8005a5a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800349a:	78fa      	ldrb	r2, [r7, #3]
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	4613      	mov	r3, r2
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	1a9b      	subs	r3, r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	440b      	add	r3, r1
 80034a8:	331a      	adds	r3, #26
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	f040 8437 	bne.w	8003d20 <HCD_HC_OUT_IRQHandler+0x978>
 80034b2:	78fa      	ldrb	r2, [r7, #3]
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	4613      	mov	r3, r2
 80034b8:	011b      	lsls	r3, r3, #4
 80034ba:	1a9b      	subs	r3, r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	440b      	add	r3, r1
 80034c0:	331b      	adds	r3, #27
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f040 842b 	bne.w	8003d20 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80034ca:	78fa      	ldrb	r2, [r7, #3]
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	4613      	mov	r3, r2
 80034d0:	011b      	lsls	r3, r3, #4
 80034d2:	1a9b      	subs	r3, r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	440b      	add	r3, r1
 80034d8:	3326      	adds	r3, #38	@ 0x26
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d009      	beq.n	80034f4 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80034e0:	78fa      	ldrb	r2, [r7, #3]
 80034e2:	6879      	ldr	r1, [r7, #4]
 80034e4:	4613      	mov	r3, r2
 80034e6:	011b      	lsls	r3, r3, #4
 80034e8:	1a9b      	subs	r3, r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	440b      	add	r3, r1
 80034ee:	331b      	adds	r3, #27
 80034f0:	2201      	movs	r2, #1
 80034f2:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80034f4:	78fa      	ldrb	r2, [r7, #3]
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	4613      	mov	r3, r2
 80034fa:	011b      	lsls	r3, r3, #4
 80034fc:	1a9b      	subs	r3, r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	440b      	add	r3, r1
 8003502:	334d      	adds	r3, #77	@ 0x4d
 8003504:	2203      	movs	r2, #3
 8003506:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	78fa      	ldrb	r2, [r7, #3]
 800350e:	4611      	mov	r1, r2
 8003510:	4618      	mov	r0, r3
 8003512:	f002 faa2 	bl	8005a5a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003516:	78fa      	ldrb	r2, [r7, #3]
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	4613      	mov	r3, r2
 800351c:	011b      	lsls	r3, r3, #4
 800351e:	1a9b      	subs	r3, r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	440b      	add	r3, r1
 8003524:	3344      	adds	r3, #68	@ 0x44
 8003526:	2200      	movs	r2, #0
 8003528:	601a      	str	r2, [r3, #0]
 800352a:	e3f9      	b.n	8003d20 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	78fa      	ldrb	r2, [r7, #3]
 8003532:	4611      	mov	r1, r2
 8003534:	4618      	mov	r0, r3
 8003536:	f001 fcec 	bl	8004f12 <USB_ReadChInterrupts>
 800353a:	4603      	mov	r3, r0
 800353c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003540:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003544:	d111      	bne.n	800356a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003546:	78fb      	ldrb	r3, [r7, #3]
 8003548:	015a      	lsls	r2, r3, #5
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	4413      	add	r3, r2
 800354e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003552:	461a      	mov	r2, r3
 8003554:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003558:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	78fa      	ldrb	r2, [r7, #3]
 8003560:	4611      	mov	r1, r2
 8003562:	4618      	mov	r0, r3
 8003564:	f002 fa79 	bl	8005a5a <USB_HC_Halt>
 8003568:	e3da      	b.n	8003d20 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	78fa      	ldrb	r2, [r7, #3]
 8003570:	4611      	mov	r1, r2
 8003572:	4618      	mov	r0, r3
 8003574:	f001 fccd 	bl	8004f12 <USB_ReadChInterrupts>
 8003578:	4603      	mov	r3, r0
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b01      	cmp	r3, #1
 8003580:	d168      	bne.n	8003654 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003582:	78fa      	ldrb	r2, [r7, #3]
 8003584:	6879      	ldr	r1, [r7, #4]
 8003586:	4613      	mov	r3, r2
 8003588:	011b      	lsls	r3, r3, #4
 800358a:	1a9b      	subs	r3, r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	440b      	add	r3, r1
 8003590:	3344      	adds	r3, #68	@ 0x44
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	78fa      	ldrb	r2, [r7, #3]
 800359c:	4611      	mov	r1, r2
 800359e:	4618      	mov	r0, r3
 80035a0:	f001 fcb7 	bl	8004f12 <USB_ReadChInterrupts>
 80035a4:	4603      	mov	r3, r0
 80035a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035aa:	2b40      	cmp	r3, #64	@ 0x40
 80035ac:	d112      	bne.n	80035d4 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80035ae:	78fa      	ldrb	r2, [r7, #3]
 80035b0:	6879      	ldr	r1, [r7, #4]
 80035b2:	4613      	mov	r3, r2
 80035b4:	011b      	lsls	r3, r3, #4
 80035b6:	1a9b      	subs	r3, r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	440b      	add	r3, r1
 80035bc:	3319      	adds	r3, #25
 80035be:	2201      	movs	r2, #1
 80035c0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80035c2:	78fb      	ldrb	r3, [r7, #3]
 80035c4:	015a      	lsls	r2, r3, #5
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	4413      	add	r3, r2
 80035ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035ce:	461a      	mov	r2, r3
 80035d0:	2340      	movs	r3, #64	@ 0x40
 80035d2:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80035d4:	78fa      	ldrb	r2, [r7, #3]
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	4613      	mov	r3, r2
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	1a9b      	subs	r3, r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	331b      	adds	r3, #27
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d019      	beq.n	800361e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80035ea:	78fa      	ldrb	r2, [r7, #3]
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	4613      	mov	r3, r2
 80035f0:	011b      	lsls	r3, r3, #4
 80035f2:	1a9b      	subs	r3, r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	440b      	add	r3, r1
 80035f8:	331b      	adds	r3, #27
 80035fa:	2200      	movs	r2, #0
 80035fc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80035fe:	78fb      	ldrb	r3, [r7, #3]
 8003600:	015a      	lsls	r2, r3, #5
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	4413      	add	r3, r2
 8003606:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	78fa      	ldrb	r2, [r7, #3]
 800360e:	0151      	lsls	r1, r2, #5
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	440a      	add	r2, r1
 8003614:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003618:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800361c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800361e:	78fb      	ldrb	r3, [r7, #3]
 8003620:	015a      	lsls	r2, r3, #5
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	4413      	add	r3, r2
 8003626:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800362a:	461a      	mov	r2, r3
 800362c:	2301      	movs	r3, #1
 800362e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003630:	78fa      	ldrb	r2, [r7, #3]
 8003632:	6879      	ldr	r1, [r7, #4]
 8003634:	4613      	mov	r3, r2
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	1a9b      	subs	r3, r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	440b      	add	r3, r1
 800363e:	334d      	adds	r3, #77	@ 0x4d
 8003640:	2201      	movs	r2, #1
 8003642:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	78fa      	ldrb	r2, [r7, #3]
 800364a:	4611      	mov	r1, r2
 800364c:	4618      	mov	r0, r3
 800364e:	f002 fa04 	bl	8005a5a <USB_HC_Halt>
 8003652:	e365      	b.n	8003d20 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	78fa      	ldrb	r2, [r7, #3]
 800365a:	4611      	mov	r1, r2
 800365c:	4618      	mov	r0, r3
 800365e:	f001 fc58 	bl	8004f12 <USB_ReadChInterrupts>
 8003662:	4603      	mov	r3, r0
 8003664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003668:	2b40      	cmp	r3, #64	@ 0x40
 800366a:	d139      	bne.n	80036e0 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800366c:	78fa      	ldrb	r2, [r7, #3]
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	4613      	mov	r3, r2
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	1a9b      	subs	r3, r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	440b      	add	r3, r1
 800367a:	334d      	adds	r3, #77	@ 0x4d
 800367c:	2205      	movs	r2, #5
 800367e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003680:	78fa      	ldrb	r2, [r7, #3]
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	4613      	mov	r3, r2
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	1a9b      	subs	r3, r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	331a      	adds	r3, #26
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d109      	bne.n	80036aa <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003696:	78fa      	ldrb	r2, [r7, #3]
 8003698:	6879      	ldr	r1, [r7, #4]
 800369a:	4613      	mov	r3, r2
 800369c:	011b      	lsls	r3, r3, #4
 800369e:	1a9b      	subs	r3, r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	440b      	add	r3, r1
 80036a4:	3319      	adds	r3, #25
 80036a6:	2201      	movs	r2, #1
 80036a8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80036aa:	78fa      	ldrb	r2, [r7, #3]
 80036ac:	6879      	ldr	r1, [r7, #4]
 80036ae:	4613      	mov	r3, r2
 80036b0:	011b      	lsls	r3, r3, #4
 80036b2:	1a9b      	subs	r3, r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	440b      	add	r3, r1
 80036b8:	3344      	adds	r3, #68	@ 0x44
 80036ba:	2200      	movs	r2, #0
 80036bc:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	78fa      	ldrb	r2, [r7, #3]
 80036c4:	4611      	mov	r1, r2
 80036c6:	4618      	mov	r0, r3
 80036c8:	f002 f9c7 	bl	8005a5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80036cc:	78fb      	ldrb	r3, [r7, #3]
 80036ce:	015a      	lsls	r2, r3, #5
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	4413      	add	r3, r2
 80036d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036d8:	461a      	mov	r2, r3
 80036da:	2340      	movs	r3, #64	@ 0x40
 80036dc:	6093      	str	r3, [r2, #8]
 80036de:	e31f      	b.n	8003d20 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	78fa      	ldrb	r2, [r7, #3]
 80036e6:	4611      	mov	r1, r2
 80036e8:	4618      	mov	r0, r3
 80036ea:	f001 fc12 	bl	8004f12 <USB_ReadChInterrupts>
 80036ee:	4603      	mov	r3, r0
 80036f0:	f003 0308 	and.w	r3, r3, #8
 80036f4:	2b08      	cmp	r3, #8
 80036f6:	d11a      	bne.n	800372e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80036f8:	78fb      	ldrb	r3, [r7, #3]
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003704:	461a      	mov	r2, r3
 8003706:	2308      	movs	r3, #8
 8003708:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800370a:	78fa      	ldrb	r2, [r7, #3]
 800370c:	6879      	ldr	r1, [r7, #4]
 800370e:	4613      	mov	r3, r2
 8003710:	011b      	lsls	r3, r3, #4
 8003712:	1a9b      	subs	r3, r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	440b      	add	r3, r1
 8003718:	334d      	adds	r3, #77	@ 0x4d
 800371a:	2206      	movs	r2, #6
 800371c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	78fa      	ldrb	r2, [r7, #3]
 8003724:	4611      	mov	r1, r2
 8003726:	4618      	mov	r0, r3
 8003728:	f002 f997 	bl	8005a5a <USB_HC_Halt>
 800372c:	e2f8      	b.n	8003d20 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	78fa      	ldrb	r2, [r7, #3]
 8003734:	4611      	mov	r1, r2
 8003736:	4618      	mov	r0, r3
 8003738:	f001 fbeb 	bl	8004f12 <USB_ReadChInterrupts>
 800373c:	4603      	mov	r3, r0
 800373e:	f003 0310 	and.w	r3, r3, #16
 8003742:	2b10      	cmp	r3, #16
 8003744:	d144      	bne.n	80037d0 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003746:	78fa      	ldrb	r2, [r7, #3]
 8003748:	6879      	ldr	r1, [r7, #4]
 800374a:	4613      	mov	r3, r2
 800374c:	011b      	lsls	r3, r3, #4
 800374e:	1a9b      	subs	r3, r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	440b      	add	r3, r1
 8003754:	3344      	adds	r3, #68	@ 0x44
 8003756:	2200      	movs	r2, #0
 8003758:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800375a:	78fa      	ldrb	r2, [r7, #3]
 800375c:	6879      	ldr	r1, [r7, #4]
 800375e:	4613      	mov	r3, r2
 8003760:	011b      	lsls	r3, r3, #4
 8003762:	1a9b      	subs	r3, r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	440b      	add	r3, r1
 8003768:	334d      	adds	r3, #77	@ 0x4d
 800376a:	2204      	movs	r2, #4
 800376c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800376e:	78fa      	ldrb	r2, [r7, #3]
 8003770:	6879      	ldr	r1, [r7, #4]
 8003772:	4613      	mov	r3, r2
 8003774:	011b      	lsls	r3, r3, #4
 8003776:	1a9b      	subs	r3, r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	440b      	add	r3, r1
 800377c:	3319      	adds	r3, #25
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d114      	bne.n	80037ae <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003784:	78fa      	ldrb	r2, [r7, #3]
 8003786:	6879      	ldr	r1, [r7, #4]
 8003788:	4613      	mov	r3, r2
 800378a:	011b      	lsls	r3, r3, #4
 800378c:	1a9b      	subs	r3, r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	440b      	add	r3, r1
 8003792:	3318      	adds	r3, #24
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d109      	bne.n	80037ae <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800379a:	78fa      	ldrb	r2, [r7, #3]
 800379c:	6879      	ldr	r1, [r7, #4]
 800379e:	4613      	mov	r3, r2
 80037a0:	011b      	lsls	r3, r3, #4
 80037a2:	1a9b      	subs	r3, r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	440b      	add	r3, r1
 80037a8:	3319      	adds	r3, #25
 80037aa:	2201      	movs	r2, #1
 80037ac:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	78fa      	ldrb	r2, [r7, #3]
 80037b4:	4611      	mov	r1, r2
 80037b6:	4618      	mov	r0, r3
 80037b8:	f002 f94f 	bl	8005a5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80037bc:	78fb      	ldrb	r3, [r7, #3]
 80037be:	015a      	lsls	r2, r3, #5
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	4413      	add	r3, r2
 80037c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037c8:	461a      	mov	r2, r3
 80037ca:	2310      	movs	r3, #16
 80037cc:	6093      	str	r3, [r2, #8]
 80037ce:	e2a7      	b.n	8003d20 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	78fa      	ldrb	r2, [r7, #3]
 80037d6:	4611      	mov	r1, r2
 80037d8:	4618      	mov	r0, r3
 80037da:	f001 fb9a 	bl	8004f12 <USB_ReadChInterrupts>
 80037de:	4603      	mov	r3, r0
 80037e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037e4:	2b80      	cmp	r3, #128	@ 0x80
 80037e6:	f040 8083 	bne.w	80038f0 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	799b      	ldrb	r3, [r3, #6]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d111      	bne.n	8003816 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80037f2:	78fa      	ldrb	r2, [r7, #3]
 80037f4:	6879      	ldr	r1, [r7, #4]
 80037f6:	4613      	mov	r3, r2
 80037f8:	011b      	lsls	r3, r3, #4
 80037fa:	1a9b      	subs	r3, r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	440b      	add	r3, r1
 8003800:	334d      	adds	r3, #77	@ 0x4d
 8003802:	2207      	movs	r2, #7
 8003804:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	78fa      	ldrb	r2, [r7, #3]
 800380c:	4611      	mov	r1, r2
 800380e:	4618      	mov	r0, r3
 8003810:	f002 f923 	bl	8005a5a <USB_HC_Halt>
 8003814:	e062      	b.n	80038dc <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003816:	78fa      	ldrb	r2, [r7, #3]
 8003818:	6879      	ldr	r1, [r7, #4]
 800381a:	4613      	mov	r3, r2
 800381c:	011b      	lsls	r3, r3, #4
 800381e:	1a9b      	subs	r3, r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	440b      	add	r3, r1
 8003824:	3344      	adds	r3, #68	@ 0x44
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	1c59      	adds	r1, r3, #1
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	4613      	mov	r3, r2
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	1a9b      	subs	r3, r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4403      	add	r3, r0
 8003836:	3344      	adds	r3, #68	@ 0x44
 8003838:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800383a:	78fa      	ldrb	r2, [r7, #3]
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	4613      	mov	r3, r2
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	1a9b      	subs	r3, r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	440b      	add	r3, r1
 8003848:	3344      	adds	r3, #68	@ 0x44
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2b02      	cmp	r3, #2
 800384e:	d922      	bls.n	8003896 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003850:	78fa      	ldrb	r2, [r7, #3]
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	4613      	mov	r3, r2
 8003856:	011b      	lsls	r3, r3, #4
 8003858:	1a9b      	subs	r3, r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	440b      	add	r3, r1
 800385e:	3344      	adds	r3, #68	@ 0x44
 8003860:	2200      	movs	r2, #0
 8003862:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003864:	78fa      	ldrb	r2, [r7, #3]
 8003866:	6879      	ldr	r1, [r7, #4]
 8003868:	4613      	mov	r3, r2
 800386a:	011b      	lsls	r3, r3, #4
 800386c:	1a9b      	subs	r3, r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	334c      	adds	r3, #76	@ 0x4c
 8003874:	2204      	movs	r2, #4
 8003876:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003878:	78fa      	ldrb	r2, [r7, #3]
 800387a:	6879      	ldr	r1, [r7, #4]
 800387c:	4613      	mov	r3, r2
 800387e:	011b      	lsls	r3, r3, #4
 8003880:	1a9b      	subs	r3, r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	440b      	add	r3, r1
 8003886:	334c      	adds	r3, #76	@ 0x4c
 8003888:	781a      	ldrb	r2, [r3, #0]
 800388a:	78fb      	ldrb	r3, [r7, #3]
 800388c:	4619      	mov	r1, r3
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f004 fc3c 	bl	800810c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003894:	e022      	b.n	80038dc <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003896:	78fa      	ldrb	r2, [r7, #3]
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	4613      	mov	r3, r2
 800389c:	011b      	lsls	r3, r3, #4
 800389e:	1a9b      	subs	r3, r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	334c      	adds	r3, #76	@ 0x4c
 80038a6:	2202      	movs	r2, #2
 80038a8:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80038aa:	78fb      	ldrb	r3, [r7, #3]
 80038ac:	015a      	lsls	r2, r3, #5
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	4413      	add	r3, r2
 80038b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80038c0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80038c8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80038ca:	78fb      	ldrb	r3, [r7, #3]
 80038cc:	015a      	lsls	r2, r3, #5
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	4413      	add	r3, r2
 80038d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038d6:	461a      	mov	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80038dc:	78fb      	ldrb	r3, [r7, #3]
 80038de:	015a      	lsls	r2, r3, #5
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	4413      	add	r3, r2
 80038e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038e8:	461a      	mov	r2, r3
 80038ea:	2380      	movs	r3, #128	@ 0x80
 80038ec:	6093      	str	r3, [r2, #8]
 80038ee:	e217      	b.n	8003d20 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	78fa      	ldrb	r2, [r7, #3]
 80038f6:	4611      	mov	r1, r2
 80038f8:	4618      	mov	r0, r3
 80038fa:	f001 fb0a 	bl	8004f12 <USB_ReadChInterrupts>
 80038fe:	4603      	mov	r3, r0
 8003900:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003904:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003908:	d11b      	bne.n	8003942 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800390a:	78fa      	ldrb	r2, [r7, #3]
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	4613      	mov	r3, r2
 8003910:	011b      	lsls	r3, r3, #4
 8003912:	1a9b      	subs	r3, r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	440b      	add	r3, r1
 8003918:	334d      	adds	r3, #77	@ 0x4d
 800391a:	2209      	movs	r2, #9
 800391c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	78fa      	ldrb	r2, [r7, #3]
 8003924:	4611      	mov	r1, r2
 8003926:	4618      	mov	r0, r3
 8003928:	f002 f897 	bl	8005a5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800392c:	78fb      	ldrb	r3, [r7, #3]
 800392e:	015a      	lsls	r2, r3, #5
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	4413      	add	r3, r2
 8003934:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003938:	461a      	mov	r2, r3
 800393a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800393e:	6093      	str	r3, [r2, #8]
 8003940:	e1ee      	b.n	8003d20 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	78fa      	ldrb	r2, [r7, #3]
 8003948:	4611      	mov	r1, r2
 800394a:	4618      	mov	r0, r3
 800394c:	f001 fae1 	bl	8004f12 <USB_ReadChInterrupts>
 8003950:	4603      	mov	r3, r0
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b02      	cmp	r3, #2
 8003958:	f040 81df 	bne.w	8003d1a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800395c:	78fb      	ldrb	r3, [r7, #3]
 800395e:	015a      	lsls	r2, r3, #5
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	4413      	add	r3, r2
 8003964:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003968:	461a      	mov	r2, r3
 800396a:	2302      	movs	r3, #2
 800396c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800396e:	78fa      	ldrb	r2, [r7, #3]
 8003970:	6879      	ldr	r1, [r7, #4]
 8003972:	4613      	mov	r3, r2
 8003974:	011b      	lsls	r3, r3, #4
 8003976:	1a9b      	subs	r3, r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	440b      	add	r3, r1
 800397c:	334d      	adds	r3, #77	@ 0x4d
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	2b01      	cmp	r3, #1
 8003982:	f040 8093 	bne.w	8003aac <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003986:	78fa      	ldrb	r2, [r7, #3]
 8003988:	6879      	ldr	r1, [r7, #4]
 800398a:	4613      	mov	r3, r2
 800398c:	011b      	lsls	r3, r3, #4
 800398e:	1a9b      	subs	r3, r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	440b      	add	r3, r1
 8003994:	334d      	adds	r3, #77	@ 0x4d
 8003996:	2202      	movs	r2, #2
 8003998:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800399a:	78fa      	ldrb	r2, [r7, #3]
 800399c:	6879      	ldr	r1, [r7, #4]
 800399e:	4613      	mov	r3, r2
 80039a0:	011b      	lsls	r3, r3, #4
 80039a2:	1a9b      	subs	r3, r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	440b      	add	r3, r1
 80039a8:	334c      	adds	r3, #76	@ 0x4c
 80039aa:	2201      	movs	r2, #1
 80039ac:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80039ae:	78fa      	ldrb	r2, [r7, #3]
 80039b0:	6879      	ldr	r1, [r7, #4]
 80039b2:	4613      	mov	r3, r2
 80039b4:	011b      	lsls	r3, r3, #4
 80039b6:	1a9b      	subs	r3, r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	440b      	add	r3, r1
 80039bc:	3326      	adds	r3, #38	@ 0x26
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d00b      	beq.n	80039dc <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80039c4:	78fa      	ldrb	r2, [r7, #3]
 80039c6:	6879      	ldr	r1, [r7, #4]
 80039c8:	4613      	mov	r3, r2
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	1a9b      	subs	r3, r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	3326      	adds	r3, #38	@ 0x26
 80039d4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80039d6:	2b03      	cmp	r3, #3
 80039d8:	f040 8190 	bne.w	8003cfc <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	799b      	ldrb	r3, [r3, #6]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d115      	bne.n	8003a10 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80039e4:	78fa      	ldrb	r2, [r7, #3]
 80039e6:	6879      	ldr	r1, [r7, #4]
 80039e8:	4613      	mov	r3, r2
 80039ea:	011b      	lsls	r3, r3, #4
 80039ec:	1a9b      	subs	r3, r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	440b      	add	r3, r1
 80039f2:	333d      	adds	r3, #61	@ 0x3d
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	78fa      	ldrb	r2, [r7, #3]
 80039f8:	f083 0301 	eor.w	r3, r3, #1
 80039fc:	b2d8      	uxtb	r0, r3
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	4613      	mov	r3, r2
 8003a02:	011b      	lsls	r3, r3, #4
 8003a04:	1a9b      	subs	r3, r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	440b      	add	r3, r1
 8003a0a:	333d      	adds	r3, #61	@ 0x3d
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	799b      	ldrb	r3, [r3, #6]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	f040 8171 	bne.w	8003cfc <HCD_HC_OUT_IRQHandler+0x954>
 8003a1a:	78fa      	ldrb	r2, [r7, #3]
 8003a1c:	6879      	ldr	r1, [r7, #4]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	011b      	lsls	r3, r3, #4
 8003a22:	1a9b      	subs	r3, r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	440b      	add	r3, r1
 8003a28:	3334      	adds	r3, #52	@ 0x34
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 8165 	beq.w	8003cfc <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003a32:	78fa      	ldrb	r2, [r7, #3]
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	4613      	mov	r3, r2
 8003a38:	011b      	lsls	r3, r3, #4
 8003a3a:	1a9b      	subs	r3, r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	440b      	add	r3, r1
 8003a40:	3334      	adds	r3, #52	@ 0x34
 8003a42:	6819      	ldr	r1, [r3, #0]
 8003a44:	78fa      	ldrb	r2, [r7, #3]
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	011b      	lsls	r3, r3, #4
 8003a4c:	1a9b      	subs	r3, r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4403      	add	r3, r0
 8003a52:	3328      	adds	r3, #40	@ 0x28
 8003a54:	881b      	ldrh	r3, [r3, #0]
 8003a56:	440b      	add	r3, r1
 8003a58:	1e59      	subs	r1, r3, #1
 8003a5a:	78fa      	ldrb	r2, [r7, #3]
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	011b      	lsls	r3, r3, #4
 8003a62:	1a9b      	subs	r3, r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4403      	add	r3, r0
 8003a68:	3328      	adds	r3, #40	@ 0x28
 8003a6a:	881b      	ldrh	r3, [r3, #0]
 8003a6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a70:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 813f 	beq.w	8003cfc <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003a7e:	78fa      	ldrb	r2, [r7, #3]
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	4613      	mov	r3, r2
 8003a84:	011b      	lsls	r3, r3, #4
 8003a86:	1a9b      	subs	r3, r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	440b      	add	r3, r1
 8003a8c:	333d      	adds	r3, #61	@ 0x3d
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	78fa      	ldrb	r2, [r7, #3]
 8003a92:	f083 0301 	eor.w	r3, r3, #1
 8003a96:	b2d8      	uxtb	r0, r3
 8003a98:	6879      	ldr	r1, [r7, #4]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	1a9b      	subs	r3, r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	440b      	add	r3, r1
 8003aa4:	333d      	adds	r3, #61	@ 0x3d
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	701a      	strb	r2, [r3, #0]
 8003aaa:	e127      	b.n	8003cfc <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003aac:	78fa      	ldrb	r2, [r7, #3]
 8003aae:	6879      	ldr	r1, [r7, #4]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	011b      	lsls	r3, r3, #4
 8003ab4:	1a9b      	subs	r3, r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	440b      	add	r3, r1
 8003aba:	334d      	adds	r3, #77	@ 0x4d
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	2b03      	cmp	r3, #3
 8003ac0:	d120      	bne.n	8003b04 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ac2:	78fa      	ldrb	r2, [r7, #3]
 8003ac4:	6879      	ldr	r1, [r7, #4]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	011b      	lsls	r3, r3, #4
 8003aca:	1a9b      	subs	r3, r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	440b      	add	r3, r1
 8003ad0:	334d      	adds	r3, #77	@ 0x4d
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003ad6:	78fa      	ldrb	r2, [r7, #3]
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	4613      	mov	r3, r2
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	1a9b      	subs	r3, r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	440b      	add	r3, r1
 8003ae4:	331b      	adds	r3, #27
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	f040 8107 	bne.w	8003cfc <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003aee:	78fa      	ldrb	r2, [r7, #3]
 8003af0:	6879      	ldr	r1, [r7, #4]
 8003af2:	4613      	mov	r3, r2
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	1a9b      	subs	r3, r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	440b      	add	r3, r1
 8003afc:	334c      	adds	r3, #76	@ 0x4c
 8003afe:	2202      	movs	r2, #2
 8003b00:	701a      	strb	r2, [r3, #0]
 8003b02:	e0fb      	b.n	8003cfc <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003b04:	78fa      	ldrb	r2, [r7, #3]
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	011b      	lsls	r3, r3, #4
 8003b0c:	1a9b      	subs	r3, r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	334d      	adds	r3, #77	@ 0x4d
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	d13a      	bne.n	8003b90 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b1a:	78fa      	ldrb	r2, [r7, #3]
 8003b1c:	6879      	ldr	r1, [r7, #4]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	011b      	lsls	r3, r3, #4
 8003b22:	1a9b      	subs	r3, r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	440b      	add	r3, r1
 8003b28:	334d      	adds	r3, #77	@ 0x4d
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b2e:	78fa      	ldrb	r2, [r7, #3]
 8003b30:	6879      	ldr	r1, [r7, #4]
 8003b32:	4613      	mov	r3, r2
 8003b34:	011b      	lsls	r3, r3, #4
 8003b36:	1a9b      	subs	r3, r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	440b      	add	r3, r1
 8003b3c:	334c      	adds	r3, #76	@ 0x4c
 8003b3e:	2202      	movs	r2, #2
 8003b40:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003b42:	78fa      	ldrb	r2, [r7, #3]
 8003b44:	6879      	ldr	r1, [r7, #4]
 8003b46:	4613      	mov	r3, r2
 8003b48:	011b      	lsls	r3, r3, #4
 8003b4a:	1a9b      	subs	r3, r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	440b      	add	r3, r1
 8003b50:	331b      	adds	r3, #27
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	f040 80d1 	bne.w	8003cfc <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003b5a:	78fa      	ldrb	r2, [r7, #3]
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	011b      	lsls	r3, r3, #4
 8003b62:	1a9b      	subs	r3, r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	440b      	add	r3, r1
 8003b68:	331b      	adds	r3, #27
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003b6e:	78fb      	ldrb	r3, [r7, #3]
 8003b70:	015a      	lsls	r2, r3, #5
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	4413      	add	r3, r2
 8003b76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	78fa      	ldrb	r2, [r7, #3]
 8003b7e:	0151      	lsls	r1, r2, #5
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	440a      	add	r2, r1
 8003b84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b8c:	6053      	str	r3, [r2, #4]
 8003b8e:	e0b5      	b.n	8003cfc <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003b90:	78fa      	ldrb	r2, [r7, #3]
 8003b92:	6879      	ldr	r1, [r7, #4]
 8003b94:	4613      	mov	r3, r2
 8003b96:	011b      	lsls	r3, r3, #4
 8003b98:	1a9b      	subs	r3, r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	440b      	add	r3, r1
 8003b9e:	334d      	adds	r3, #77	@ 0x4d
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	2b05      	cmp	r3, #5
 8003ba4:	d114      	bne.n	8003bd0 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ba6:	78fa      	ldrb	r2, [r7, #3]
 8003ba8:	6879      	ldr	r1, [r7, #4]
 8003baa:	4613      	mov	r3, r2
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	1a9b      	subs	r3, r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	440b      	add	r3, r1
 8003bb4:	334d      	adds	r3, #77	@ 0x4d
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003bba:	78fa      	ldrb	r2, [r7, #3]
 8003bbc:	6879      	ldr	r1, [r7, #4]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	011b      	lsls	r3, r3, #4
 8003bc2:	1a9b      	subs	r3, r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	440b      	add	r3, r1
 8003bc8:	334c      	adds	r3, #76	@ 0x4c
 8003bca:	2202      	movs	r2, #2
 8003bcc:	701a      	strb	r2, [r3, #0]
 8003bce:	e095      	b.n	8003cfc <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003bd0:	78fa      	ldrb	r2, [r7, #3]
 8003bd2:	6879      	ldr	r1, [r7, #4]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	011b      	lsls	r3, r3, #4
 8003bd8:	1a9b      	subs	r3, r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	440b      	add	r3, r1
 8003bde:	334d      	adds	r3, #77	@ 0x4d
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	2b06      	cmp	r3, #6
 8003be4:	d114      	bne.n	8003c10 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003be6:	78fa      	ldrb	r2, [r7, #3]
 8003be8:	6879      	ldr	r1, [r7, #4]
 8003bea:	4613      	mov	r3, r2
 8003bec:	011b      	lsls	r3, r3, #4
 8003bee:	1a9b      	subs	r3, r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	440b      	add	r3, r1
 8003bf4:	334d      	adds	r3, #77	@ 0x4d
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003bfa:	78fa      	ldrb	r2, [r7, #3]
 8003bfc:	6879      	ldr	r1, [r7, #4]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	011b      	lsls	r3, r3, #4
 8003c02:	1a9b      	subs	r3, r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	440b      	add	r3, r1
 8003c08:	334c      	adds	r3, #76	@ 0x4c
 8003c0a:	2205      	movs	r2, #5
 8003c0c:	701a      	strb	r2, [r3, #0]
 8003c0e:	e075      	b.n	8003cfc <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003c10:	78fa      	ldrb	r2, [r7, #3]
 8003c12:	6879      	ldr	r1, [r7, #4]
 8003c14:	4613      	mov	r3, r2
 8003c16:	011b      	lsls	r3, r3, #4
 8003c18:	1a9b      	subs	r3, r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	440b      	add	r3, r1
 8003c1e:	334d      	adds	r3, #77	@ 0x4d
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	2b07      	cmp	r3, #7
 8003c24:	d00a      	beq.n	8003c3c <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003c26:	78fa      	ldrb	r2, [r7, #3]
 8003c28:	6879      	ldr	r1, [r7, #4]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	1a9b      	subs	r3, r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	440b      	add	r3, r1
 8003c34:	334d      	adds	r3, #77	@ 0x4d
 8003c36:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003c38:	2b09      	cmp	r3, #9
 8003c3a:	d170      	bne.n	8003d1e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c3c:	78fa      	ldrb	r2, [r7, #3]
 8003c3e:	6879      	ldr	r1, [r7, #4]
 8003c40:	4613      	mov	r3, r2
 8003c42:	011b      	lsls	r3, r3, #4
 8003c44:	1a9b      	subs	r3, r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	440b      	add	r3, r1
 8003c4a:	334d      	adds	r3, #77	@ 0x4d
 8003c4c:	2202      	movs	r2, #2
 8003c4e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003c50:	78fa      	ldrb	r2, [r7, #3]
 8003c52:	6879      	ldr	r1, [r7, #4]
 8003c54:	4613      	mov	r3, r2
 8003c56:	011b      	lsls	r3, r3, #4
 8003c58:	1a9b      	subs	r3, r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	3344      	adds	r3, #68	@ 0x44
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	1c59      	adds	r1, r3, #1
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	4613      	mov	r3, r2
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	1a9b      	subs	r3, r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4403      	add	r3, r0
 8003c70:	3344      	adds	r3, #68	@ 0x44
 8003c72:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003c74:	78fa      	ldrb	r2, [r7, #3]
 8003c76:	6879      	ldr	r1, [r7, #4]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	011b      	lsls	r3, r3, #4
 8003c7c:	1a9b      	subs	r3, r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	440b      	add	r3, r1
 8003c82:	3344      	adds	r3, #68	@ 0x44
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d914      	bls.n	8003cb4 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003c8a:	78fa      	ldrb	r2, [r7, #3]
 8003c8c:	6879      	ldr	r1, [r7, #4]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	011b      	lsls	r3, r3, #4
 8003c92:	1a9b      	subs	r3, r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	440b      	add	r3, r1
 8003c98:	3344      	adds	r3, #68	@ 0x44
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003c9e:	78fa      	ldrb	r2, [r7, #3]
 8003ca0:	6879      	ldr	r1, [r7, #4]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	011b      	lsls	r3, r3, #4
 8003ca6:	1a9b      	subs	r3, r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	440b      	add	r3, r1
 8003cac:	334c      	adds	r3, #76	@ 0x4c
 8003cae:	2204      	movs	r2, #4
 8003cb0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003cb2:	e022      	b.n	8003cfa <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003cb4:	78fa      	ldrb	r2, [r7, #3]
 8003cb6:	6879      	ldr	r1, [r7, #4]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	1a9b      	subs	r3, r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	334c      	adds	r3, #76	@ 0x4c
 8003cc4:	2202      	movs	r2, #2
 8003cc6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003cc8:	78fb      	ldrb	r3, [r7, #3]
 8003cca:	015a      	lsls	r2, r3, #5
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	4413      	add	r3, r2
 8003cd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003cde:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ce6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003ce8:	78fb      	ldrb	r3, [r7, #3]
 8003cea:	015a      	lsls	r2, r3, #5
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	4413      	add	r3, r2
 8003cf0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003cfa:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003cfc:	78fa      	ldrb	r2, [r7, #3]
 8003cfe:	6879      	ldr	r1, [r7, #4]
 8003d00:	4613      	mov	r3, r2
 8003d02:	011b      	lsls	r3, r3, #4
 8003d04:	1a9b      	subs	r3, r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	440b      	add	r3, r1
 8003d0a:	334c      	adds	r3, #76	@ 0x4c
 8003d0c:	781a      	ldrb	r2, [r3, #0]
 8003d0e:	78fb      	ldrb	r3, [r7, #3]
 8003d10:	4619      	mov	r1, r3
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f004 f9fa 	bl	800810c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003d18:	e002      	b.n	8003d20 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003d1a:	bf00      	nop
 8003d1c:	e000      	b.n	8003d20 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003d1e:	bf00      	nop
  }
}
 8003d20:	3718      	adds	r7, #24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b08a      	sub	sp, #40	@ 0x28
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d36:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f003 030f 	and.w	r3, r3, #15
 8003d46:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	0c5b      	lsrs	r3, r3, #17
 8003d4c:	f003 030f 	and.w	r3, r3, #15
 8003d50:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	091b      	lsrs	r3, r3, #4
 8003d56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d5a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d004      	beq.n	8003d6c <HCD_RXQLVL_IRQHandler+0x46>
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	2b05      	cmp	r3, #5
 8003d66:	f000 80b6 	beq.w	8003ed6 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003d6a:	e0b7      	b.n	8003edc <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 80b3 	beq.w	8003eda <HCD_RXQLVL_IRQHandler+0x1b4>
 8003d74:	6879      	ldr	r1, [r7, #4]
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	011b      	lsls	r3, r3, #4
 8003d7c:	1a9b      	subs	r3, r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	440b      	add	r3, r1
 8003d82:	332c      	adds	r3, #44	@ 0x2c
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 80a7 	beq.w	8003eda <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003d8c:	6879      	ldr	r1, [r7, #4]
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	4613      	mov	r3, r2
 8003d92:	011b      	lsls	r3, r3, #4
 8003d94:	1a9b      	subs	r3, r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	440b      	add	r3, r1
 8003d9a:	3338      	adds	r3, #56	@ 0x38
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	18d1      	adds	r1, r2, r3
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	4613      	mov	r3, r2
 8003da8:	011b      	lsls	r3, r3, #4
 8003daa:	1a9b      	subs	r3, r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4403      	add	r3, r0
 8003db0:	3334      	adds	r3, #52	@ 0x34
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4299      	cmp	r1, r3
 8003db6:	f200 8083 	bhi.w	8003ec0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6818      	ldr	r0, [r3, #0]
 8003dbe:	6879      	ldr	r1, [r7, #4]
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	1a9b      	subs	r3, r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	440b      	add	r3, r1
 8003dcc:	332c      	adds	r3, #44	@ 0x2c
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	b292      	uxth	r2, r2
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	f001 f831 	bl	8004e3c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003dda:	6879      	ldr	r1, [r7, #4]
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	4613      	mov	r3, r2
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	1a9b      	subs	r3, r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	440b      	add	r3, r1
 8003de8:	332c      	adds	r3, #44	@ 0x2c
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	18d1      	adds	r1, r2, r3
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	4613      	mov	r3, r2
 8003df6:	011b      	lsls	r3, r3, #4
 8003df8:	1a9b      	subs	r3, r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4403      	add	r3, r0
 8003dfe:	332c      	adds	r3, #44	@ 0x2c
 8003e00:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003e02:	6879      	ldr	r1, [r7, #4]
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	4613      	mov	r3, r2
 8003e08:	011b      	lsls	r3, r3, #4
 8003e0a:	1a9b      	subs	r3, r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	440b      	add	r3, r1
 8003e10:	3338      	adds	r3, #56	@ 0x38
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	18d1      	adds	r1, r2, r3
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	011b      	lsls	r3, r3, #4
 8003e20:	1a9b      	subs	r3, r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4403      	add	r3, r0
 8003e26:	3338      	adds	r3, #56	@ 0x38
 8003e28:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	015a      	lsls	r2, r3, #5
 8003e2e:	6a3b      	ldr	r3, [r7, #32]
 8003e30:	4413      	add	r3, r2
 8003e32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	0cdb      	lsrs	r3, r3, #19
 8003e3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e3e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003e40:	6879      	ldr	r1, [r7, #4]
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	4613      	mov	r3, r2
 8003e46:	011b      	lsls	r3, r3, #4
 8003e48:	1a9b      	subs	r3, r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	440b      	add	r3, r1
 8003e4e:	3328      	adds	r3, #40	@ 0x28
 8003e50:	881b      	ldrh	r3, [r3, #0]
 8003e52:	461a      	mov	r2, r3
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d13f      	bne.n	8003eda <HCD_RXQLVL_IRQHandler+0x1b4>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d03c      	beq.n	8003eda <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	6a3b      	ldr	r3, [r7, #32]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003e76:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003e7e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	6a3b      	ldr	r3, [r7, #32]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	4613      	mov	r3, r2
 8003e98:	011b      	lsls	r3, r3, #4
 8003e9a:	1a9b      	subs	r3, r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	440b      	add	r3, r1
 8003ea0:	333c      	adds	r3, #60	@ 0x3c
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	f083 0301 	eor.w	r3, r3, #1
 8003ea8:	b2d8      	uxtb	r0, r3
 8003eaa:	6879      	ldr	r1, [r7, #4]
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	011b      	lsls	r3, r3, #4
 8003eb2:	1a9b      	subs	r3, r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	440b      	add	r3, r1
 8003eb8:	333c      	adds	r3, #60	@ 0x3c
 8003eba:	4602      	mov	r2, r0
 8003ebc:	701a      	strb	r2, [r3, #0]
      break;
 8003ebe:	e00c      	b.n	8003eda <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003ec0:	6879      	ldr	r1, [r7, #4]
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	011b      	lsls	r3, r3, #4
 8003ec8:	1a9b      	subs	r3, r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	440b      	add	r3, r1
 8003ece:	334c      	adds	r3, #76	@ 0x4c
 8003ed0:	2204      	movs	r2, #4
 8003ed2:	701a      	strb	r2, [r3, #0]
      break;
 8003ed4:	e001      	b.n	8003eda <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003ed6:	bf00      	nop
 8003ed8:	e000      	b.n	8003edc <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003eda:	bf00      	nop
  }
}
 8003edc:	bf00      	nop
 8003ede:	3728      	adds	r7, #40	@ 0x28
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003f10:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d10b      	bne.n	8003f34 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d102      	bne.n	8003f2c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f004 f8d4 	bl	80080d4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	f043 0302 	orr.w	r3, r3, #2
 8003f32:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f003 0308 	and.w	r3, r3, #8
 8003f3a:	2b08      	cmp	r3, #8
 8003f3c:	d132      	bne.n	8003fa4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	f043 0308 	orr.w	r3, r3, #8
 8003f44:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f003 0304 	and.w	r3, r3, #4
 8003f4c:	2b04      	cmp	r3, #4
 8003f4e:	d126      	bne.n	8003f9e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	7a5b      	ldrb	r3, [r3, #9]
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d113      	bne.n	8003f80 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003f5e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f62:	d106      	bne.n	8003f72 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2102      	movs	r1, #2
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f001 f8f6 	bl	800515c <USB_InitFSLSPClkSel>
 8003f70:	e011      	b.n	8003f96 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2101      	movs	r1, #1
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f001 f8ef 	bl	800515c <USB_InitFSLSPClkSel>
 8003f7e:	e00a      	b.n	8003f96 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	79db      	ldrb	r3, [r3, #7]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d106      	bne.n	8003f96 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003f8e:	461a      	mov	r2, r3
 8003f90:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003f94:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f004 f8c6 	bl	8008128 <HAL_HCD_PortEnabled_Callback>
 8003f9c:	e002      	b.n	8003fa4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f004 f8d0 	bl	8008144 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f003 0320 	and.w	r3, r3, #32
 8003faa:	2b20      	cmp	r3, #32
 8003fac:	d103      	bne.n	8003fb6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	f043 0320 	orr.w	r3, r3, #32
 8003fb4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	6013      	str	r3, [r2, #0]
}
 8003fc2:	bf00      	nop
 8003fc4:	3718      	adds	r7, #24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
	...

08003fcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e12b      	b.n	8004236 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d106      	bne.n	8003ff8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7fd f968 	bl	80012c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2224      	movs	r2, #36	@ 0x24
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 0201 	bic.w	r2, r2, #1
 800400e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800401e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800402e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004030:	f000 fd80 	bl	8004b34 <HAL_RCC_GetPCLK1Freq>
 8004034:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	4a81      	ldr	r2, [pc, #516]	@ (8004240 <HAL_I2C_Init+0x274>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d807      	bhi.n	8004050 <HAL_I2C_Init+0x84>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4a80      	ldr	r2, [pc, #512]	@ (8004244 <HAL_I2C_Init+0x278>)
 8004044:	4293      	cmp	r3, r2
 8004046:	bf94      	ite	ls
 8004048:	2301      	movls	r3, #1
 800404a:	2300      	movhi	r3, #0
 800404c:	b2db      	uxtb	r3, r3
 800404e:	e006      	b.n	800405e <HAL_I2C_Init+0x92>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	4a7d      	ldr	r2, [pc, #500]	@ (8004248 <HAL_I2C_Init+0x27c>)
 8004054:	4293      	cmp	r3, r2
 8004056:	bf94      	ite	ls
 8004058:	2301      	movls	r3, #1
 800405a:	2300      	movhi	r3, #0
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e0e7      	b.n	8004236 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	4a78      	ldr	r2, [pc, #480]	@ (800424c <HAL_I2C_Init+0x280>)
 800406a:	fba2 2303 	umull	r2, r3, r2, r3
 800406e:	0c9b      	lsrs	r3, r3, #18
 8004070:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68ba      	ldr	r2, [r7, #8]
 8004082:	430a      	orrs	r2, r1
 8004084:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	6a1b      	ldr	r3, [r3, #32]
 800408c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	4a6a      	ldr	r2, [pc, #424]	@ (8004240 <HAL_I2C_Init+0x274>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d802      	bhi.n	80040a0 <HAL_I2C_Init+0xd4>
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	3301      	adds	r3, #1
 800409e:	e009      	b.n	80040b4 <HAL_I2C_Init+0xe8>
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80040a6:	fb02 f303 	mul.w	r3, r2, r3
 80040aa:	4a69      	ldr	r2, [pc, #420]	@ (8004250 <HAL_I2C_Init+0x284>)
 80040ac:	fba2 2303 	umull	r2, r3, r2, r3
 80040b0:	099b      	lsrs	r3, r3, #6
 80040b2:	3301      	adds	r3, #1
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6812      	ldr	r2, [r2, #0]
 80040b8:	430b      	orrs	r3, r1
 80040ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	69db      	ldr	r3, [r3, #28]
 80040c2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80040c6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	495c      	ldr	r1, [pc, #368]	@ (8004240 <HAL_I2C_Init+0x274>)
 80040d0:	428b      	cmp	r3, r1
 80040d2:	d819      	bhi.n	8004108 <HAL_I2C_Init+0x13c>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	1e59      	subs	r1, r3, #1
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	fbb1 f3f3 	udiv	r3, r1, r3
 80040e2:	1c59      	adds	r1, r3, #1
 80040e4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80040e8:	400b      	ands	r3, r1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00a      	beq.n	8004104 <HAL_I2C_Init+0x138>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	1e59      	subs	r1, r3, #1
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80040fc:	3301      	adds	r3, #1
 80040fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004102:	e051      	b.n	80041a8 <HAL_I2C_Init+0x1dc>
 8004104:	2304      	movs	r3, #4
 8004106:	e04f      	b.n	80041a8 <HAL_I2C_Init+0x1dc>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d111      	bne.n	8004134 <HAL_I2C_Init+0x168>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	1e58      	subs	r0, r3, #1
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6859      	ldr	r1, [r3, #4]
 8004118:	460b      	mov	r3, r1
 800411a:	005b      	lsls	r3, r3, #1
 800411c:	440b      	add	r3, r1
 800411e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004122:	3301      	adds	r3, #1
 8004124:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004128:	2b00      	cmp	r3, #0
 800412a:	bf0c      	ite	eq
 800412c:	2301      	moveq	r3, #1
 800412e:	2300      	movne	r3, #0
 8004130:	b2db      	uxtb	r3, r3
 8004132:	e012      	b.n	800415a <HAL_I2C_Init+0x18e>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	1e58      	subs	r0, r3, #1
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6859      	ldr	r1, [r3, #4]
 800413c:	460b      	mov	r3, r1
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	440b      	add	r3, r1
 8004142:	0099      	lsls	r1, r3, #2
 8004144:	440b      	add	r3, r1
 8004146:	fbb0 f3f3 	udiv	r3, r0, r3
 800414a:	3301      	adds	r3, #1
 800414c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004150:	2b00      	cmp	r3, #0
 8004152:	bf0c      	ite	eq
 8004154:	2301      	moveq	r3, #1
 8004156:	2300      	movne	r3, #0
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <HAL_I2C_Init+0x196>
 800415e:	2301      	movs	r3, #1
 8004160:	e022      	b.n	80041a8 <HAL_I2C_Init+0x1dc>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10e      	bne.n	8004188 <HAL_I2C_Init+0x1bc>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	1e58      	subs	r0, r3, #1
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6859      	ldr	r1, [r3, #4]
 8004172:	460b      	mov	r3, r1
 8004174:	005b      	lsls	r3, r3, #1
 8004176:	440b      	add	r3, r1
 8004178:	fbb0 f3f3 	udiv	r3, r0, r3
 800417c:	3301      	adds	r3, #1
 800417e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004182:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004186:	e00f      	b.n	80041a8 <HAL_I2C_Init+0x1dc>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	1e58      	subs	r0, r3, #1
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6859      	ldr	r1, [r3, #4]
 8004190:	460b      	mov	r3, r1
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	440b      	add	r3, r1
 8004196:	0099      	lsls	r1, r3, #2
 8004198:	440b      	add	r3, r1
 800419a:	fbb0 f3f3 	udiv	r3, r0, r3
 800419e:	3301      	adds	r3, #1
 80041a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80041a8:	6879      	ldr	r1, [r7, #4]
 80041aa:	6809      	ldr	r1, [r1, #0]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	69da      	ldr	r2, [r3, #28]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	431a      	orrs	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80041d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	6911      	ldr	r1, [r2, #16]
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	68d2      	ldr	r2, [r2, #12]
 80041e2:	4311      	orrs	r1, r2
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	6812      	ldr	r2, [r2, #0]
 80041e8:	430b      	orrs	r3, r1
 80041ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	695a      	ldr	r2, [r3, #20]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	431a      	orrs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	430a      	orrs	r2, r1
 8004206:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f042 0201 	orr.w	r2, r2, #1
 8004216:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2220      	movs	r2, #32
 8004222:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	000186a0 	.word	0x000186a0
 8004244:	001e847f 	.word	0x001e847f
 8004248:	003d08ff 	.word	0x003d08ff
 800424c:	431bde83 	.word	0x431bde83
 8004250:	10624dd3 	.word	0x10624dd3

08004254 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e267      	b.n	8004736 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	d075      	beq.n	800435e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004272:	4b88      	ldr	r3, [pc, #544]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 030c 	and.w	r3, r3, #12
 800427a:	2b04      	cmp	r3, #4
 800427c:	d00c      	beq.n	8004298 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800427e:	4b85      	ldr	r3, [pc, #532]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004286:	2b08      	cmp	r3, #8
 8004288:	d112      	bne.n	80042b0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800428a:	4b82      	ldr	r3, [pc, #520]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004292:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004296:	d10b      	bne.n	80042b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004298:	4b7e      	ldr	r3, [pc, #504]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d05b      	beq.n	800435c <HAL_RCC_OscConfig+0x108>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d157      	bne.n	800435c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e242      	b.n	8004736 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042b8:	d106      	bne.n	80042c8 <HAL_RCC_OscConfig+0x74>
 80042ba:	4b76      	ldr	r3, [pc, #472]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a75      	ldr	r2, [pc, #468]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 80042c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042c4:	6013      	str	r3, [r2, #0]
 80042c6:	e01d      	b.n	8004304 <HAL_RCC_OscConfig+0xb0>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042d0:	d10c      	bne.n	80042ec <HAL_RCC_OscConfig+0x98>
 80042d2:	4b70      	ldr	r3, [pc, #448]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a6f      	ldr	r2, [pc, #444]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 80042d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042dc:	6013      	str	r3, [r2, #0]
 80042de:	4b6d      	ldr	r3, [pc, #436]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a6c      	ldr	r2, [pc, #432]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 80042e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042e8:	6013      	str	r3, [r2, #0]
 80042ea:	e00b      	b.n	8004304 <HAL_RCC_OscConfig+0xb0>
 80042ec:	4b69      	ldr	r3, [pc, #420]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a68      	ldr	r2, [pc, #416]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 80042f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042f6:	6013      	str	r3, [r2, #0]
 80042f8:	4b66      	ldr	r3, [pc, #408]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a65      	ldr	r2, [pc, #404]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 80042fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004302:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d013      	beq.n	8004334 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800430c:	f7fd f936 	bl	800157c <HAL_GetTick>
 8004310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004312:	e008      	b.n	8004326 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004314:	f7fd f932 	bl	800157c <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b64      	cmp	r3, #100	@ 0x64
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e207      	b.n	8004736 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004326:	4b5b      	ldr	r3, [pc, #364]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d0f0      	beq.n	8004314 <HAL_RCC_OscConfig+0xc0>
 8004332:	e014      	b.n	800435e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004334:	f7fd f922 	bl	800157c <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800433c:	f7fd f91e 	bl	800157c <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b64      	cmp	r3, #100	@ 0x64
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e1f3      	b.n	8004736 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800434e:	4b51      	ldr	r3, [pc, #324]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1f0      	bne.n	800433c <HAL_RCC_OscConfig+0xe8>
 800435a:	e000      	b.n	800435e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800435c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d063      	beq.n	8004432 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800436a:	4b4a      	ldr	r3, [pc, #296]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f003 030c 	and.w	r3, r3, #12
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00b      	beq.n	800438e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004376:	4b47      	ldr	r3, [pc, #284]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800437e:	2b08      	cmp	r3, #8
 8004380:	d11c      	bne.n	80043bc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004382:	4b44      	ldr	r3, [pc, #272]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d116      	bne.n	80043bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800438e:	4b41      	ldr	r3, [pc, #260]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d005      	beq.n	80043a6 <HAL_RCC_OscConfig+0x152>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d001      	beq.n	80043a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e1c7      	b.n	8004736 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a6:	4b3b      	ldr	r3, [pc, #236]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	4937      	ldr	r1, [pc, #220]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ba:	e03a      	b.n	8004432 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d020      	beq.n	8004406 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043c4:	4b34      	ldr	r3, [pc, #208]	@ (8004498 <HAL_RCC_OscConfig+0x244>)
 80043c6:	2201      	movs	r2, #1
 80043c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ca:	f7fd f8d7 	bl	800157c <HAL_GetTick>
 80043ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043d0:	e008      	b.n	80043e4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043d2:	f7fd f8d3 	bl	800157c <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d901      	bls.n	80043e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e1a8      	b.n	8004736 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043e4:	4b2b      	ldr	r3, [pc, #172]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d0f0      	beq.n	80043d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043f0:	4b28      	ldr	r3, [pc, #160]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	00db      	lsls	r3, r3, #3
 80043fe:	4925      	ldr	r1, [pc, #148]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 8004400:	4313      	orrs	r3, r2
 8004402:	600b      	str	r3, [r1, #0]
 8004404:	e015      	b.n	8004432 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004406:	4b24      	ldr	r3, [pc, #144]	@ (8004498 <HAL_RCC_OscConfig+0x244>)
 8004408:	2200      	movs	r2, #0
 800440a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440c:	f7fd f8b6 	bl	800157c <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004414:	f7fd f8b2 	bl	800157c <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b02      	cmp	r3, #2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e187      	b.n	8004736 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004426:	4b1b      	ldr	r3, [pc, #108]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1f0      	bne.n	8004414 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0308 	and.w	r3, r3, #8
 800443a:	2b00      	cmp	r3, #0
 800443c:	d036      	beq.n	80044ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d016      	beq.n	8004474 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004446:	4b15      	ldr	r3, [pc, #84]	@ (800449c <HAL_RCC_OscConfig+0x248>)
 8004448:	2201      	movs	r2, #1
 800444a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800444c:	f7fd f896 	bl	800157c <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004454:	f7fd f892 	bl	800157c <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b02      	cmp	r3, #2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e167      	b.n	8004736 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004466:	4b0b      	ldr	r3, [pc, #44]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 8004468:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d0f0      	beq.n	8004454 <HAL_RCC_OscConfig+0x200>
 8004472:	e01b      	b.n	80044ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004474:	4b09      	ldr	r3, [pc, #36]	@ (800449c <HAL_RCC_OscConfig+0x248>)
 8004476:	2200      	movs	r2, #0
 8004478:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800447a:	f7fd f87f 	bl	800157c <HAL_GetTick>
 800447e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004480:	e00e      	b.n	80044a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004482:	f7fd f87b 	bl	800157c <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d907      	bls.n	80044a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e150      	b.n	8004736 <HAL_RCC_OscConfig+0x4e2>
 8004494:	40023800 	.word	0x40023800
 8004498:	42470000 	.word	0x42470000
 800449c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044a0:	4b88      	ldr	r3, [pc, #544]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 80044a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1ea      	bne.n	8004482 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 8097 	beq.w	80045e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044ba:	2300      	movs	r3, #0
 80044bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044be:	4b81      	ldr	r3, [pc, #516]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 80044c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10f      	bne.n	80044ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ca:	2300      	movs	r3, #0
 80044cc:	60bb      	str	r3, [r7, #8]
 80044ce:	4b7d      	ldr	r3, [pc, #500]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 80044d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d2:	4a7c      	ldr	r2, [pc, #496]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 80044d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80044da:	4b7a      	ldr	r3, [pc, #488]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 80044dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044e2:	60bb      	str	r3, [r7, #8]
 80044e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044e6:	2301      	movs	r3, #1
 80044e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ea:	4b77      	ldr	r3, [pc, #476]	@ (80046c8 <HAL_RCC_OscConfig+0x474>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d118      	bne.n	8004528 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044f6:	4b74      	ldr	r3, [pc, #464]	@ (80046c8 <HAL_RCC_OscConfig+0x474>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a73      	ldr	r2, [pc, #460]	@ (80046c8 <HAL_RCC_OscConfig+0x474>)
 80044fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004500:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004502:	f7fd f83b 	bl	800157c <HAL_GetTick>
 8004506:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004508:	e008      	b.n	800451c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800450a:	f7fd f837 	bl	800157c <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d901      	bls.n	800451c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e10c      	b.n	8004736 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800451c:	4b6a      	ldr	r3, [pc, #424]	@ (80046c8 <HAL_RCC_OscConfig+0x474>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004524:	2b00      	cmp	r3, #0
 8004526:	d0f0      	beq.n	800450a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d106      	bne.n	800453e <HAL_RCC_OscConfig+0x2ea>
 8004530:	4b64      	ldr	r3, [pc, #400]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 8004532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004534:	4a63      	ldr	r2, [pc, #396]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 8004536:	f043 0301 	orr.w	r3, r3, #1
 800453a:	6713      	str	r3, [r2, #112]	@ 0x70
 800453c:	e01c      	b.n	8004578 <HAL_RCC_OscConfig+0x324>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	2b05      	cmp	r3, #5
 8004544:	d10c      	bne.n	8004560 <HAL_RCC_OscConfig+0x30c>
 8004546:	4b5f      	ldr	r3, [pc, #380]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 8004548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800454a:	4a5e      	ldr	r2, [pc, #376]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 800454c:	f043 0304 	orr.w	r3, r3, #4
 8004550:	6713      	str	r3, [r2, #112]	@ 0x70
 8004552:	4b5c      	ldr	r3, [pc, #368]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 8004554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004556:	4a5b      	ldr	r2, [pc, #364]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 8004558:	f043 0301 	orr.w	r3, r3, #1
 800455c:	6713      	str	r3, [r2, #112]	@ 0x70
 800455e:	e00b      	b.n	8004578 <HAL_RCC_OscConfig+0x324>
 8004560:	4b58      	ldr	r3, [pc, #352]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 8004562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004564:	4a57      	ldr	r2, [pc, #348]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 8004566:	f023 0301 	bic.w	r3, r3, #1
 800456a:	6713      	str	r3, [r2, #112]	@ 0x70
 800456c:	4b55      	ldr	r3, [pc, #340]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 800456e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004570:	4a54      	ldr	r2, [pc, #336]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 8004572:	f023 0304 	bic.w	r3, r3, #4
 8004576:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d015      	beq.n	80045ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004580:	f7fc fffc 	bl	800157c <HAL_GetTick>
 8004584:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004586:	e00a      	b.n	800459e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004588:	f7fc fff8 	bl	800157c <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004596:	4293      	cmp	r3, r2
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e0cb      	b.n	8004736 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800459e:	4b49      	ldr	r3, [pc, #292]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 80045a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d0ee      	beq.n	8004588 <HAL_RCC_OscConfig+0x334>
 80045aa:	e014      	b.n	80045d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ac:	f7fc ffe6 	bl	800157c <HAL_GetTick>
 80045b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045b2:	e00a      	b.n	80045ca <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045b4:	f7fc ffe2 	bl	800157c <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e0b5      	b.n	8004736 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ca:	4b3e      	ldr	r3, [pc, #248]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 80045cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1ee      	bne.n	80045b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045d6:	7dfb      	ldrb	r3, [r7, #23]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d105      	bne.n	80045e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045dc:	4b39      	ldr	r3, [pc, #228]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 80045de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e0:	4a38      	ldr	r2, [pc, #224]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 80045e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 80a1 	beq.w	8004734 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045f2:	4b34      	ldr	r3, [pc, #208]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f003 030c 	and.w	r3, r3, #12
 80045fa:	2b08      	cmp	r3, #8
 80045fc:	d05c      	beq.n	80046b8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	2b02      	cmp	r3, #2
 8004604:	d141      	bne.n	800468a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004606:	4b31      	ldr	r3, [pc, #196]	@ (80046cc <HAL_RCC_OscConfig+0x478>)
 8004608:	2200      	movs	r2, #0
 800460a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800460c:	f7fc ffb6 	bl	800157c <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004612:	e008      	b.n	8004626 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004614:	f7fc ffb2 	bl	800157c <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b02      	cmp	r3, #2
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e087      	b.n	8004736 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004626:	4b27      	ldr	r3, [pc, #156]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1f0      	bne.n	8004614 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	69da      	ldr	r2, [r3, #28]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	431a      	orrs	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004640:	019b      	lsls	r3, r3, #6
 8004642:	431a      	orrs	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004648:	085b      	lsrs	r3, r3, #1
 800464a:	3b01      	subs	r3, #1
 800464c:	041b      	lsls	r3, r3, #16
 800464e:	431a      	orrs	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004654:	061b      	lsls	r3, r3, #24
 8004656:	491b      	ldr	r1, [pc, #108]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 8004658:	4313      	orrs	r3, r2
 800465a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800465c:	4b1b      	ldr	r3, [pc, #108]	@ (80046cc <HAL_RCC_OscConfig+0x478>)
 800465e:	2201      	movs	r2, #1
 8004660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004662:	f7fc ff8b 	bl	800157c <HAL_GetTick>
 8004666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004668:	e008      	b.n	800467c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800466a:	f7fc ff87 	bl	800157c <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	2b02      	cmp	r3, #2
 8004676:	d901      	bls.n	800467c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e05c      	b.n	8004736 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800467c:	4b11      	ldr	r3, [pc, #68]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0f0      	beq.n	800466a <HAL_RCC_OscConfig+0x416>
 8004688:	e054      	b.n	8004734 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800468a:	4b10      	ldr	r3, [pc, #64]	@ (80046cc <HAL_RCC_OscConfig+0x478>)
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004690:	f7fc ff74 	bl	800157c <HAL_GetTick>
 8004694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004696:	e008      	b.n	80046aa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004698:	f7fc ff70 	bl	800157c <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e045      	b.n	8004736 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046aa:	4b06      	ldr	r3, [pc, #24]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1f0      	bne.n	8004698 <HAL_RCC_OscConfig+0x444>
 80046b6:	e03d      	b.n	8004734 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d107      	bne.n	80046d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e038      	b.n	8004736 <HAL_RCC_OscConfig+0x4e2>
 80046c4:	40023800 	.word	0x40023800
 80046c8:	40007000 	.word	0x40007000
 80046cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004740 <HAL_RCC_OscConfig+0x4ec>)
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d028      	beq.n	8004730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d121      	bne.n	8004730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d11a      	bne.n	8004730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004700:	4013      	ands	r3, r2
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004706:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004708:	4293      	cmp	r3, r2
 800470a:	d111      	bne.n	8004730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004716:	085b      	lsrs	r3, r3, #1
 8004718:	3b01      	subs	r3, #1
 800471a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800471c:	429a      	cmp	r2, r3
 800471e:	d107      	bne.n	8004730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800472a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800472c:	429a      	cmp	r2, r3
 800472e:	d001      	beq.n	8004734 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e000      	b.n	8004736 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3718      	adds	r7, #24
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	40023800 	.word	0x40023800

08004744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d101      	bne.n	8004758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e0cc      	b.n	80048f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004758:	4b68      	ldr	r3, [pc, #416]	@ (80048fc <HAL_RCC_ClockConfig+0x1b8>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0307 	and.w	r3, r3, #7
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	429a      	cmp	r2, r3
 8004764:	d90c      	bls.n	8004780 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004766:	4b65      	ldr	r3, [pc, #404]	@ (80048fc <HAL_RCC_ClockConfig+0x1b8>)
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	b2d2      	uxtb	r2, r2
 800476c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800476e:	4b63      	ldr	r3, [pc, #396]	@ (80048fc <HAL_RCC_ClockConfig+0x1b8>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0307 	and.w	r3, r3, #7
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	429a      	cmp	r2, r3
 800477a:	d001      	beq.n	8004780 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e0b8      	b.n	80048f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d020      	beq.n	80047ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0304 	and.w	r3, r3, #4
 8004794:	2b00      	cmp	r3, #0
 8004796:	d005      	beq.n	80047a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004798:	4b59      	ldr	r3, [pc, #356]	@ (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	4a58      	ldr	r2, [pc, #352]	@ (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 800479e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80047a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0308 	and.w	r3, r3, #8
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d005      	beq.n	80047bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047b0:	4b53      	ldr	r3, [pc, #332]	@ (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	4a52      	ldr	r2, [pc, #328]	@ (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 80047b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80047ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047bc:	4b50      	ldr	r3, [pc, #320]	@ (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	494d      	ldr	r1, [pc, #308]	@ (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d044      	beq.n	8004864 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d107      	bne.n	80047f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047e2:	4b47      	ldr	r3, [pc, #284]	@ (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d119      	bne.n	8004822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e07f      	b.n	80048f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d003      	beq.n	8004802 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047fe:	2b03      	cmp	r3, #3
 8004800:	d107      	bne.n	8004812 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004802:	4b3f      	ldr	r3, [pc, #252]	@ (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d109      	bne.n	8004822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e06f      	b.n	80048f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004812:	4b3b      	ldr	r3, [pc, #236]	@ (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e067      	b.n	80048f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004822:	4b37      	ldr	r3, [pc, #220]	@ (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f023 0203 	bic.w	r2, r3, #3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	4934      	ldr	r1, [pc, #208]	@ (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 8004830:	4313      	orrs	r3, r2
 8004832:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004834:	f7fc fea2 	bl	800157c <HAL_GetTick>
 8004838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800483a:	e00a      	b.n	8004852 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800483c:	f7fc fe9e 	bl	800157c <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	f241 3288 	movw	r2, #5000	@ 0x1388
 800484a:	4293      	cmp	r3, r2
 800484c:	d901      	bls.n	8004852 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e04f      	b.n	80048f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004852:	4b2b      	ldr	r3, [pc, #172]	@ (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f003 020c 	and.w	r2, r3, #12
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	429a      	cmp	r2, r3
 8004862:	d1eb      	bne.n	800483c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004864:	4b25      	ldr	r3, [pc, #148]	@ (80048fc <HAL_RCC_ClockConfig+0x1b8>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0307 	and.w	r3, r3, #7
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	429a      	cmp	r2, r3
 8004870:	d20c      	bcs.n	800488c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004872:	4b22      	ldr	r3, [pc, #136]	@ (80048fc <HAL_RCC_ClockConfig+0x1b8>)
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	b2d2      	uxtb	r2, r2
 8004878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800487a:	4b20      	ldr	r3, [pc, #128]	@ (80048fc <HAL_RCC_ClockConfig+0x1b8>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0307 	and.w	r3, r3, #7
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	429a      	cmp	r2, r3
 8004886:	d001      	beq.n	800488c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e032      	b.n	80048f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0304 	and.w	r3, r3, #4
 8004894:	2b00      	cmp	r3, #0
 8004896:	d008      	beq.n	80048aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004898:	4b19      	ldr	r3, [pc, #100]	@ (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	4916      	ldr	r1, [pc, #88]	@ (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0308 	and.w	r3, r3, #8
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d009      	beq.n	80048ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048b6:	4b12      	ldr	r3, [pc, #72]	@ (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	00db      	lsls	r3, r3, #3
 80048c4:	490e      	ldr	r1, [pc, #56]	@ (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048ca:	f000 f821 	bl	8004910 <HAL_RCC_GetSysClockFreq>
 80048ce:	4602      	mov	r2, r0
 80048d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	091b      	lsrs	r3, r3, #4
 80048d6:	f003 030f 	and.w	r3, r3, #15
 80048da:	490a      	ldr	r1, [pc, #40]	@ (8004904 <HAL_RCC_ClockConfig+0x1c0>)
 80048dc:	5ccb      	ldrb	r3, [r1, r3]
 80048de:	fa22 f303 	lsr.w	r3, r2, r3
 80048e2:	4a09      	ldr	r2, [pc, #36]	@ (8004908 <HAL_RCC_ClockConfig+0x1c4>)
 80048e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80048e6:	4b09      	ldr	r3, [pc, #36]	@ (800490c <HAL_RCC_ClockConfig+0x1c8>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7fc fe02 	bl	80014f4 <HAL_InitTick>

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	40023c00 	.word	0x40023c00
 8004900:	40023800 	.word	0x40023800
 8004904:	08008800 	.word	0x08008800
 8004908:	20000004 	.word	0x20000004
 800490c:	20000008 	.word	0x20000008

08004910 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004914:	b094      	sub	sp, #80	@ 0x50
 8004916:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004918:	2300      	movs	r3, #0
 800491a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800491c:	2300      	movs	r3, #0
 800491e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004920:	2300      	movs	r3, #0
 8004922:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004924:	2300      	movs	r3, #0
 8004926:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004928:	4b79      	ldr	r3, [pc, #484]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0x200>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f003 030c 	and.w	r3, r3, #12
 8004930:	2b08      	cmp	r3, #8
 8004932:	d00d      	beq.n	8004950 <HAL_RCC_GetSysClockFreq+0x40>
 8004934:	2b08      	cmp	r3, #8
 8004936:	f200 80e1 	bhi.w	8004afc <HAL_RCC_GetSysClockFreq+0x1ec>
 800493a:	2b00      	cmp	r3, #0
 800493c:	d002      	beq.n	8004944 <HAL_RCC_GetSysClockFreq+0x34>
 800493e:	2b04      	cmp	r3, #4
 8004940:	d003      	beq.n	800494a <HAL_RCC_GetSysClockFreq+0x3a>
 8004942:	e0db      	b.n	8004afc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004944:	4b73      	ldr	r3, [pc, #460]	@ (8004b14 <HAL_RCC_GetSysClockFreq+0x204>)
 8004946:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004948:	e0db      	b.n	8004b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800494a:	4b73      	ldr	r3, [pc, #460]	@ (8004b18 <HAL_RCC_GetSysClockFreq+0x208>)
 800494c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800494e:	e0d8      	b.n	8004b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004950:	4b6f      	ldr	r3, [pc, #444]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004958:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800495a:	4b6d      	ldr	r3, [pc, #436]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0x200>)
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d063      	beq.n	8004a2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004966:	4b6a      	ldr	r3, [pc, #424]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	099b      	lsrs	r3, r3, #6
 800496c:	2200      	movs	r2, #0
 800496e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004970:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004978:	633b      	str	r3, [r7, #48]	@ 0x30
 800497a:	2300      	movs	r3, #0
 800497c:	637b      	str	r3, [r7, #52]	@ 0x34
 800497e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004982:	4622      	mov	r2, r4
 8004984:	462b      	mov	r3, r5
 8004986:	f04f 0000 	mov.w	r0, #0
 800498a:	f04f 0100 	mov.w	r1, #0
 800498e:	0159      	lsls	r1, r3, #5
 8004990:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004994:	0150      	lsls	r0, r2, #5
 8004996:	4602      	mov	r2, r0
 8004998:	460b      	mov	r3, r1
 800499a:	4621      	mov	r1, r4
 800499c:	1a51      	subs	r1, r2, r1
 800499e:	6139      	str	r1, [r7, #16]
 80049a0:	4629      	mov	r1, r5
 80049a2:	eb63 0301 	sbc.w	r3, r3, r1
 80049a6:	617b      	str	r3, [r7, #20]
 80049a8:	f04f 0200 	mov.w	r2, #0
 80049ac:	f04f 0300 	mov.w	r3, #0
 80049b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049b4:	4659      	mov	r1, fp
 80049b6:	018b      	lsls	r3, r1, #6
 80049b8:	4651      	mov	r1, sl
 80049ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049be:	4651      	mov	r1, sl
 80049c0:	018a      	lsls	r2, r1, #6
 80049c2:	4651      	mov	r1, sl
 80049c4:	ebb2 0801 	subs.w	r8, r2, r1
 80049c8:	4659      	mov	r1, fp
 80049ca:	eb63 0901 	sbc.w	r9, r3, r1
 80049ce:	f04f 0200 	mov.w	r2, #0
 80049d2:	f04f 0300 	mov.w	r3, #0
 80049d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049e2:	4690      	mov	r8, r2
 80049e4:	4699      	mov	r9, r3
 80049e6:	4623      	mov	r3, r4
 80049e8:	eb18 0303 	adds.w	r3, r8, r3
 80049ec:	60bb      	str	r3, [r7, #8]
 80049ee:	462b      	mov	r3, r5
 80049f0:	eb49 0303 	adc.w	r3, r9, r3
 80049f4:	60fb      	str	r3, [r7, #12]
 80049f6:	f04f 0200 	mov.w	r2, #0
 80049fa:	f04f 0300 	mov.w	r3, #0
 80049fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a02:	4629      	mov	r1, r5
 8004a04:	024b      	lsls	r3, r1, #9
 8004a06:	4621      	mov	r1, r4
 8004a08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a0c:	4621      	mov	r1, r4
 8004a0e:	024a      	lsls	r2, r1, #9
 8004a10:	4610      	mov	r0, r2
 8004a12:	4619      	mov	r1, r3
 8004a14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a16:	2200      	movs	r2, #0
 8004a18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a20:	f7fc f810 	bl	8000a44 <__aeabi_uldivmod>
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	4613      	mov	r3, r2
 8004a2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a2c:	e058      	b.n	8004ae0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a2e:	4b38      	ldr	r3, [pc, #224]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	099b      	lsrs	r3, r3, #6
 8004a34:	2200      	movs	r2, #0
 8004a36:	4618      	mov	r0, r3
 8004a38:	4611      	mov	r1, r2
 8004a3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a3e:	623b      	str	r3, [r7, #32]
 8004a40:	2300      	movs	r3, #0
 8004a42:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a48:	4642      	mov	r2, r8
 8004a4a:	464b      	mov	r3, r9
 8004a4c:	f04f 0000 	mov.w	r0, #0
 8004a50:	f04f 0100 	mov.w	r1, #0
 8004a54:	0159      	lsls	r1, r3, #5
 8004a56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a5a:	0150      	lsls	r0, r2, #5
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	460b      	mov	r3, r1
 8004a60:	4641      	mov	r1, r8
 8004a62:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a66:	4649      	mov	r1, r9
 8004a68:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a6c:	f04f 0200 	mov.w	r2, #0
 8004a70:	f04f 0300 	mov.w	r3, #0
 8004a74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a80:	ebb2 040a 	subs.w	r4, r2, sl
 8004a84:	eb63 050b 	sbc.w	r5, r3, fp
 8004a88:	f04f 0200 	mov.w	r2, #0
 8004a8c:	f04f 0300 	mov.w	r3, #0
 8004a90:	00eb      	lsls	r3, r5, #3
 8004a92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a96:	00e2      	lsls	r2, r4, #3
 8004a98:	4614      	mov	r4, r2
 8004a9a:	461d      	mov	r5, r3
 8004a9c:	4643      	mov	r3, r8
 8004a9e:	18e3      	adds	r3, r4, r3
 8004aa0:	603b      	str	r3, [r7, #0]
 8004aa2:	464b      	mov	r3, r9
 8004aa4:	eb45 0303 	adc.w	r3, r5, r3
 8004aa8:	607b      	str	r3, [r7, #4]
 8004aaa:	f04f 0200 	mov.w	r2, #0
 8004aae:	f04f 0300 	mov.w	r3, #0
 8004ab2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ab6:	4629      	mov	r1, r5
 8004ab8:	028b      	lsls	r3, r1, #10
 8004aba:	4621      	mov	r1, r4
 8004abc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ac0:	4621      	mov	r1, r4
 8004ac2:	028a      	lsls	r2, r1, #10
 8004ac4:	4610      	mov	r0, r2
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004aca:	2200      	movs	r2, #0
 8004acc:	61bb      	str	r3, [r7, #24]
 8004ace:	61fa      	str	r2, [r7, #28]
 8004ad0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ad4:	f7fb ffb6 	bl	8000a44 <__aeabi_uldivmod>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	460b      	mov	r3, r1
 8004adc:	4613      	mov	r3, r2
 8004ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	0c1b      	lsrs	r3, r3, #16
 8004ae6:	f003 0303 	and.w	r3, r3, #3
 8004aea:	3301      	adds	r3, #1
 8004aec:	005b      	lsls	r3, r3, #1
 8004aee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004af0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004af2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004afa:	e002      	b.n	8004b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004afc:	4b05      	ldr	r3, [pc, #20]	@ (8004b14 <HAL_RCC_GetSysClockFreq+0x204>)
 8004afe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3750      	adds	r7, #80	@ 0x50
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b0e:	bf00      	nop
 8004b10:	40023800 	.word	0x40023800
 8004b14:	00f42400 	.word	0x00f42400
 8004b18:	007a1200 	.word	0x007a1200

08004b1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b20:	4b03      	ldr	r3, [pc, #12]	@ (8004b30 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b22:	681b      	ldr	r3, [r3, #0]
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	20000004 	.word	0x20000004

08004b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b38:	f7ff fff0 	bl	8004b1c <HAL_RCC_GetHCLKFreq>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	4b05      	ldr	r3, [pc, #20]	@ (8004b54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	0a9b      	lsrs	r3, r3, #10
 8004b44:	f003 0307 	and.w	r3, r3, #7
 8004b48:	4903      	ldr	r1, [pc, #12]	@ (8004b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b4a:	5ccb      	ldrb	r3, [r1, r3]
 8004b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	40023800 	.word	0x40023800
 8004b58:	08008810 	.word	0x08008810

08004b5c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b5c:	b084      	sub	sp, #16
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b084      	sub	sp, #16
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
 8004b66:	f107 001c 	add.w	r0, r7, #28
 8004b6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b6e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d123      	bne.n	8004bbe <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b7a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004b8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004b9e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d105      	bne.n	8004bb2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f9dc 	bl	8004f70 <USB_CoreReset>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	73fb      	strb	r3, [r7, #15]
 8004bbc:	e01b      	b.n	8004bf6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f9d0 	bl	8004f70 <USB_CoreReset>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004bd4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d106      	bne.n	8004bea <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	639a      	str	r2, [r3, #56]	@ 0x38
 8004be8:	e005      	b.n	8004bf6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004bf6:	7fbb      	ldrb	r3, [r7, #30]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d10b      	bne.n	8004c14 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f043 0206 	orr.w	r2, r3, #6
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f043 0220 	orr.w	r2, r3, #32
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c20:	b004      	add	sp, #16
 8004c22:	4770      	bx	lr

08004c24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f043 0201 	orr.w	r2, r3, #1
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b083      	sub	sp, #12
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f023 0201 	bic.w	r2, r3, #1
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	460b      	mov	r3, r1
 8004c72:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004c74:	2300      	movs	r3, #0
 8004c76:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004c84:	78fb      	ldrb	r3, [r7, #3]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d115      	bne.n	8004cb6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004c96:	200a      	movs	r0, #10
 8004c98:	f7fc fc7c 	bl	8001594 <HAL_Delay>
      ms += 10U;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	330a      	adds	r3, #10
 8004ca0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f956 	bl	8004f54 <USB_GetMode>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d01e      	beq.n	8004cec <USB_SetCurrentMode+0x84>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2bc7      	cmp	r3, #199	@ 0xc7
 8004cb2:	d9f0      	bls.n	8004c96 <USB_SetCurrentMode+0x2e>
 8004cb4:	e01a      	b.n	8004cec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004cb6:	78fb      	ldrb	r3, [r7, #3]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d115      	bne.n	8004ce8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004cc8:	200a      	movs	r0, #10
 8004cca:	f7fc fc63 	bl	8001594 <HAL_Delay>
      ms += 10U;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	330a      	adds	r3, #10
 8004cd2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 f93d 	bl	8004f54 <USB_GetMode>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d005      	beq.n	8004cec <USB_SetCurrentMode+0x84>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2bc7      	cmp	r3, #199	@ 0xc7
 8004ce4:	d9f0      	bls.n	8004cc8 <USB_SetCurrentMode+0x60>
 8004ce6:	e001      	b.n	8004cec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e005      	b.n	8004cf8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2bc8      	cmp	r3, #200	@ 0xc8
 8004cf0:	d101      	bne.n	8004cf6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e000      	b.n	8004cf8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	3301      	adds	r3, #1
 8004d12:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d1a:	d901      	bls.n	8004d20 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e01b      	b.n	8004d58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	daf2      	bge.n	8004d0e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	019b      	lsls	r3, r3, #6
 8004d30:	f043 0220 	orr.w	r2, r3, #32
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d44:	d901      	bls.n	8004d4a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e006      	b.n	8004d58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	f003 0320 	and.w	r3, r3, #32
 8004d52:	2b20      	cmp	r3, #32
 8004d54:	d0f0      	beq.n	8004d38 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3714      	adds	r7, #20
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	3301      	adds	r3, #1
 8004d74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d7c:	d901      	bls.n	8004d82 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e018      	b.n	8004db4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	daf2      	bge.n	8004d70 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2210      	movs	r2, #16
 8004d92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	3301      	adds	r3, #1
 8004d98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004da0:	d901      	bls.n	8004da6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e006      	b.n	8004db4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	f003 0310 	and.w	r3, r3, #16
 8004dae:	2b10      	cmp	r3, #16
 8004db0:	d0f0      	beq.n	8004d94 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3714      	adds	r7, #20
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b089      	sub	sp, #36	@ 0x24
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	4611      	mov	r1, r2
 8004dcc:	461a      	mov	r2, r3
 8004dce:	460b      	mov	r3, r1
 8004dd0:	71fb      	strb	r3, [r7, #7]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004dde:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d123      	bne.n	8004e2e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004de6:	88bb      	ldrh	r3, [r7, #4]
 8004de8:	3303      	adds	r3, #3
 8004dea:	089b      	lsrs	r3, r3, #2
 8004dec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004dee:	2300      	movs	r3, #0
 8004df0:	61bb      	str	r3, [r7, #24]
 8004df2:	e018      	b.n	8004e26 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004df4:	79fb      	ldrb	r3, [r7, #7]
 8004df6:	031a      	lsls	r2, r3, #12
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e00:	461a      	mov	r2, r3
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	3301      	adds	r3, #1
 8004e12:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	3301      	adds	r3, #1
 8004e18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	3301      	adds	r3, #1
 8004e24:	61bb      	str	r3, [r7, #24]
 8004e26:	69ba      	ldr	r2, [r7, #24]
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d3e2      	bcc.n	8004df4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3724      	adds	r7, #36	@ 0x24
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b08b      	sub	sp, #44	@ 0x2c
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	4613      	mov	r3, r2
 8004e48:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004e52:	88fb      	ldrh	r3, [r7, #6]
 8004e54:	089b      	lsrs	r3, r3, #2
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004e5a:	88fb      	ldrh	r3, [r7, #6]
 8004e5c:	f003 0303 	and.w	r3, r3, #3
 8004e60:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004e62:	2300      	movs	r3, #0
 8004e64:	623b      	str	r3, [r7, #32]
 8004e66:	e014      	b.n	8004e92 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e72:	601a      	str	r2, [r3, #0]
    pDest++;
 8004e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e76:	3301      	adds	r3, #1
 8004e78:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e82:	3301      	adds	r3, #1
 8004e84:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e88:	3301      	adds	r3, #1
 8004e8a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004e8c:	6a3b      	ldr	r3, [r7, #32]
 8004e8e:	3301      	adds	r3, #1
 8004e90:	623b      	str	r3, [r7, #32]
 8004e92:	6a3a      	ldr	r2, [r7, #32]
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d3e6      	bcc.n	8004e68 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004e9a:	8bfb      	ldrh	r3, [r7, #30]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d01e      	beq.n	8004ede <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004eaa:	461a      	mov	r2, r3
 8004eac:	f107 0310 	add.w	r3, r7, #16
 8004eb0:	6812      	ldr	r2, [r2, #0]
 8004eb2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	6a3b      	ldr	r3, [r7, #32]
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	00db      	lsls	r3, r3, #3
 8004ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ec0:	b2da      	uxtb	r2, r3
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec4:	701a      	strb	r2, [r3, #0]
      i++;
 8004ec6:	6a3b      	ldr	r3, [r7, #32]
 8004ec8:	3301      	adds	r3, #1
 8004eca:	623b      	str	r3, [r7, #32]
      pDest++;
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ece:	3301      	adds	r3, #1
 8004ed0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004ed2:	8bfb      	ldrh	r3, [r7, #30]
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004ed8:	8bfb      	ldrh	r3, [r7, #30]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1ea      	bne.n	8004eb4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	372c      	adds	r7, #44	@ 0x2c
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	4013      	ands	r3, r2
 8004f02:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004f04:	68fb      	ldr	r3, [r7, #12]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3714      	adds	r7, #20
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr

08004f12 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8004f12:	b480      	push	{r7}
 8004f14:	b085      	sub	sp, #20
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8004f22:	78fb      	ldrb	r3, [r7, #3]
 8004f24:	015a      	lsls	r2, r3, #5
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	4413      	add	r3, r2
 8004f2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8004f32:	78fb      	ldrb	r3, [r7, #3]
 8004f34:	015a      	lsls	r2, r3, #5
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	4013      	ands	r3, r2
 8004f44:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004f46:	68bb      	ldr	r3, [r7, #8]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3714      	adds	r7, #20
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	f003 0301 	and.w	r3, r3, #1
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	3301      	adds	r3, #1
 8004f80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f88:	d901      	bls.n	8004f8e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e01b      	b.n	8004fc6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	daf2      	bge.n	8004f7c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004f96:	2300      	movs	r3, #0
 8004f98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	f043 0201 	orr.w	r2, r3, #1
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004fb2:	d901      	bls.n	8004fb8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e006      	b.n	8004fc6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	f003 0301 	and.w	r3, r3, #1
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d0f0      	beq.n	8004fa6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3714      	adds	r7, #20
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
	...

08004fd4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fd4:	b084      	sub	sp, #16
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b086      	sub	sp, #24
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
 8004fde:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004fe2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ffe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800500a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005016:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005026:	2b00      	cmp	r3, #0
 8005028:	d119      	bne.n	800505e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800502a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800502e:	2b01      	cmp	r3, #1
 8005030:	d10a      	bne.n	8005048 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005040:	f043 0304 	orr.w	r3, r3, #4
 8005044:	6013      	str	r3, [r2, #0]
 8005046:	e014      	b.n	8005072 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005056:	f023 0304 	bic.w	r3, r3, #4
 800505a:	6013      	str	r3, [r2, #0]
 800505c:	e009      	b.n	8005072 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800506c:	f023 0304 	bic.w	r3, r3, #4
 8005070:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005072:	2110      	movs	r1, #16
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f7ff fe43 	bl	8004d00 <USB_FlushTxFifo>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d001      	beq.n	8005084 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f7ff fe6d 	bl	8004d64 <USB_FlushRxFifo>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d001      	beq.n	8005094 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005094:	2300      	movs	r3, #0
 8005096:	613b      	str	r3, [r7, #16]
 8005098:	e015      	b.n	80050c6 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	015a      	lsls	r2, r3, #5
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	4413      	add	r3, r2
 80050a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050a6:	461a      	mov	r2, r3
 80050a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80050ac:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	015a      	lsls	r2, r3, #5
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	4413      	add	r3, r2
 80050b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050ba:	461a      	mov	r2, r3
 80050bc:	2300      	movs	r3, #0
 80050be:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	3301      	adds	r3, #1
 80050c4:	613b      	str	r3, [r7, #16]
 80050c6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80050ca:	461a      	mov	r2, r3
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d3e3      	bcc.n	800509a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80050de:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a18      	ldr	r2, [pc, #96]	@ (8005144 <USB_HostInit+0x170>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d10b      	bne.n	8005100 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050ee:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a15      	ldr	r2, [pc, #84]	@ (8005148 <USB_HostInit+0x174>)
 80050f4:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a14      	ldr	r2, [pc, #80]	@ (800514c <USB_HostInit+0x178>)
 80050fa:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80050fe:	e009      	b.n	8005114 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2280      	movs	r2, #128	@ 0x80
 8005104:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a11      	ldr	r2, [pc, #68]	@ (8005150 <USB_HostInit+0x17c>)
 800510a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a11      	ldr	r2, [pc, #68]	@ (8005154 <USB_HostInit+0x180>)
 8005110:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005114:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005118:	2b00      	cmp	r3, #0
 800511a:	d105      	bne.n	8005128 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	f043 0210 	orr.w	r2, r3, #16
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	699a      	ldr	r2, [r3, #24]
 800512c:	4b0a      	ldr	r3, [pc, #40]	@ (8005158 <USB_HostInit+0x184>)
 800512e:	4313      	orrs	r3, r2
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005134:	7dfb      	ldrb	r3, [r7, #23]
}
 8005136:	4618      	mov	r0, r3
 8005138:	3718      	adds	r7, #24
 800513a:	46bd      	mov	sp, r7
 800513c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005140:	b004      	add	sp, #16
 8005142:	4770      	bx	lr
 8005144:	40040000 	.word	0x40040000
 8005148:	01000200 	.word	0x01000200
 800514c:	00e00300 	.word	0x00e00300
 8005150:	00600080 	.word	0x00600080
 8005154:	004000e0 	.word	0x004000e0
 8005158:	a3200008 	.word	0xa3200008

0800515c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	460b      	mov	r3, r1
 8005166:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800517a:	f023 0303 	bic.w	r3, r3, #3
 800517e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	78fb      	ldrb	r3, [r7, #3]
 800518a:	f003 0303 	and.w	r3, r3, #3
 800518e:	68f9      	ldr	r1, [r7, #12]
 8005190:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005194:	4313      	orrs	r3, r2
 8005196:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005198:	78fb      	ldrb	r3, [r7, #3]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d107      	bne.n	80051ae <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80051a4:	461a      	mov	r2, r3
 80051a6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80051aa:	6053      	str	r3, [r2, #4]
 80051ac:	e00c      	b.n	80051c8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80051ae:	78fb      	ldrb	r3, [r7, #3]
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d107      	bne.n	80051c4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80051ba:	461a      	mov	r2, r3
 80051bc:	f241 7370 	movw	r3, #6000	@ 0x1770
 80051c0:	6053      	str	r3, [r2, #4]
 80051c2:	e001      	b.n	80051c8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e000      	b.n	80051ca <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b084      	sub	sp, #16
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80051e2:	2300      	movs	r3, #0
 80051e4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80051f6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005200:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005204:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005206:	2064      	movs	r0, #100	@ 0x64
 8005208:	f7fc f9c4 	bl	8001594 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005214:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005218:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800521a:	200a      	movs	r0, #10
 800521c:	f7fc f9ba 	bl	8001594 <HAL_Delay>

  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800522a:	b480      	push	{r7}
 800522c:	b085      	sub	sp, #20
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
 8005232:	460b      	mov	r3, r1
 8005234:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800523a:	2300      	movs	r3, #0
 800523c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800524e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d109      	bne.n	800526e <USB_DriveVbus+0x44>
 800525a:	78fb      	ldrb	r3, [r7, #3]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d106      	bne.n	800526e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005268:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800526c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005274:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005278:	d109      	bne.n	800528e <USB_DriveVbus+0x64>
 800527a:	78fb      	ldrb	r3, [r7, #3]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d106      	bne.n	800528e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005288:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800528c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3714      	adds	r7, #20
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80052a8:	2300      	movs	r3, #0
 80052aa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	0c5b      	lsrs	r3, r3, #17
 80052ba:	f003 0303 	and.w	r3, r3, #3
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr

080052ca <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b085      	sub	sp, #20
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	b29b      	uxth	r3, r3
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3714      	adds	r7, #20
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b088      	sub	sp, #32
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	4608      	mov	r0, r1
 80052f6:	4611      	mov	r1, r2
 80052f8:	461a      	mov	r2, r3
 80052fa:	4603      	mov	r3, r0
 80052fc:	70fb      	strb	r3, [r7, #3]
 80052fe:	460b      	mov	r3, r1
 8005300:	70bb      	strb	r3, [r7, #2]
 8005302:	4613      	mov	r3, r2
 8005304:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005306:	2300      	movs	r3, #0
 8005308:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800530e:	78fb      	ldrb	r3, [r7, #3]
 8005310:	015a      	lsls	r2, r3, #5
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	4413      	add	r3, r2
 8005316:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800531a:	461a      	mov	r2, r3
 800531c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005320:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005322:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005326:	2b03      	cmp	r3, #3
 8005328:	d87c      	bhi.n	8005424 <USB_HC_Init+0x138>
 800532a:	a201      	add	r2, pc, #4	@ (adr r2, 8005330 <USB_HC_Init+0x44>)
 800532c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005330:	08005341 	.word	0x08005341
 8005334:	080053e7 	.word	0x080053e7
 8005338:	08005341 	.word	0x08005341
 800533c:	080053a9 	.word	0x080053a9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005340:	78fb      	ldrb	r3, [r7, #3]
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	4413      	add	r3, r2
 8005348:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800534c:	461a      	mov	r2, r3
 800534e:	f240 439d 	movw	r3, #1181	@ 0x49d
 8005352:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005354:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005358:	2b00      	cmp	r3, #0
 800535a:	da10      	bge.n	800537e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800535c:	78fb      	ldrb	r3, [r7, #3]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	4413      	add	r3, r2
 8005364:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	78fa      	ldrb	r2, [r7, #3]
 800536c:	0151      	lsls	r1, r2, #5
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	440a      	add	r2, r1
 8005372:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005376:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800537a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800537c:	e055      	b.n	800542a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a6f      	ldr	r2, [pc, #444]	@ (8005540 <USB_HC_Init+0x254>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d151      	bne.n	800542a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005386:	78fb      	ldrb	r3, [r7, #3]
 8005388:	015a      	lsls	r2, r3, #5
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	4413      	add	r3, r2
 800538e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	78fa      	ldrb	r2, [r7, #3]
 8005396:	0151      	lsls	r1, r2, #5
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	440a      	add	r2, r1
 800539c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80053a0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80053a4:	60d3      	str	r3, [r2, #12]
      break;
 80053a6:	e040      	b.n	800542a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80053a8:	78fb      	ldrb	r3, [r7, #3]
 80053aa:	015a      	lsls	r2, r3, #5
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053b4:	461a      	mov	r2, r3
 80053b6:	f240 639d 	movw	r3, #1693	@ 0x69d
 80053ba:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80053bc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	da34      	bge.n	800542e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80053c4:	78fb      	ldrb	r3, [r7, #3]
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	78fa      	ldrb	r2, [r7, #3]
 80053d4:	0151      	lsls	r1, r2, #5
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	440a      	add	r2, r1
 80053da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80053de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053e2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80053e4:	e023      	b.n	800542e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80053e6:	78fb      	ldrb	r3, [r7, #3]
 80053e8:	015a      	lsls	r2, r3, #5
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	4413      	add	r3, r2
 80053ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053f2:	461a      	mov	r2, r3
 80053f4:	f240 2325 	movw	r3, #549	@ 0x225
 80053f8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80053fa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	da17      	bge.n	8005432 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005402:	78fb      	ldrb	r3, [r7, #3]
 8005404:	015a      	lsls	r2, r3, #5
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	4413      	add	r3, r2
 800540a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	78fa      	ldrb	r2, [r7, #3]
 8005412:	0151      	lsls	r1, r2, #5
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	440a      	add	r2, r1
 8005418:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800541c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8005420:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005422:	e006      	b.n	8005432 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	77fb      	strb	r3, [r7, #31]
      break;
 8005428:	e004      	b.n	8005434 <USB_HC_Init+0x148>
      break;
 800542a:	bf00      	nop
 800542c:	e002      	b.n	8005434 <USB_HC_Init+0x148>
      break;
 800542e:	bf00      	nop
 8005430:	e000      	b.n	8005434 <USB_HC_Init+0x148>
      break;
 8005432:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005434:	78fb      	ldrb	r3, [r7, #3]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	4413      	add	r3, r2
 800543c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005440:	461a      	mov	r2, r3
 8005442:	2300      	movs	r3, #0
 8005444:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005446:	78fb      	ldrb	r3, [r7, #3]
 8005448:	015a      	lsls	r2, r3, #5
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	4413      	add	r3, r2
 800544e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	78fa      	ldrb	r2, [r7, #3]
 8005456:	0151      	lsls	r1, r2, #5
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	440a      	add	r2, r1
 800545c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005460:	f043 0302 	orr.w	r3, r3, #2
 8005464:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800546c:	699a      	ldr	r2, [r3, #24]
 800546e:	78fb      	ldrb	r3, [r7, #3]
 8005470:	f003 030f 	and.w	r3, r3, #15
 8005474:	2101      	movs	r1, #1
 8005476:	fa01 f303 	lsl.w	r3, r1, r3
 800547a:	6939      	ldr	r1, [r7, #16]
 800547c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005480:	4313      	orrs	r3, r2
 8005482:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005490:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005494:	2b00      	cmp	r3, #0
 8005496:	da03      	bge.n	80054a0 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005498:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800549c:	61bb      	str	r3, [r7, #24]
 800549e:	e001      	b.n	80054a4 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80054a0:	2300      	movs	r3, #0
 80054a2:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f7ff fef9 	bl	800529c <USB_GetHostSpeed>
 80054aa:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80054ac:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d106      	bne.n	80054c2 <USB_HC_Init+0x1d6>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d003      	beq.n	80054c2 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80054ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80054be:	617b      	str	r3, [r7, #20]
 80054c0:	e001      	b.n	80054c6 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80054c2:	2300      	movs	r3, #0
 80054c4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80054c6:	787b      	ldrb	r3, [r7, #1]
 80054c8:	059b      	lsls	r3, r3, #22
 80054ca:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80054ce:	78bb      	ldrb	r3, [r7, #2]
 80054d0:	02db      	lsls	r3, r3, #11
 80054d2:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80054d6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80054d8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80054dc:	049b      	lsls	r3, r3, #18
 80054de:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80054e2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80054e4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80054e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80054ea:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	431a      	orrs	r2, r3
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80054f4:	78fa      	ldrb	r2, [r7, #3]
 80054f6:	0151      	lsls	r1, r2, #5
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	440a      	add	r2, r1
 80054fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005500:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005504:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005506:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800550a:	2b03      	cmp	r3, #3
 800550c:	d003      	beq.n	8005516 <USB_HC_Init+0x22a>
 800550e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005512:	2b01      	cmp	r3, #1
 8005514:	d10f      	bne.n	8005536 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005516:	78fb      	ldrb	r3, [r7, #3]
 8005518:	015a      	lsls	r2, r3, #5
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	4413      	add	r3, r2
 800551e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	78fa      	ldrb	r2, [r7, #3]
 8005526:	0151      	lsls	r1, r2, #5
 8005528:	693a      	ldr	r2, [r7, #16]
 800552a:	440a      	add	r2, r1
 800552c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005530:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005534:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005536:	7ffb      	ldrb	r3, [r7, #31]
}
 8005538:	4618      	mov	r0, r3
 800553a:	3720      	adds	r7, #32
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	40040000 	.word	0x40040000

08005544 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b08c      	sub	sp, #48	@ 0x30
 8005548:	af02      	add	r7, sp, #8
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	4613      	mov	r3, r2
 8005550:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	785b      	ldrb	r3, [r3, #1]
 800555a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800555c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005560:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	4a5d      	ldr	r2, [pc, #372]	@ (80056dc <USB_HC_StartXfer+0x198>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d12f      	bne.n	80055ca <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800556a:	79fb      	ldrb	r3, [r7, #7]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d11c      	bne.n	80055aa <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	7c9b      	ldrb	r3, [r3, #18]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d003      	beq.n	8005580 <USB_HC_StartXfer+0x3c>
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	7c9b      	ldrb	r3, [r3, #18]
 800557c:	2b02      	cmp	r3, #2
 800557e:	d124      	bne.n	80055ca <USB_HC_StartXfer+0x86>
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	799b      	ldrb	r3, [r3, #6]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d120      	bne.n	80055ca <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	015a      	lsls	r2, r3, #5
 800558c:	6a3b      	ldr	r3, [r7, #32]
 800558e:	4413      	add	r3, r2
 8005590:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	69fa      	ldr	r2, [r7, #28]
 8005598:	0151      	lsls	r1, r2, #5
 800559a:	6a3a      	ldr	r2, [r7, #32]
 800559c:	440a      	add	r2, r1
 800559e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80055a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055a6:	60d3      	str	r3, [r2, #12]
 80055a8:	e00f      	b.n	80055ca <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	791b      	ldrb	r3, [r3, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d10b      	bne.n	80055ca <USB_HC_StartXfer+0x86>
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	795b      	ldrb	r3, [r3, #5]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d107      	bne.n	80055ca <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	785b      	ldrb	r3, [r3, #1]
 80055be:	4619      	mov	r1, r3
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f000 fb6b 	bl	8005c9c <USB_DoPing>
        return HAL_OK;
 80055c6:	2300      	movs	r3, #0
 80055c8:	e232      	b.n	8005a30 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	799b      	ldrb	r3, [r3, #6]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d158      	bne.n	8005684 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80055d2:	2301      	movs	r3, #1
 80055d4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	78db      	ldrb	r3, [r3, #3]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d007      	beq.n	80055ee <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80055de:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	8a92      	ldrh	r2, [r2, #20]
 80055e4:	fb03 f202 	mul.w	r2, r3, r2
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	61da      	str	r2, [r3, #28]
 80055ec:	e07c      	b.n	80056e8 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	7c9b      	ldrb	r3, [r3, #18]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d130      	bne.n	8005658 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	2bbc      	cmp	r3, #188	@ 0xbc
 80055fc:	d918      	bls.n	8005630 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	8a9b      	ldrh	r3, [r3, #20]
 8005602:	461a      	mov	r2, r3
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	69da      	ldr	r2, [r3, #28]
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d003      	beq.n	8005620 <USB_HC_StartXfer+0xdc>
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	2b02      	cmp	r3, #2
 800561e:	d103      	bne.n	8005628 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	2202      	movs	r2, #2
 8005624:	60da      	str	r2, [r3, #12]
 8005626:	e05f      	b.n	80056e8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	2201      	movs	r2, #1
 800562c:	60da      	str	r2, [r3, #12]
 800562e:	e05b      	b.n	80056e8 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	6a1a      	ldr	r2, [r3, #32]
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d007      	beq.n	8005650 <USB_HC_StartXfer+0x10c>
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	2b02      	cmp	r3, #2
 8005646:	d003      	beq.n	8005650 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	2204      	movs	r2, #4
 800564c:	60da      	str	r2, [r3, #12]
 800564e:	e04b      	b.n	80056e8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	2203      	movs	r2, #3
 8005654:	60da      	str	r2, [r3, #12]
 8005656:	e047      	b.n	80056e8 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8005658:	79fb      	ldrb	r3, [r7, #7]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d10d      	bne.n	800567a <USB_HC_StartXfer+0x136>
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	8a92      	ldrh	r2, [r2, #20]
 8005666:	4293      	cmp	r3, r2
 8005668:	d907      	bls.n	800567a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800566a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	8a92      	ldrh	r2, [r2, #20]
 8005670:	fb03 f202 	mul.w	r2, r3, r2
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	61da      	str	r2, [r3, #28]
 8005678:	e036      	b.n	80056e8 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	6a1a      	ldr	r2, [r3, #32]
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	61da      	str	r2, [r3, #28]
 8005682:	e031      	b.n	80056e8 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	6a1b      	ldr	r3, [r3, #32]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d018      	beq.n	80056be <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	6a1b      	ldr	r3, [r3, #32]
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	8a92      	ldrh	r2, [r2, #20]
 8005694:	4413      	add	r3, r2
 8005696:	3b01      	subs	r3, #1
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	8a92      	ldrh	r2, [r2, #20]
 800569c:	fbb3 f3f2 	udiv	r3, r3, r2
 80056a0:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80056a2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80056a4:	8b7b      	ldrh	r3, [r7, #26]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d90b      	bls.n	80056c2 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80056aa:	8b7b      	ldrh	r3, [r7, #26]
 80056ac:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80056ae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	8a92      	ldrh	r2, [r2, #20]
 80056b4:	fb03 f202 	mul.w	r2, r3, r2
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	61da      	str	r2, [r3, #28]
 80056bc:	e001      	b.n	80056c2 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80056be:	2301      	movs	r3, #1
 80056c0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	78db      	ldrb	r3, [r3, #3]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00a      	beq.n	80056e0 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80056ca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80056cc:	68ba      	ldr	r2, [r7, #8]
 80056ce:	8a92      	ldrh	r2, [r2, #20]
 80056d0:	fb03 f202 	mul.w	r2, r3, r2
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	61da      	str	r2, [r3, #28]
 80056d8:	e006      	b.n	80056e8 <USB_HC_StartXfer+0x1a4>
 80056da:	bf00      	nop
 80056dc:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	6a1a      	ldr	r2, [r3, #32]
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	69db      	ldr	r3, [r3, #28]
 80056ec:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80056f0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80056f2:	04d9      	lsls	r1, r3, #19
 80056f4:	4ba3      	ldr	r3, [pc, #652]	@ (8005984 <USB_HC_StartXfer+0x440>)
 80056f6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80056f8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	7d9b      	ldrb	r3, [r3, #22]
 80056fe:	075b      	lsls	r3, r3, #29
 8005700:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005704:	69f9      	ldr	r1, [r7, #28]
 8005706:	0148      	lsls	r0, r1, #5
 8005708:	6a39      	ldr	r1, [r7, #32]
 800570a:	4401      	add	r1, r0
 800570c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005710:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005712:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005714:	79fb      	ldrb	r3, [r7, #7]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d009      	beq.n	800572e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	6999      	ldr	r1, [r3, #24]
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	015a      	lsls	r2, r3, #5
 8005722:	6a3b      	ldr	r3, [r7, #32]
 8005724:	4413      	add	r3, r2
 8005726:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800572a:	460a      	mov	r2, r1
 800572c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800572e:	6a3b      	ldr	r3, [r7, #32]
 8005730:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	2b00      	cmp	r3, #0
 800573c:	bf0c      	ite	eq
 800573e:	2301      	moveq	r3, #1
 8005740:	2300      	movne	r3, #0
 8005742:	b2db      	uxtb	r3, r3
 8005744:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	015a      	lsls	r2, r3, #5
 800574a:	6a3b      	ldr	r3, [r7, #32]
 800574c:	4413      	add	r3, r2
 800574e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	69fa      	ldr	r2, [r7, #28]
 8005756:	0151      	lsls	r1, r2, #5
 8005758:	6a3a      	ldr	r2, [r7, #32]
 800575a:	440a      	add	r2, r1
 800575c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005760:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005764:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	015a      	lsls	r2, r3, #5
 800576a:	6a3b      	ldr	r3, [r7, #32]
 800576c:	4413      	add	r3, r2
 800576e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	7e7b      	ldrb	r3, [r7, #25]
 8005776:	075b      	lsls	r3, r3, #29
 8005778:	69f9      	ldr	r1, [r7, #28]
 800577a:	0148      	lsls	r0, r1, #5
 800577c:	6a39      	ldr	r1, [r7, #32]
 800577e:	4401      	add	r1, r0
 8005780:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8005784:	4313      	orrs	r3, r2
 8005786:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	799b      	ldrb	r3, [r3, #6]
 800578c:	2b01      	cmp	r3, #1
 800578e:	f040 80c3 	bne.w	8005918 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	7c5b      	ldrb	r3, [r3, #17]
 8005796:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800579c:	4313      	orrs	r3, r2
 800579e:	69fa      	ldr	r2, [r7, #28]
 80057a0:	0151      	lsls	r1, r2, #5
 80057a2:	6a3a      	ldr	r2, [r7, #32]
 80057a4:	440a      	add	r2, r1
 80057a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80057aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80057ae:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	015a      	lsls	r2, r3, #5
 80057b4:	6a3b      	ldr	r3, [r7, #32]
 80057b6:	4413      	add	r3, r2
 80057b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	69fa      	ldr	r2, [r7, #28]
 80057c0:	0151      	lsls	r1, r2, #5
 80057c2:	6a3a      	ldr	r2, [r7, #32]
 80057c4:	440a      	add	r2, r1
 80057c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80057ca:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80057ce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	79db      	ldrb	r3, [r3, #7]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d123      	bne.n	8005820 <USB_HC_StartXfer+0x2dc>
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	78db      	ldrb	r3, [r3, #3]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d11f      	bne.n	8005820 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	015a      	lsls	r2, r3, #5
 80057e4:	6a3b      	ldr	r3, [r7, #32]
 80057e6:	4413      	add	r3, r2
 80057e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	69fa      	ldr	r2, [r7, #28]
 80057f0:	0151      	lsls	r1, r2, #5
 80057f2:	6a3a      	ldr	r2, [r7, #32]
 80057f4:	440a      	add	r2, r1
 80057f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80057fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057fe:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	015a      	lsls	r2, r3, #5
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	4413      	add	r3, r2
 8005808:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	69fa      	ldr	r2, [r7, #28]
 8005810:	0151      	lsls	r1, r2, #5
 8005812:	6a3a      	ldr	r2, [r7, #32]
 8005814:	440a      	add	r2, r1
 8005816:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800581a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800581e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	7c9b      	ldrb	r3, [r3, #18]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d003      	beq.n	8005830 <USB_HC_StartXfer+0x2ec>
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	7c9b      	ldrb	r3, [r3, #18]
 800582c:	2b03      	cmp	r3, #3
 800582e:	d117      	bne.n	8005860 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005834:	2b01      	cmp	r3, #1
 8005836:	d113      	bne.n	8005860 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	78db      	ldrb	r3, [r3, #3]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d10f      	bne.n	8005860 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	015a      	lsls	r2, r3, #5
 8005844:	6a3b      	ldr	r3, [r7, #32]
 8005846:	4413      	add	r3, r2
 8005848:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	69fa      	ldr	r2, [r7, #28]
 8005850:	0151      	lsls	r1, r2, #5
 8005852:	6a3a      	ldr	r2, [r7, #32]
 8005854:	440a      	add	r2, r1
 8005856:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800585a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800585e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	7c9b      	ldrb	r3, [r3, #18]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d162      	bne.n	800592e <USB_HC_StartXfer+0x3ea>
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	78db      	ldrb	r3, [r3, #3]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d15e      	bne.n	800592e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	3b01      	subs	r3, #1
 8005876:	2b03      	cmp	r3, #3
 8005878:	d858      	bhi.n	800592c <USB_HC_StartXfer+0x3e8>
 800587a:	a201      	add	r2, pc, #4	@ (adr r2, 8005880 <USB_HC_StartXfer+0x33c>)
 800587c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005880:	08005891 	.word	0x08005891
 8005884:	080058b3 	.word	0x080058b3
 8005888:	080058d5 	.word	0x080058d5
 800588c:	080058f7 	.word	0x080058f7
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	015a      	lsls	r2, r3, #5
 8005894:	6a3b      	ldr	r3, [r7, #32]
 8005896:	4413      	add	r3, r2
 8005898:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	69fa      	ldr	r2, [r7, #28]
 80058a0:	0151      	lsls	r1, r2, #5
 80058a2:	6a3a      	ldr	r2, [r7, #32]
 80058a4:	440a      	add	r2, r1
 80058a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80058aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058ae:	6053      	str	r3, [r2, #4]
          break;
 80058b0:	e03d      	b.n	800592e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	015a      	lsls	r2, r3, #5
 80058b6:	6a3b      	ldr	r3, [r7, #32]
 80058b8:	4413      	add	r3, r2
 80058ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	69fa      	ldr	r2, [r7, #28]
 80058c2:	0151      	lsls	r1, r2, #5
 80058c4:	6a3a      	ldr	r2, [r7, #32]
 80058c6:	440a      	add	r2, r1
 80058c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80058cc:	f043 030e 	orr.w	r3, r3, #14
 80058d0:	6053      	str	r3, [r2, #4]
          break;
 80058d2:	e02c      	b.n	800592e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	015a      	lsls	r2, r3, #5
 80058d8:	6a3b      	ldr	r3, [r7, #32]
 80058da:	4413      	add	r3, r2
 80058dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	69fa      	ldr	r2, [r7, #28]
 80058e4:	0151      	lsls	r1, r2, #5
 80058e6:	6a3a      	ldr	r2, [r7, #32]
 80058e8:	440a      	add	r2, r1
 80058ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80058ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80058f2:	6053      	str	r3, [r2, #4]
          break;
 80058f4:	e01b      	b.n	800592e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	015a      	lsls	r2, r3, #5
 80058fa:	6a3b      	ldr	r3, [r7, #32]
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	69fa      	ldr	r2, [r7, #28]
 8005906:	0151      	lsls	r1, r2, #5
 8005908:	6a3a      	ldr	r2, [r7, #32]
 800590a:	440a      	add	r2, r1
 800590c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005910:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005914:	6053      	str	r3, [r2, #4]
          break;
 8005916:	e00a      	b.n	800592e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	015a      	lsls	r2, r3, #5
 800591c:	6a3b      	ldr	r3, [r7, #32]
 800591e:	4413      	add	r3, r2
 8005920:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005924:	461a      	mov	r2, r3
 8005926:	2300      	movs	r3, #0
 8005928:	6053      	str	r3, [r2, #4]
 800592a:	e000      	b.n	800592e <USB_HC_StartXfer+0x3ea>
          break;
 800592c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	015a      	lsls	r2, r3, #5
 8005932:	6a3b      	ldr	r3, [r7, #32]
 8005934:	4413      	add	r3, r2
 8005936:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005944:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	78db      	ldrb	r3, [r3, #3]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d004      	beq.n	8005958 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005954:	613b      	str	r3, [r7, #16]
 8005956:	e003      	b.n	8005960 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800595e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005966:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	015a      	lsls	r2, r3, #5
 800596c:	6a3b      	ldr	r3, [r7, #32]
 800596e:	4413      	add	r3, r2
 8005970:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005974:	461a      	mov	r2, r3
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800597a:	79fb      	ldrb	r3, [r7, #7]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d003      	beq.n	8005988 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8005980:	2300      	movs	r3, #0
 8005982:	e055      	b.n	8005a30 <USB_HC_StartXfer+0x4ec>
 8005984:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	78db      	ldrb	r3, [r3, #3]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d14e      	bne.n	8005a2e <USB_HC_StartXfer+0x4ea>
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d04a      	beq.n	8005a2e <USB_HC_StartXfer+0x4ea>
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	79db      	ldrb	r3, [r3, #7]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d146      	bne.n	8005a2e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	7c9b      	ldrb	r3, [r3, #18]
 80059a4:	2b03      	cmp	r3, #3
 80059a6:	d831      	bhi.n	8005a0c <USB_HC_StartXfer+0x4c8>
 80059a8:	a201      	add	r2, pc, #4	@ (adr r2, 80059b0 <USB_HC_StartXfer+0x46c>)
 80059aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ae:	bf00      	nop
 80059b0:	080059c1 	.word	0x080059c1
 80059b4:	080059e5 	.word	0x080059e5
 80059b8:	080059c1 	.word	0x080059c1
 80059bc:	080059e5 	.word	0x080059e5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	6a1b      	ldr	r3, [r3, #32]
 80059c4:	3303      	adds	r3, #3
 80059c6:	089b      	lsrs	r3, r3, #2
 80059c8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80059ca:	8afa      	ldrh	r2, [r7, #22]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d91c      	bls.n	8005a10 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	f043 0220 	orr.w	r2, r3, #32
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	619a      	str	r2, [r3, #24]
        }
        break;
 80059e2:	e015      	b.n	8005a10 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	6a1b      	ldr	r3, [r3, #32]
 80059e8:	3303      	adds	r3, #3
 80059ea:	089b      	lsrs	r3, r3, #2
 80059ec:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80059ee:	8afa      	ldrh	r2, [r7, #22]
 80059f0:	6a3b      	ldr	r3, [r7, #32]
 80059f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d90a      	bls.n	8005a14 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	619a      	str	r2, [r3, #24]
        }
        break;
 8005a0a:	e003      	b.n	8005a14 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8005a0c:	bf00      	nop
 8005a0e:	e002      	b.n	8005a16 <USB_HC_StartXfer+0x4d2>
        break;
 8005a10:	bf00      	nop
 8005a12:	e000      	b.n	8005a16 <USB_HC_StartXfer+0x4d2>
        break;
 8005a14:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	6999      	ldr	r1, [r3, #24]
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	785a      	ldrb	r2, [r3, #1]
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	6a1b      	ldr	r3, [r3, #32]
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	2000      	movs	r0, #0
 8005a26:	9000      	str	r0, [sp, #0]
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f7ff f9c9 	bl	8004dc0 <USB_WritePacket>
  }

  return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3728      	adds	r7, #40	@ 0x28
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a4a:	695b      	ldr	r3, [r3, #20]
 8005a4c:	b29b      	uxth	r3, r3
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3714      	adds	r7, #20
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b089      	sub	sp, #36	@ 0x24
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
 8005a62:	460b      	mov	r3, r1
 8005a64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005a6a:	78fb      	ldrb	r3, [r7, #3]
 8005a6c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	0c9b      	lsrs	r3, r3, #18
 8005a82:	f003 0303 	and.w	r3, r3, #3
 8005a86:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	015a      	lsls	r2, r3, #5
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	4413      	add	r3, r2
 8005a90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	0fdb      	lsrs	r3, r3, #31
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	015a      	lsls	r2, r3, #5
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	0fdb      	lsrs	r3, r3, #31
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f003 0320 	and.w	r3, r3, #32
 8005abc:	2b20      	cmp	r3, #32
 8005abe:	d10d      	bne.n	8005adc <USB_HC_Halt+0x82>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d10a      	bne.n	8005adc <USB_HC_Halt+0x82>
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d005      	beq.n	8005ad8 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d002      	beq.n	8005ad8 <USB_HC_Halt+0x7e>
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	2b03      	cmp	r3, #3
 8005ad6:	d101      	bne.n	8005adc <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	e0d8      	b.n	8005c8e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d002      	beq.n	8005ae8 <USB_HC_Halt+0x8e>
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d173      	bne.n	8005bd0 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	015a      	lsls	r2, r3, #5
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	4413      	add	r3, r2
 8005af0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	69ba      	ldr	r2, [r7, #24]
 8005af8:	0151      	lsls	r1, r2, #5
 8005afa:	69fa      	ldr	r2, [r7, #28]
 8005afc:	440a      	add	r2, r1
 8005afe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b02:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005b06:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	f003 0320 	and.w	r3, r3, #32
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d14a      	bne.n	8005baa <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b18:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d133      	bne.n	8005b88 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	015a      	lsls	r2, r3, #5
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	4413      	add	r3, r2
 8005b28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	69ba      	ldr	r2, [r7, #24]
 8005b30:	0151      	lsls	r1, r2, #5
 8005b32:	69fa      	ldr	r2, [r7, #28]
 8005b34:	440a      	add	r2, r1
 8005b36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b3a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005b3e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	015a      	lsls	r2, r3, #5
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	4413      	add	r3, r2
 8005b48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	69ba      	ldr	r2, [r7, #24]
 8005b50:	0151      	lsls	r1, r2, #5
 8005b52:	69fa      	ldr	r2, [r7, #28]
 8005b54:	440a      	add	r2, r1
 8005b56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b5a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005b5e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	3301      	adds	r3, #1
 8005b64:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005b6c:	d82e      	bhi.n	8005bcc <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	015a      	lsls	r2, r3, #5
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b84:	d0ec      	beq.n	8005b60 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005b86:	e081      	b.n	8005c8c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	69ba      	ldr	r2, [r7, #24]
 8005b98:	0151      	lsls	r1, r2, #5
 8005b9a:	69fa      	ldr	r2, [r7, #28]
 8005b9c:	440a      	add	r2, r1
 8005b9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005ba6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005ba8:	e070      	b.n	8005c8c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	015a      	lsls	r2, r3, #5
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	0151      	lsls	r1, r2, #5
 8005bbc:	69fa      	ldr	r2, [r7, #28]
 8005bbe:	440a      	add	r2, r1
 8005bc0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bc4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005bc8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005bca:	e05f      	b.n	8005c8c <USB_HC_Halt+0x232>
            break;
 8005bcc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005bce:	e05d      	b.n	8005c8c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	015a      	lsls	r2, r3, #5
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	69ba      	ldr	r2, [r7, #24]
 8005be0:	0151      	lsls	r1, r2, #5
 8005be2:	69fa      	ldr	r2, [r7, #28]
 8005be4:	440a      	add	r2, r1
 8005be6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005bee:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d133      	bne.n	8005c68 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	69ba      	ldr	r2, [r7, #24]
 8005c10:	0151      	lsls	r1, r2, #5
 8005c12:	69fa      	ldr	r2, [r7, #28]
 8005c14:	440a      	add	r2, r1
 8005c16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c1a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005c1e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	69ba      	ldr	r2, [r7, #24]
 8005c30:	0151      	lsls	r1, r2, #5
 8005c32:	69fa      	ldr	r2, [r7, #28]
 8005c34:	440a      	add	r2, r1
 8005c36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c3a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005c3e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	3301      	adds	r3, #1
 8005c44:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005c4c:	d81d      	bhi.n	8005c8a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	015a      	lsls	r2, r3, #5
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	4413      	add	r3, r2
 8005c56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c64:	d0ec      	beq.n	8005c40 <USB_HC_Halt+0x1e6>
 8005c66:	e011      	b.n	8005c8c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	015a      	lsls	r2, r3, #5
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	4413      	add	r3, r2
 8005c70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	69ba      	ldr	r2, [r7, #24]
 8005c78:	0151      	lsls	r1, r2, #5
 8005c7a:	69fa      	ldr	r2, [r7, #28]
 8005c7c:	440a      	add	r2, r1
 8005c7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005c86:	6013      	str	r3, [r2, #0]
 8005c88:	e000      	b.n	8005c8c <USB_HC_Halt+0x232>
          break;
 8005c8a:	bf00      	nop
    }
  }

  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3724      	adds	r7, #36	@ 0x24
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
	...

08005c9c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b087      	sub	sp, #28
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005cac:	78fb      	ldrb	r3, [r7, #3]
 8005cae:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	04da      	lsls	r2, r3, #19
 8005cb8:	4b15      	ldr	r3, [pc, #84]	@ (8005d10 <USB_DoPing+0x74>)
 8005cba:	4013      	ands	r3, r2
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	0151      	lsls	r1, r2, #5
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	440a      	add	r2, r1
 8005cc4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005cc8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005ccc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	015a      	lsls	r2, r3, #5
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005ce4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005cec:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	015a      	lsls	r2, r3, #5
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	371c      	adds	r7, #28
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	1ff80000 	.word	0x1ff80000

08005d14 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b088      	sub	sp, #32
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005d24:	2300      	movs	r3, #0
 8005d26:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f7fe ff8c 	bl	8004c46 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d2e:	2110      	movs	r1, #16
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f7fe ffe5 	bl	8004d00 <USB_FlushTxFifo>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d001      	beq.n	8005d40 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f7ff f80f 	bl	8004d64 <USB_FlushRxFifo>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d001      	beq.n	8005d50 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005d50:	2300      	movs	r3, #0
 8005d52:	61bb      	str	r3, [r7, #24]
 8005d54:	e01f      	b.n	8005d96 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	015a      	lsls	r2, r3, #5
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d6c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005d74:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005d7c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	015a      	lsls	r2, r3, #5
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	4413      	add	r3, r2
 8005d86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	3301      	adds	r3, #1
 8005d94:	61bb      	str	r3, [r7, #24]
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	2b0f      	cmp	r3, #15
 8005d9a:	d9dc      	bls.n	8005d56 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	61bb      	str	r3, [r7, #24]
 8005da0:	e034      	b.n	8005e0c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	015a      	lsls	r2, r3, #5
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	4413      	add	r3, r2
 8005daa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005db8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005dc0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005dc8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	015a      	lsls	r2, r3, #5
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	3301      	adds	r3, #1
 8005de0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005de8:	d80c      	bhi.n	8005e04 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005dfc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e00:	d0ec      	beq.n	8005ddc <USB_StopHost+0xc8>
 8005e02:	e000      	b.n	8005e06 <USB_StopHost+0xf2>
        break;
 8005e04:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	61bb      	str	r3, [r7, #24]
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	2b0f      	cmp	r3, #15
 8005e10:	d9c7      	bls.n	8005da2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e18:	461a      	mov	r2, r3
 8005e1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005e1e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005e26:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f7fe fefb 	bl	8004c24 <USB_EnableGlobalInt>

  return ret;
 8005e2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3720      	adds	r7, #32
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005e38:	b590      	push	{r4, r7, lr}
 8005e3a:	b089      	sub	sp, #36	@ 0x24
 8005e3c:	af04      	add	r7, sp, #16
 8005e3e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005e40:	2301      	movs	r3, #1
 8005e42:	2202      	movs	r2, #2
 8005e44:	2102      	movs	r1, #2
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fc85 	bl	8006756 <USBH_FindInterface>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005e50:	7bfb      	ldrb	r3, [r7, #15]
 8005e52:	2bff      	cmp	r3, #255	@ 0xff
 8005e54:	d002      	beq.n	8005e5c <USBH_CDC_InterfaceInit+0x24>
 8005e56:	7bfb      	ldrb	r3, [r7, #15]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d901      	bls.n	8005e60 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005e5c:	2302      	movs	r3, #2
 8005e5e:	e13d      	b.n	80060dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005e60:	7bfb      	ldrb	r3, [r7, #15]
 8005e62:	4619      	mov	r1, r3
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 fc5a 	bl	800671e <USBH_SelectInterface>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005e6e:	7bbb      	ldrb	r3, [r7, #14]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d001      	beq.n	8005e78 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005e74:	2302      	movs	r3, #2
 8005e76:	e131      	b.n	80060dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8005e7e:	2050      	movs	r0, #80	@ 0x50
 8005e80:	f002 fb64 	bl	800854c <malloc>
 8005e84:	4603      	mov	r3, r0
 8005e86:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005e8e:	69db      	ldr	r3, [r3, #28]
 8005e90:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d101      	bne.n	8005e9c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005e98:	2302      	movs	r3, #2
 8005e9a:	e11f      	b.n	80060dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005e9c:	2250      	movs	r2, #80	@ 0x50
 8005e9e:	2100      	movs	r1, #0
 8005ea0:	68b8      	ldr	r0, [r7, #8]
 8005ea2:	f002 fc11 	bl	80086c8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005ea6:	7bfb      	ldrb	r3, [r7, #15]
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	211a      	movs	r1, #26
 8005eac:	fb01 f303 	mul.w	r3, r1, r3
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	b25b      	sxtb	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	da15      	bge.n	8005eea <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005ebe:	7bfb      	ldrb	r3, [r7, #15]
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	211a      	movs	r1, #26
 8005ec4:	fb01 f303 	mul.w	r3, r1, r3
 8005ec8:	4413      	add	r3, r2
 8005eca:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8005ece:	781a      	ldrb	r2, [r3, #0]
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005ed4:	7bfb      	ldrb	r3, [r7, #15]
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	211a      	movs	r1, #26
 8005eda:	fb01 f303 	mul.w	r3, r1, r3
 8005ede:	4413      	add	r3, r2
 8005ee0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005ee4:	881a      	ldrh	r2, [r3, #0]
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	785b      	ldrb	r3, [r3, #1]
 8005eee:	4619      	mov	r1, r3
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f001 ffbe 	bl	8007e72 <USBH_AllocPipe>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	461a      	mov	r2, r3
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	7819      	ldrb	r1, [r3, #0]
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	7858      	ldrb	r0, [r3, #1]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8005f12:	68ba      	ldr	r2, [r7, #8]
 8005f14:	8952      	ldrh	r2, [r2, #10]
 8005f16:	9202      	str	r2, [sp, #8]
 8005f18:	2203      	movs	r2, #3
 8005f1a:	9201      	str	r2, [sp, #4]
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	4623      	mov	r3, r4
 8005f20:	4602      	mov	r2, r0
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f001 ff76 	bl	8007e14 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	4619      	mov	r1, r3
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f002 fa85 	bl	8008440 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005f36:	2300      	movs	r3, #0
 8005f38:	2200      	movs	r2, #0
 8005f3a:	210a      	movs	r1, #10
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 fc0a 	bl	8006756 <USBH_FindInterface>
 8005f42:	4603      	mov	r3, r0
 8005f44:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005f46:	7bfb      	ldrb	r3, [r7, #15]
 8005f48:	2bff      	cmp	r3, #255	@ 0xff
 8005f4a:	d002      	beq.n	8005f52 <USBH_CDC_InterfaceInit+0x11a>
 8005f4c:	7bfb      	ldrb	r3, [r7, #15]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d901      	bls.n	8005f56 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005f52:	2302      	movs	r3, #2
 8005f54:	e0c2      	b.n	80060dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005f56:	7bfb      	ldrb	r3, [r7, #15]
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	211a      	movs	r1, #26
 8005f5c:	fb01 f303 	mul.w	r3, r1, r3
 8005f60:	4413      	add	r3, r2
 8005f62:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	b25b      	sxtb	r3, r3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	da16      	bge.n	8005f9c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005f6e:	7bfb      	ldrb	r3, [r7, #15]
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	211a      	movs	r1, #26
 8005f74:	fb01 f303 	mul.w	r3, r1, r3
 8005f78:	4413      	add	r3, r2
 8005f7a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8005f7e:	781a      	ldrb	r2, [r3, #0]
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005f84:	7bfb      	ldrb	r3, [r7, #15]
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	211a      	movs	r1, #26
 8005f8a:	fb01 f303 	mul.w	r3, r1, r3
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005f94:	881a      	ldrh	r2, [r3, #0]
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	835a      	strh	r2, [r3, #26]
 8005f9a:	e015      	b.n	8005fc8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005f9c:	7bfb      	ldrb	r3, [r7, #15]
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	211a      	movs	r1, #26
 8005fa2:	fb01 f303 	mul.w	r3, r1, r3
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8005fac:	781a      	ldrb	r2, [r3, #0]
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005fb2:	7bfb      	ldrb	r3, [r7, #15]
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	211a      	movs	r1, #26
 8005fb8:	fb01 f303 	mul.w	r3, r1, r3
 8005fbc:	4413      	add	r3, r2
 8005fbe:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005fc2:	881a      	ldrh	r2, [r3, #0]
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005fc8:	7bfb      	ldrb	r3, [r7, #15]
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	211a      	movs	r1, #26
 8005fce:	fb01 f303 	mul.w	r3, r1, r3
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	b25b      	sxtb	r3, r3
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	da16      	bge.n	800600e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005fe0:	7bfb      	ldrb	r3, [r7, #15]
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	211a      	movs	r1, #26
 8005fe6:	fb01 f303 	mul.w	r3, r1, r3
 8005fea:	4413      	add	r3, r2
 8005fec:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8005ff0:	781a      	ldrb	r2, [r3, #0]
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005ff6:	7bfb      	ldrb	r3, [r7, #15]
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	211a      	movs	r1, #26
 8005ffc:	fb01 f303 	mul.w	r3, r1, r3
 8006000:	4413      	add	r3, r2
 8006002:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006006:	881a      	ldrh	r2, [r3, #0]
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	835a      	strh	r2, [r3, #26]
 800600c:	e015      	b.n	800603a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800600e:	7bfb      	ldrb	r3, [r7, #15]
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	211a      	movs	r1, #26
 8006014:	fb01 f303 	mul.w	r3, r1, r3
 8006018:	4413      	add	r3, r2
 800601a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800601e:	781a      	ldrb	r2, [r3, #0]
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006024:	7bfb      	ldrb	r3, [r7, #15]
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	211a      	movs	r1, #26
 800602a:	fb01 f303 	mul.w	r3, r1, r3
 800602e:	4413      	add	r3, r2
 8006030:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006034:	881a      	ldrh	r2, [r3, #0]
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	7b9b      	ldrb	r3, [r3, #14]
 800603e:	4619      	mov	r1, r3
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f001 ff16 	bl	8007e72 <USBH_AllocPipe>
 8006046:	4603      	mov	r3, r0
 8006048:	461a      	mov	r2, r3
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	7bdb      	ldrb	r3, [r3, #15]
 8006052:	4619      	mov	r1, r3
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f001 ff0c 	bl	8007e72 <USBH_AllocPipe>
 800605a:	4603      	mov	r3, r0
 800605c:	461a      	mov	r2, r3
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	7b59      	ldrb	r1, [r3, #13]
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	7b98      	ldrb	r0, [r3, #14]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006076:	68ba      	ldr	r2, [r7, #8]
 8006078:	8b12      	ldrh	r2, [r2, #24]
 800607a:	9202      	str	r2, [sp, #8]
 800607c:	2202      	movs	r2, #2
 800607e:	9201      	str	r2, [sp, #4]
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	4623      	mov	r3, r4
 8006084:	4602      	mov	r2, r0
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f001 fec4 	bl	8007e14 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	7b19      	ldrb	r1, [r3, #12]
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	7bd8      	ldrb	r0, [r3, #15]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	8b52      	ldrh	r2, [r2, #26]
 80060a4:	9202      	str	r2, [sp, #8]
 80060a6:	2202      	movs	r2, #2
 80060a8:	9201      	str	r2, [sp, #4]
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	4623      	mov	r3, r4
 80060ae:	4602      	mov	r2, r0
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f001 feaf 	bl	8007e14 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	7b5b      	ldrb	r3, [r3, #13]
 80060c2:	2200      	movs	r2, #0
 80060c4:	4619      	mov	r1, r3
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f002 f9ba 	bl	8008440 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	7b1b      	ldrb	r3, [r3, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	4619      	mov	r1, r3
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f002 f9b3 	bl	8008440 <USBH_LL_SetToggle>

  return USBH_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3714      	adds	r7, #20
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd90      	pop	{r4, r7, pc}

080060e4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80060f2:	69db      	ldr	r3, [r3, #28]
 80060f4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00e      	beq.n	800611c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	4619      	mov	r1, r3
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f001 fea4 	bl	8007e52 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	4619      	mov	r1, r3
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f001 fecf 	bl	8007eb4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	7b1b      	ldrb	r3, [r3, #12]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00e      	beq.n	8006142 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	7b1b      	ldrb	r3, [r3, #12]
 8006128:	4619      	mov	r1, r3
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f001 fe91 	bl	8007e52 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	7b1b      	ldrb	r3, [r3, #12]
 8006134:	4619      	mov	r1, r3
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f001 febc 	bl	8007eb4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	7b5b      	ldrb	r3, [r3, #13]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00e      	beq.n	8006168 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	7b5b      	ldrb	r3, [r3, #13]
 800614e:	4619      	mov	r1, r3
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f001 fe7e 	bl	8007e52 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	7b5b      	ldrb	r3, [r3, #13]
 800615a:	4619      	mov	r1, r3
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f001 fea9 	bl	8007eb4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800616e:	69db      	ldr	r3, [r3, #28]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00b      	beq.n	800618c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800617a:	69db      	ldr	r3, [r3, #28]
 800617c:	4618      	mov	r0, r3
 800617e:	f002 f9ed 	bl	800855c <free>
    phost->pActiveClass->pData = 0U;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006188:	2200      	movs	r2, #0
 800618a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006196:	b580      	push	{r7, lr}
 8006198:	b084      	sub	sp, #16
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80061a4:	69db      	ldr	r3, [r3, #28]
 80061a6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	3340      	adds	r3, #64	@ 0x40
 80061ac:	4619      	mov	r1, r3
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f8b1 	bl	8006316 <GetLineCoding>
 80061b4:	4603      	mov	r3, r0
 80061b6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80061b8:	7afb      	ldrb	r3, [r7, #11]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d105      	bne.n	80061ca <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80061c4:	2102      	movs	r1, #2
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80061ca:	7afb      	ldrb	r3, [r7, #11]
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80061dc:	2301      	movs	r3, #1
 80061de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80061e0:	2300      	movs	r3, #0
 80061e2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80061ea:	69db      	ldr	r3, [r3, #28]
 80061ec:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80061f4:	2b04      	cmp	r3, #4
 80061f6:	d877      	bhi.n	80062e8 <USBH_CDC_Process+0x114>
 80061f8:	a201      	add	r2, pc, #4	@ (adr r2, 8006200 <USBH_CDC_Process+0x2c>)
 80061fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061fe:	bf00      	nop
 8006200:	08006215 	.word	0x08006215
 8006204:	0800621b 	.word	0x0800621b
 8006208:	0800624b 	.word	0x0800624b
 800620c:	080062bf 	.word	0x080062bf
 8006210:	080062cd 	.word	0x080062cd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006214:	2300      	movs	r3, #0
 8006216:	73fb      	strb	r3, [r7, #15]
      break;
 8006218:	e06d      	b.n	80062f6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800621e:	4619      	mov	r1, r3
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 f897 	bl	8006354 <SetLineCoding>
 8006226:	4603      	mov	r3, r0
 8006228:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800622a:	7bbb      	ldrb	r3, [r7, #14]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d104      	bne.n	800623a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	2202      	movs	r2, #2
 8006234:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006238:	e058      	b.n	80062ec <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800623a:	7bbb      	ldrb	r3, [r7, #14]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d055      	beq.n	80062ec <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	2204      	movs	r2, #4
 8006244:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006248:	e050      	b.n	80062ec <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	3340      	adds	r3, #64	@ 0x40
 800624e:	4619      	mov	r1, r3
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 f860 	bl	8006316 <GetLineCoding>
 8006256:	4603      	mov	r3, r0
 8006258:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800625a:	7bbb      	ldrb	r3, [r7, #14]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d126      	bne.n	80062ae <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006272:	791b      	ldrb	r3, [r3, #4]
 8006274:	429a      	cmp	r2, r3
 8006276:	d13b      	bne.n	80062f0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006282:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006284:	429a      	cmp	r2, r3
 8006286:	d133      	bne.n	80062f0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006292:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006294:	429a      	cmp	r2, r3
 8006296:	d12b      	bne.n	80062f0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062a0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d124      	bne.n	80062f0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 f958 	bl	800655c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80062ac:	e020      	b.n	80062f0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80062ae:	7bbb      	ldrb	r3, [r7, #14]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d01d      	beq.n	80062f0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	2204      	movs	r2, #4
 80062b8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80062bc:	e018      	b.n	80062f0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 f867 	bl	8006392 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 f8da 	bl	800647e <CDC_ProcessReception>
      break;
 80062ca:	e014      	b.n	80062f6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80062cc:	2100      	movs	r1, #0
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f001 f81a 	bl	8007308 <USBH_ClrFeature>
 80062d4:	4603      	mov	r3, r0
 80062d6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80062d8:	7bbb      	ldrb	r3, [r7, #14]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10a      	bne.n	80062f4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80062e6:	e005      	b.n	80062f4 <USBH_CDC_Process+0x120>

    default:
      break;
 80062e8:	bf00      	nop
 80062ea:	e004      	b.n	80062f6 <USBH_CDC_Process+0x122>
      break;
 80062ec:	bf00      	nop
 80062ee:	e002      	b.n	80062f6 <USBH_CDC_Process+0x122>
      break;
 80062f0:	bf00      	nop
 80062f2:	e000      	b.n	80062f6 <USBH_CDC_Process+0x122>
      break;
 80062f4:	bf00      	nop

  }

  return status;
 80062f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3710      	adds	r7, #16
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	370c      	adds	r7, #12
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr

08006316 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b082      	sub	sp, #8
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
 800631e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	22a1      	movs	r2, #161	@ 0xa1
 8006324:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2221      	movs	r2, #33	@ 0x21
 800632a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2207      	movs	r2, #7
 800633c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	2207      	movs	r2, #7
 8006342:	4619      	mov	r1, r3
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f001 fb14 	bl	8007972 <USBH_CtlReq>
 800634a:	4603      	mov	r3, r0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3708      	adds	r7, #8
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2221      	movs	r2, #33	@ 0x21
 8006362:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2220      	movs	r2, #32
 8006368:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2207      	movs	r2, #7
 800637a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	2207      	movs	r2, #7
 8006380:	4619      	mov	r1, r3
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f001 faf5 	bl	8007972 <USBH_CtlReq>
 8006388:	4603      	mov	r3, r0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3708      	adds	r7, #8
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b086      	sub	sp, #24
 8006396:	af02      	add	r7, sp, #8
 8006398:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80063a0:	69db      	ldr	r3, [r3, #28]
 80063a2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80063a4:	2300      	movs	r3, #0
 80063a6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d002      	beq.n	80063b8 <CDC_ProcessTransmission+0x26>
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d023      	beq.n	80063fe <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80063b6:	e05e      	b.n	8006476 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	8b12      	ldrh	r2, [r2, #24]
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d90b      	bls.n	80063dc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	69d9      	ldr	r1, [r3, #28]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	8b1a      	ldrh	r2, [r3, #24]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	7b5b      	ldrb	r3, [r3, #13]
 80063d0:	2001      	movs	r0, #1
 80063d2:	9000      	str	r0, [sp, #0]
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f001 fcda 	bl	8007d8e <USBH_BulkSendData>
 80063da:	e00b      	b.n	80063f4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	7b5b      	ldrb	r3, [r3, #13]
 80063ea:	2001      	movs	r0, #1
 80063ec:	9000      	str	r0, [sp, #0]
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f001 fccd 	bl	8007d8e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2202      	movs	r2, #2
 80063f8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80063fc:	e03b      	b.n	8006476 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	7b5b      	ldrb	r3, [r3, #13]
 8006402:	4619      	mov	r1, r3
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f001 fff1 	bl	80083ec <USBH_LL_GetURBState>
 800640a:	4603      	mov	r3, r0
 800640c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800640e:	7afb      	ldrb	r3, [r7, #11]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d128      	bne.n	8006466 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	8b12      	ldrh	r2, [r2, #24]
 800641c:	4293      	cmp	r3, r2
 800641e:	d90e      	bls.n	800643e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	8b12      	ldrh	r2, [r2, #24]
 8006428:	1a9a      	subs	r2, r3, r2
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	8b12      	ldrh	r2, [r2, #24]
 8006436:	441a      	add	r2, r3
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	61da      	str	r2, [r3, #28]
 800643c:	e002      	b.n	8006444 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006448:	2b00      	cmp	r3, #0
 800644a:	d004      	beq.n	8006456 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006454:	e00e      	b.n	8006474 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f868 	bl	8006534 <USBH_CDC_TransmitCallback>
      break;
 8006464:	e006      	b.n	8006474 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006466:	7afb      	ldrb	r3, [r7, #11]
 8006468:	2b02      	cmp	r3, #2
 800646a:	d103      	bne.n	8006474 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006474:	bf00      	nop
  }
}
 8006476:	bf00      	nop
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b086      	sub	sp, #24
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800648c:	69db      	ldr	r3, [r3, #28]
 800648e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006490:	2300      	movs	r3, #0
 8006492:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800649a:	2b03      	cmp	r3, #3
 800649c:	d002      	beq.n	80064a4 <CDC_ProcessReception+0x26>
 800649e:	2b04      	cmp	r3, #4
 80064a0:	d00e      	beq.n	80064c0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80064a2:	e043      	b.n	800652c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	6a19      	ldr	r1, [r3, #32]
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	8b5a      	ldrh	r2, [r3, #26]
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	7b1b      	ldrb	r3, [r3, #12]
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f001 fc91 	bl	8007dd8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	2204      	movs	r2, #4
 80064ba:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80064be:	e035      	b.n	800652c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	7b1b      	ldrb	r3, [r3, #12]
 80064c4:	4619      	mov	r1, r3
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f001 ff90 	bl	80083ec <USBH_LL_GetURBState>
 80064cc:	4603      	mov	r3, r0
 80064ce:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80064d0:	7cfb      	ldrb	r3, [r7, #19]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d129      	bne.n	800652a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	7b1b      	ldrb	r3, [r3, #12]
 80064da:	4619      	mov	r1, r3
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f001 fef3 	bl	80082c8 <USBH_LL_GetLastXferSize>
 80064e2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d016      	beq.n	800651c <CDC_ProcessReception+0x9e>
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	8b5b      	ldrh	r3, [r3, #26]
 80064f2:	461a      	mov	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d110      	bne.n	800651c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	1ad2      	subs	r2, r2, r3
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	6a1a      	ldr	r2, [r3, #32]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	441a      	add	r2, r3
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	2203      	movs	r2, #3
 8006516:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800651a:	e006      	b.n	800652a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 f80f 	bl	8006548 <USBH_CDC_ReceiveCallback>
      break;
 800652a:	bf00      	nop
  }
}
 800652c:	bf00      	nop
 800652e:	3718      	adds	r7, #24
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006550:	bf00      	nop
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006564:	bf00      	nop
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	4613      	mov	r3, r2
 800657c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d101      	bne.n	8006588 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006584:	2302      	movs	r3, #2
 8006586:	e029      	b.n	80065dc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	79fa      	ldrb	r2, [r7, #7]
 800658c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f000 f81f 	bl	80065e4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d003      	beq.n	80065d4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	f001 fdc3 	bl	8008160 <USBH_LL_Init>

  return USBH_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3710      	adds	r7, #16
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80065ec:	2300      	movs	r3, #0
 80065ee:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80065f0:	2300      	movs	r3, #0
 80065f2:	60fb      	str	r3, [r7, #12]
 80065f4:	e009      	b.n	800660a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	33e0      	adds	r3, #224	@ 0xe0
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	4413      	add	r3, r2
 8006600:	2200      	movs	r2, #0
 8006602:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	3301      	adds	r3, #1
 8006608:	60fb      	str	r3, [r7, #12]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2b0f      	cmp	r3, #15
 800660e:	d9f2      	bls.n	80065f6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006610:	2300      	movs	r3, #0
 8006612:	60fb      	str	r3, [r7, #12]
 8006614:	e009      	b.n	800662a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	4413      	add	r3, r2
 800661c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006620:	2200      	movs	r2, #0
 8006622:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	3301      	adds	r3, #1
 8006628:	60fb      	str	r3, [r7, #12]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006630:	d3f1      	bcc.n	8006616 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2240      	movs	r2, #64	@ 0x40
 8006656:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	331c      	adds	r3, #28
 8006682:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006686:	2100      	movs	r1, #0
 8006688:	4618      	mov	r0, r3
 800668a:	f002 f81d 	bl	80086c8 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006694:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006698:	2100      	movs	r1, #0
 800669a:	4618      	mov	r0, r3
 800669c:	f002 f814 	bl	80086c8 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80066a6:	2212      	movs	r2, #18
 80066a8:	2100      	movs	r1, #0
 80066aa:	4618      	mov	r0, r3
 80066ac:	f002 f80c 	bl	80086c8 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80066b6:	223e      	movs	r2, #62	@ 0x3e
 80066b8:	2100      	movs	r1, #0
 80066ba:	4618      	mov	r0, r3
 80066bc:	f002 f804 	bl	80086c8 <memset>

  return USBH_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80066ca:	b480      	push	{r7}
 80066cc:	b085      	sub	sp, #20
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
 80066d2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80066d4:	2300      	movs	r3, #0
 80066d6:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d016      	beq.n	800670c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d10e      	bne.n	8006706 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80066ee:	1c59      	adds	r1, r3, #1
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	33de      	adds	r3, #222	@ 0xde
 80066fa:	6839      	ldr	r1, [r7, #0]
 80066fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006700:	2300      	movs	r3, #0
 8006702:	73fb      	strb	r3, [r7, #15]
 8006704:	e004      	b.n	8006710 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006706:	2302      	movs	r3, #2
 8006708:	73fb      	strb	r3, [r7, #15]
 800670a:	e001      	b.n	8006710 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800670c:	2302      	movs	r3, #2
 800670e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006710:	7bfb      	ldrb	r3, [r7, #15]
}
 8006712:	4618      	mov	r0, r3
 8006714:	3714      	adds	r7, #20
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr

0800671e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800671e:	b480      	push	{r7}
 8006720:	b085      	sub	sp, #20
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
 8006726:	460b      	mov	r3, r1
 8006728:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800672a:	2300      	movs	r3, #0
 800672c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8006734:	78fa      	ldrb	r2, [r7, #3]
 8006736:	429a      	cmp	r2, r3
 8006738:	d204      	bcs.n	8006744 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	78fa      	ldrb	r2, [r7, #3]
 800673e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8006742:	e001      	b.n	8006748 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006744:	2302      	movs	r3, #2
 8006746:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006748:	7bfb      	ldrb	r3, [r7, #15]
}
 800674a:	4618      	mov	r0, r3
 800674c:	3714      	adds	r7, #20
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr

08006756 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006756:	b480      	push	{r7}
 8006758:	b087      	sub	sp, #28
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
 800675e:	4608      	mov	r0, r1
 8006760:	4611      	mov	r1, r2
 8006762:	461a      	mov	r2, r3
 8006764:	4603      	mov	r3, r0
 8006766:	70fb      	strb	r3, [r7, #3]
 8006768:	460b      	mov	r3, r1
 800676a:	70bb      	strb	r3, [r7, #2]
 800676c:	4613      	mov	r3, r2
 800676e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006770:	2300      	movs	r3, #0
 8006772:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006774:	2300      	movs	r3, #0
 8006776:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800677e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006780:	e025      	b.n	80067ce <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006782:	7dfb      	ldrb	r3, [r7, #23]
 8006784:	221a      	movs	r2, #26
 8006786:	fb02 f303 	mul.w	r3, r2, r3
 800678a:	3308      	adds	r3, #8
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	4413      	add	r3, r2
 8006790:	3302      	adds	r3, #2
 8006792:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	795b      	ldrb	r3, [r3, #5]
 8006798:	78fa      	ldrb	r2, [r7, #3]
 800679a:	429a      	cmp	r2, r3
 800679c:	d002      	beq.n	80067a4 <USBH_FindInterface+0x4e>
 800679e:	78fb      	ldrb	r3, [r7, #3]
 80067a0:	2bff      	cmp	r3, #255	@ 0xff
 80067a2:	d111      	bne.n	80067c8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80067a8:	78ba      	ldrb	r2, [r7, #2]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d002      	beq.n	80067b4 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80067ae:	78bb      	ldrb	r3, [r7, #2]
 80067b0:	2bff      	cmp	r3, #255	@ 0xff
 80067b2:	d109      	bne.n	80067c8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80067b8:	787a      	ldrb	r2, [r7, #1]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d002      	beq.n	80067c4 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80067be:	787b      	ldrb	r3, [r7, #1]
 80067c0:	2bff      	cmp	r3, #255	@ 0xff
 80067c2:	d101      	bne.n	80067c8 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80067c4:	7dfb      	ldrb	r3, [r7, #23]
 80067c6:	e006      	b.n	80067d6 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80067c8:	7dfb      	ldrb	r3, [r7, #23]
 80067ca:	3301      	adds	r3, #1
 80067cc:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80067ce:	7dfb      	ldrb	r3, [r7, #23]
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d9d6      	bls.n	8006782 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80067d4:	23ff      	movs	r3, #255	@ 0xff
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	371c      	adds	r7, #28
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b082      	sub	sp, #8
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f001 fcf4 	bl	80081d8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80067f0:	2101      	movs	r1, #1
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f001 fe0d 	bl	8008412 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3708      	adds	r7, #8
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
	...

08006804 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b088      	sub	sp, #32
 8006808:	af04      	add	r7, sp, #16
 800680a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800680c:	2302      	movs	r3, #2
 800680e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006810:	2300      	movs	r3, #0
 8006812:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800681a:	b2db      	uxtb	r3, r3
 800681c:	2b01      	cmp	r3, #1
 800681e:	d102      	bne.n	8006826 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2203      	movs	r2, #3
 8006824:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2b0b      	cmp	r3, #11
 800682e:	f200 81bb 	bhi.w	8006ba8 <USBH_Process+0x3a4>
 8006832:	a201      	add	r2, pc, #4	@ (adr r2, 8006838 <USBH_Process+0x34>)
 8006834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006838:	08006869 	.word	0x08006869
 800683c:	0800689b 	.word	0x0800689b
 8006840:	08006903 	.word	0x08006903
 8006844:	08006b43 	.word	0x08006b43
 8006848:	08006ba9 	.word	0x08006ba9
 800684c:	080069a3 	.word	0x080069a3
 8006850:	08006ae9 	.word	0x08006ae9
 8006854:	080069d9 	.word	0x080069d9
 8006858:	080069f9 	.word	0x080069f9
 800685c:	08006a17 	.word	0x08006a17
 8006860:	08006a5b 	.word	0x08006a5b
 8006864:	08006b2b 	.word	0x08006b2b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800686e:	b2db      	uxtb	r3, r3
 8006870:	2b00      	cmp	r3, #0
 8006872:	f000 819b 	beq.w	8006bac <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2201      	movs	r2, #1
 800687a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800687c:	20c8      	movs	r0, #200	@ 0xc8
 800687e:	f001 fe12 	bl	80084a6 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f001 fd05 	bl	8008292 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006898:	e188      	b.n	8006bac <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d107      	bne.n	80068b4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2202      	movs	r2, #2
 80068b0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80068b2:	e18a      	b.n	8006bca <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80068ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80068be:	d914      	bls.n	80068ea <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80068c6:	3301      	adds	r3, #1
 80068c8:	b2da      	uxtb	r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80068d6:	2b03      	cmp	r3, #3
 80068d8:	d903      	bls.n	80068e2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	220d      	movs	r2, #13
 80068de:	701a      	strb	r2, [r3, #0]
      break;
 80068e0:	e173      	b.n	8006bca <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	701a      	strb	r2, [r3, #0]
      break;
 80068e8:	e16f      	b.n	8006bca <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80068f0:	f103 020a 	add.w	r2, r3, #10
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80068fa:	200a      	movs	r0, #10
 80068fc:	f001 fdd3 	bl	80084a6 <USBH_Delay>
      break;
 8006900:	e163      	b.n	8006bca <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006908:	2b00      	cmp	r3, #0
 800690a:	d005      	beq.n	8006918 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006912:	2104      	movs	r1, #4
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006918:	2064      	movs	r0, #100	@ 0x64
 800691a:	f001 fdc4 	bl	80084a6 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f001 fc90 	bl	8008244 <USBH_LL_GetSpeed>
 8006924:	4603      	mov	r3, r0
 8006926:	461a      	mov	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2205      	movs	r2, #5
 8006932:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006934:	2100      	movs	r1, #0
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f001 fa9b 	bl	8007e72 <USBH_AllocPipe>
 800693c:	4603      	mov	r3, r0
 800693e:	461a      	mov	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006944:	2180      	movs	r1, #128	@ 0x80
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f001 fa93 	bl	8007e72 <USBH_AllocPipe>
 800694c:	4603      	mov	r3, r0
 800694e:	461a      	mov	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	7919      	ldrb	r1, [r3, #4]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006968:	9202      	str	r2, [sp, #8]
 800696a:	2200      	movs	r2, #0
 800696c:	9201      	str	r2, [sp, #4]
 800696e:	9300      	str	r3, [sp, #0]
 8006970:	4603      	mov	r3, r0
 8006972:	2280      	movs	r2, #128	@ 0x80
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f001 fa4d 	bl	8007e14 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	7959      	ldrb	r1, [r3, #5]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800698e:	9202      	str	r2, [sp, #8]
 8006990:	2200      	movs	r2, #0
 8006992:	9201      	str	r2, [sp, #4]
 8006994:	9300      	str	r3, [sp, #0]
 8006996:	4603      	mov	r3, r0
 8006998:	2200      	movs	r2, #0
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f001 fa3a 	bl	8007e14 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80069a0:	e113      	b.n	8006bca <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 f916 	bl	8006bd4 <USBH_HandleEnum>
 80069a8:	4603      	mov	r3, r0
 80069aa:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80069ac:	7bbb      	ldrb	r3, [r7, #14]
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f040 80fd 	bne.w	8006bb0 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d103      	bne.n	80069d0 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2208      	movs	r2, #8
 80069cc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80069ce:	e0ef      	b.n	8006bb0 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2207      	movs	r2, #7
 80069d4:	701a      	strb	r2, [r3, #0]
      break;
 80069d6:	e0eb      	b.n	8006bb0 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80069de:	2b00      	cmp	r3, #0
 80069e0:	f000 80e8 	beq.w	8006bb4 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80069ea:	2101      	movs	r1, #1
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2208      	movs	r2, #8
 80069f4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80069f6:	e0dd      	b.n	8006bb4 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80069fe:	4619      	mov	r1, r3
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 fc3a 	bl	800727a <USBH_SetCfg>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f040 80d5 	bne.w	8006bb8 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2209      	movs	r2, #9
 8006a12:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006a14:	e0d0      	b.n	8006bb8 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8006a1c:	f003 0320 	and.w	r3, r3, #32
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d016      	beq.n	8006a52 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006a24:	2101      	movs	r1, #1
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 fc4a 	bl	80072c0 <USBH_SetFeature>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006a30:	7bbb      	ldrb	r3, [r7, #14]
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d103      	bne.n	8006a40 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	220a      	movs	r2, #10
 8006a3c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006a3e:	e0bd      	b.n	8006bbc <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8006a40:	7bbb      	ldrb	r3, [r7, #14]
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	2b03      	cmp	r3, #3
 8006a46:	f040 80b9 	bne.w	8006bbc <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	220a      	movs	r2, #10
 8006a4e:	701a      	strb	r2, [r3, #0]
      break;
 8006a50:	e0b4      	b.n	8006bbc <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	220a      	movs	r2, #10
 8006a56:	701a      	strb	r2, [r3, #0]
      break;
 8006a58:	e0b0      	b.n	8006bbc <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 80ad 	beq.w	8006bc0 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006a6e:	2300      	movs	r3, #0
 8006a70:	73fb      	strb	r3, [r7, #15]
 8006a72:	e016      	b.n	8006aa2 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006a74:	7bfa      	ldrb	r2, [r7, #15]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	32de      	adds	r2, #222	@ 0xde
 8006a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a7e:	791a      	ldrb	r2, [r3, #4]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d108      	bne.n	8006a9c <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006a8a:	7bfa      	ldrb	r2, [r7, #15]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	32de      	adds	r2, #222	@ 0xde
 8006a90:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8006a9a:	e005      	b.n	8006aa8 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006a9c:	7bfb      	ldrb	r3, [r7, #15]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	73fb      	strb	r3, [r7, #15]
 8006aa2:	7bfb      	ldrb	r3, [r7, #15]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d0e5      	beq.n	8006a74 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d016      	beq.n	8006ae0 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	4798      	blx	r3
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d109      	bne.n	8006ad8 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2206      	movs	r2, #6
 8006ac8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006ad0:	2103      	movs	r1, #3
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006ad6:	e073      	b.n	8006bc0 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	220d      	movs	r2, #13
 8006adc:	701a      	strb	r2, [r3, #0]
      break;
 8006ade:	e06f      	b.n	8006bc0 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	220d      	movs	r2, #13
 8006ae4:	701a      	strb	r2, [r3, #0]
      break;
 8006ae6:	e06b      	b.n	8006bc0 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d017      	beq.n	8006b22 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	4798      	blx	r3
 8006afe:	4603      	mov	r3, r0
 8006b00:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006b02:	7bbb      	ldrb	r3, [r7, #14]
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d103      	bne.n	8006b12 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	220b      	movs	r2, #11
 8006b0e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006b10:	e058      	b.n	8006bc4 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8006b12:	7bbb      	ldrb	r3, [r7, #14]
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d154      	bne.n	8006bc4 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	220d      	movs	r2, #13
 8006b1e:	701a      	strb	r2, [r3, #0]
      break;
 8006b20:	e050      	b.n	8006bc4 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	220d      	movs	r2, #13
 8006b26:	701a      	strb	r2, [r3, #0]
      break;
 8006b28:	e04c      	b.n	8006bc4 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d049      	beq.n	8006bc8 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006b3a:	695b      	ldr	r3, [r3, #20]
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	4798      	blx	r3
      }
      break;
 8006b40:	e042      	b.n	8006bc8 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f7ff fd4a 	bl	80065e4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d009      	beq.n	8006b6e <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d005      	beq.n	8006b84 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006b7e:	2105      	movs	r1, #5
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d107      	bne.n	8006ba0 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f7ff fe22 	bl	80067e2 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006b9e:	e014      	b.n	8006bca <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f001 fb19 	bl	80081d8 <USBH_LL_Start>
      break;
 8006ba6:	e010      	b.n	8006bca <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006ba8:	bf00      	nop
 8006baa:	e00e      	b.n	8006bca <USBH_Process+0x3c6>
      break;
 8006bac:	bf00      	nop
 8006bae:	e00c      	b.n	8006bca <USBH_Process+0x3c6>
      break;
 8006bb0:	bf00      	nop
 8006bb2:	e00a      	b.n	8006bca <USBH_Process+0x3c6>
    break;
 8006bb4:	bf00      	nop
 8006bb6:	e008      	b.n	8006bca <USBH_Process+0x3c6>
      break;
 8006bb8:	bf00      	nop
 8006bba:	e006      	b.n	8006bca <USBH_Process+0x3c6>
      break;
 8006bbc:	bf00      	nop
 8006bbe:	e004      	b.n	8006bca <USBH_Process+0x3c6>
      break;
 8006bc0:	bf00      	nop
 8006bc2:	e002      	b.n	8006bca <USBH_Process+0x3c6>
      break;
 8006bc4:	bf00      	nop
 8006bc6:	e000      	b.n	8006bca <USBH_Process+0x3c6>
      break;
 8006bc8:	bf00      	nop
  }
  return USBH_OK;
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3710      	adds	r7, #16
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b088      	sub	sp, #32
 8006bd8:	af04      	add	r7, sp, #16
 8006bda:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006be0:	2301      	movs	r3, #1
 8006be2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	785b      	ldrb	r3, [r3, #1]
 8006be8:	2b07      	cmp	r3, #7
 8006bea:	f200 81bd 	bhi.w	8006f68 <USBH_HandleEnum+0x394>
 8006bee:	a201      	add	r2, pc, #4	@ (adr r2, 8006bf4 <USBH_HandleEnum+0x20>)
 8006bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf4:	08006c15 	.word	0x08006c15
 8006bf8:	08006ccf 	.word	0x08006ccf
 8006bfc:	08006d39 	.word	0x08006d39
 8006c00:	08006dc3 	.word	0x08006dc3
 8006c04:	08006e2d 	.word	0x08006e2d
 8006c08:	08006e9d 	.word	0x08006e9d
 8006c0c:	08006ee3 	.word	0x08006ee3
 8006c10:	08006f29 	.word	0x08006f29
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006c14:	2108      	movs	r1, #8
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 fa4c 	bl	80070b4 <USBH_Get_DevDesc>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006c20:	7bbb      	ldrb	r3, [r7, #14]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d12e      	bne.n	8006c84 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	7919      	ldrb	r1, [r3, #4]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006c4a:	9202      	str	r2, [sp, #8]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	9201      	str	r2, [sp, #4]
 8006c50:	9300      	str	r3, [sp, #0]
 8006c52:	4603      	mov	r3, r0
 8006c54:	2280      	movs	r2, #128	@ 0x80
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f001 f8dc 	bl	8007e14 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	7959      	ldrb	r1, [r3, #5]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006c70:	9202      	str	r2, [sp, #8]
 8006c72:	2200      	movs	r2, #0
 8006c74:	9201      	str	r2, [sp, #4]
 8006c76:	9300      	str	r3, [sp, #0]
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f001 f8c9 	bl	8007e14 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006c82:	e173      	b.n	8006f6c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c84:	7bbb      	ldrb	r3, [r7, #14]
 8006c86:	2b03      	cmp	r3, #3
 8006c88:	f040 8170 	bne.w	8006f6c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006c92:	3301      	adds	r3, #1
 8006c94:	b2da      	uxtb	r2, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006ca2:	2b03      	cmp	r3, #3
 8006ca4:	d903      	bls.n	8006cae <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	220d      	movs	r2, #13
 8006caa:	701a      	strb	r2, [r3, #0]
      break;
 8006cac:	e15e      	b.n	8006f6c <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	795b      	ldrb	r3, [r3, #5]
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f001 f8fd 	bl	8007eb4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	791b      	ldrb	r3, [r3, #4]
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f001 f8f7 	bl	8007eb4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	701a      	strb	r2, [r3, #0]
      break;
 8006ccc:	e14e      	b.n	8006f6c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006cce:	2112      	movs	r1, #18
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 f9ef 	bl	80070b4 <USBH_Get_DevDesc>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006cda:	7bbb      	ldrb	r3, [r7, #14]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d103      	bne.n	8006ce8 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006ce6:	e143      	b.n	8006f70 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ce8:	7bbb      	ldrb	r3, [r7, #14]
 8006cea:	2b03      	cmp	r3, #3
 8006cec:	f040 8140 	bne.w	8006f70 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	b2da      	uxtb	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006d06:	2b03      	cmp	r3, #3
 8006d08:	d903      	bls.n	8006d12 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	220d      	movs	r2, #13
 8006d0e:	701a      	strb	r2, [r3, #0]
      break;
 8006d10:	e12e      	b.n	8006f70 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	795b      	ldrb	r3, [r3, #5]
 8006d16:	4619      	mov	r1, r3
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f001 f8cb 	bl	8007eb4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	791b      	ldrb	r3, [r3, #4]
 8006d22:	4619      	mov	r1, r3
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f001 f8c5 	bl	8007eb4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	701a      	strb	r2, [r3, #0]
      break;
 8006d36:	e11b      	b.n	8006f70 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006d38:	2101      	movs	r1, #1
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 fa79 	bl	8007232 <USBH_SetAddress>
 8006d40:	4603      	mov	r3, r0
 8006d42:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d44:	7bbb      	ldrb	r3, [r7, #14]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d130      	bne.n	8006dac <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8006d4a:	2002      	movs	r0, #2
 8006d4c:	f001 fbab 	bl	80084a6 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2203      	movs	r2, #3
 8006d5c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	7919      	ldrb	r1, [r3, #4]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006d72:	9202      	str	r2, [sp, #8]
 8006d74:	2200      	movs	r2, #0
 8006d76:	9201      	str	r2, [sp, #4]
 8006d78:	9300      	str	r3, [sp, #0]
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2280      	movs	r2, #128	@ 0x80
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f001 f848 	bl	8007e14 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	7959      	ldrb	r1, [r3, #5]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d98:	9202      	str	r2, [sp, #8]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	9201      	str	r2, [sp, #4]
 8006d9e:	9300      	str	r3, [sp, #0]
 8006da0:	4603      	mov	r3, r0
 8006da2:	2200      	movs	r2, #0
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f001 f835 	bl	8007e14 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006daa:	e0e3      	b.n	8006f74 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006dac:	7bbb      	ldrb	r3, [r7, #14]
 8006dae:	2b03      	cmp	r3, #3
 8006db0:	f040 80e0 	bne.w	8006f74 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	220d      	movs	r2, #13
 8006db8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	705a      	strb	r2, [r3, #1]
      break;
 8006dc0:	e0d8      	b.n	8006f74 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006dc2:	2109      	movs	r1, #9
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 f9a1 	bl	800710c <USBH_Get_CfgDesc>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006dce:	7bbb      	ldrb	r3, [r7, #14]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d103      	bne.n	8006ddc <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2204      	movs	r2, #4
 8006dd8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006dda:	e0cd      	b.n	8006f78 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ddc:	7bbb      	ldrb	r3, [r7, #14]
 8006dde:	2b03      	cmp	r3, #3
 8006de0:	f040 80ca 	bne.w	8006f78 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006dea:	3301      	adds	r3, #1
 8006dec:	b2da      	uxtb	r2, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006dfa:	2b03      	cmp	r3, #3
 8006dfc:	d903      	bls.n	8006e06 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	220d      	movs	r2, #13
 8006e02:	701a      	strb	r2, [r3, #0]
      break;
 8006e04:	e0b8      	b.n	8006f78 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	795b      	ldrb	r3, [r3, #5]
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f001 f851 	bl	8007eb4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	791b      	ldrb	r3, [r3, #4]
 8006e16:	4619      	mov	r1, r3
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f001 f84b 	bl	8007eb4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	701a      	strb	r2, [r3, #0]
      break;
 8006e2a:	e0a5      	b.n	8006f78 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8006e32:	4619      	mov	r1, r3
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 f969 	bl	800710c <USBH_Get_CfgDesc>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006e3e:	7bbb      	ldrb	r3, [r7, #14]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d103      	bne.n	8006e4c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2205      	movs	r2, #5
 8006e48:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006e4a:	e097      	b.n	8006f7c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e4c:	7bbb      	ldrb	r3, [r7, #14]
 8006e4e:	2b03      	cmp	r3, #3
 8006e50:	f040 8094 	bne.w	8006f7c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	b2da      	uxtb	r2, r3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006e6a:	2b03      	cmp	r3, #3
 8006e6c:	d903      	bls.n	8006e76 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	220d      	movs	r2, #13
 8006e72:	701a      	strb	r2, [r3, #0]
      break;
 8006e74:	e082      	b.n	8006f7c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	795b      	ldrb	r3, [r3, #5]
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f001 f819 	bl	8007eb4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	791b      	ldrb	r3, [r3, #4]
 8006e86:	4619      	mov	r1, r3
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f001 f813 	bl	8007eb4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	701a      	strb	r2, [r3, #0]
      break;
 8006e9a:	e06f      	b.n	8006f7c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d019      	beq.n	8006eda <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006eb2:	23ff      	movs	r3, #255	@ 0xff
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 f953 	bl	8007160 <USBH_Get_StringDesc>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006ebe:	7bbb      	ldrb	r3, [r7, #14]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d103      	bne.n	8006ecc <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2206      	movs	r2, #6
 8006ec8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006eca:	e059      	b.n	8006f80 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ecc:	7bbb      	ldrb	r3, [r7, #14]
 8006ece:	2b03      	cmp	r3, #3
 8006ed0:	d156      	bne.n	8006f80 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2206      	movs	r2, #6
 8006ed6:	705a      	strb	r2, [r3, #1]
      break;
 8006ed8:	e052      	b.n	8006f80 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2206      	movs	r2, #6
 8006ede:	705a      	strb	r2, [r3, #1]
      break;
 8006ee0:	e04e      	b.n	8006f80 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d019      	beq.n	8006f20 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006ef8:	23ff      	movs	r3, #255	@ 0xff
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 f930 	bl	8007160 <USBH_Get_StringDesc>
 8006f00:	4603      	mov	r3, r0
 8006f02:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006f04:	7bbb      	ldrb	r3, [r7, #14]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d103      	bne.n	8006f12 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2207      	movs	r2, #7
 8006f0e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006f10:	e038      	b.n	8006f84 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f12:	7bbb      	ldrb	r3, [r7, #14]
 8006f14:	2b03      	cmp	r3, #3
 8006f16:	d135      	bne.n	8006f84 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2207      	movs	r2, #7
 8006f1c:	705a      	strb	r2, [r3, #1]
      break;
 8006f1e:	e031      	b.n	8006f84 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2207      	movs	r2, #7
 8006f24:	705a      	strb	r2, [r3, #1]
      break;
 8006f26:	e02d      	b.n	8006f84 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d017      	beq.n	8006f62 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006f3e:	23ff      	movs	r3, #255	@ 0xff
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 f90d 	bl	8007160 <USBH_Get_StringDesc>
 8006f46:	4603      	mov	r3, r0
 8006f48:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006f4a:	7bbb      	ldrb	r3, [r7, #14]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d102      	bne.n	8006f56 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006f50:	2300      	movs	r3, #0
 8006f52:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006f54:	e018      	b.n	8006f88 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f56:	7bbb      	ldrb	r3, [r7, #14]
 8006f58:	2b03      	cmp	r3, #3
 8006f5a:	d115      	bne.n	8006f88 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8006f60:	e012      	b.n	8006f88 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8006f62:	2300      	movs	r3, #0
 8006f64:	73fb      	strb	r3, [r7, #15]
      break;
 8006f66:	e00f      	b.n	8006f88 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8006f68:	bf00      	nop
 8006f6a:	e00e      	b.n	8006f8a <USBH_HandleEnum+0x3b6>
      break;
 8006f6c:	bf00      	nop
 8006f6e:	e00c      	b.n	8006f8a <USBH_HandleEnum+0x3b6>
      break;
 8006f70:	bf00      	nop
 8006f72:	e00a      	b.n	8006f8a <USBH_HandleEnum+0x3b6>
      break;
 8006f74:	bf00      	nop
 8006f76:	e008      	b.n	8006f8a <USBH_HandleEnum+0x3b6>
      break;
 8006f78:	bf00      	nop
 8006f7a:	e006      	b.n	8006f8a <USBH_HandleEnum+0x3b6>
      break;
 8006f7c:	bf00      	nop
 8006f7e:	e004      	b.n	8006f8a <USBH_HandleEnum+0x3b6>
      break;
 8006f80:	bf00      	nop
 8006f82:	e002      	b.n	8006f8a <USBH_HandleEnum+0x3b6>
      break;
 8006f84:	bf00      	nop
 8006f86:	e000      	b.n	8006f8a <USBH_HandleEnum+0x3b6>
      break;
 8006f88:	bf00      	nop
  }
  return Status;
 8006f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3710      	adds	r7, #16
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	683a      	ldr	r2, [r7, #0]
 8006fa2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8006fa6:	bf00      	nop
 8006fa8:	370c      	adds	r7, #12
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr

08006fb2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b082      	sub	sp, #8
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8006fc0:	1c5a      	adds	r2, r3, #1
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 f804 	bl	8006fd6 <USBH_HandleSof>
}
 8006fce:	bf00      	nop
 8006fd0:	3708      	adds	r7, #8
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b082      	sub	sp, #8
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	2b0b      	cmp	r3, #11
 8006fe6:	d10a      	bne.n	8006ffe <USBH_HandleSof+0x28>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d005      	beq.n	8006ffe <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ff8:	699b      	ldr	r3, [r3, #24]
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	4798      	blx	r3
  }
}
 8006ffe:	bf00      	nop
 8007000:	3708      	adds	r7, #8
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007006:	b480      	push	{r7}
 8007008:	b083      	sub	sp, #12
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2201      	movs	r2, #1
 8007012:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007016:	bf00      	nop
}
 8007018:	370c      	adds	r7, #12
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr

08007022 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007022:	b480      	push	{r7}
 8007024:	b083      	sub	sp, #12
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8007032:	bf00      	nop
}
 8007034:	370c      	adds	r7, #12
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr

0800703e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800703e:	b480      	push	{r7}
 8007040:	b083      	sub	sp, #12
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2201      	movs	r2, #1
 800704a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	4618      	mov	r0, r3
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f001 f8be 	bl	800820e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	791b      	ldrb	r3, [r3, #4]
 8007096:	4619      	mov	r1, r3
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 ff0b 	bl	8007eb4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	795b      	ldrb	r3, [r3, #5]
 80070a2:	4619      	mov	r1, r3
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 ff05 	bl	8007eb4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3708      	adds	r7, #8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b086      	sub	sp, #24
 80070b8:	af02      	add	r7, sp, #8
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	460b      	mov	r3, r1
 80070be:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80070c0:	887b      	ldrh	r3, [r7, #2]
 80070c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070c6:	d901      	bls.n	80070cc <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80070c8:	2303      	movs	r3, #3
 80070ca:	e01b      	b.n	8007104 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80070d2:	887b      	ldrh	r3, [r7, #2]
 80070d4:	9300      	str	r3, [sp, #0]
 80070d6:	4613      	mov	r3, r2
 80070d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80070dc:	2100      	movs	r1, #0
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f872 	bl	80071c8 <USBH_GetDescriptor>
 80070e4:	4603      	mov	r3, r0
 80070e6:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80070e8:	7bfb      	ldrb	r3, [r7, #15]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d109      	bne.n	8007102 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80070f4:	887a      	ldrh	r2, [r7, #2]
 80070f6:	4619      	mov	r1, r3
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 f929 	bl	8007350 <USBH_ParseDevDesc>
 80070fe:	4603      	mov	r3, r0
 8007100:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007102:	7bfb      	ldrb	r3, [r7, #15]
}
 8007104:	4618      	mov	r0, r3
 8007106:	3710      	adds	r7, #16
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b086      	sub	sp, #24
 8007110:	af02      	add	r7, sp, #8
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	460b      	mov	r3, r1
 8007116:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	331c      	adds	r3, #28
 800711c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800711e:	887b      	ldrh	r3, [r7, #2]
 8007120:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007124:	d901      	bls.n	800712a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007126:	2303      	movs	r3, #3
 8007128:	e016      	b.n	8007158 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800712a:	887b      	ldrh	r3, [r7, #2]
 800712c:	9300      	str	r3, [sp, #0]
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007134:	2100      	movs	r1, #0
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 f846 	bl	80071c8 <USBH_GetDescriptor>
 800713c:	4603      	mov	r3, r0
 800713e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007140:	7bfb      	ldrb	r3, [r7, #15]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d107      	bne.n	8007156 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007146:	887b      	ldrh	r3, [r7, #2]
 8007148:	461a      	mov	r2, r3
 800714a:	68b9      	ldr	r1, [r7, #8]
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 f9af 	bl	80074b0 <USBH_ParseCfgDesc>
 8007152:	4603      	mov	r3, r0
 8007154:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007156:	7bfb      	ldrb	r3, [r7, #15]
}
 8007158:	4618      	mov	r0, r3
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b088      	sub	sp, #32
 8007164:	af02      	add	r7, sp, #8
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	607a      	str	r2, [r7, #4]
 800716a:	461a      	mov	r2, r3
 800716c:	460b      	mov	r3, r1
 800716e:	72fb      	strb	r3, [r7, #11]
 8007170:	4613      	mov	r3, r2
 8007172:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007174:	893b      	ldrh	r3, [r7, #8]
 8007176:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800717a:	d802      	bhi.n	8007182 <USBH_Get_StringDesc+0x22>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d101      	bne.n	8007186 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007182:	2303      	movs	r3, #3
 8007184:	e01c      	b.n	80071c0 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007186:	7afb      	ldrb	r3, [r7, #11]
 8007188:	b29b      	uxth	r3, r3
 800718a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800718e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007196:	893b      	ldrh	r3, [r7, #8]
 8007198:	9300      	str	r3, [sp, #0]
 800719a:	460b      	mov	r3, r1
 800719c:	2100      	movs	r1, #0
 800719e:	68f8      	ldr	r0, [r7, #12]
 80071a0:	f000 f812 	bl	80071c8 <USBH_GetDescriptor>
 80071a4:	4603      	mov	r3, r0
 80071a6:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80071a8:	7dfb      	ldrb	r3, [r7, #23]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d107      	bne.n	80071be <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80071b4:	893a      	ldrh	r2, [r7, #8]
 80071b6:	6879      	ldr	r1, [r7, #4]
 80071b8:	4618      	mov	r0, r3
 80071ba:	f000 fb8d 	bl	80078d8 <USBH_ParseStringDesc>
  }

  return status;
 80071be:	7dfb      	ldrb	r3, [r7, #23]
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3718      	adds	r7, #24
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	607b      	str	r3, [r7, #4]
 80071d2:	460b      	mov	r3, r1
 80071d4:	72fb      	strb	r3, [r7, #11]
 80071d6:	4613      	mov	r3, r2
 80071d8:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	789b      	ldrb	r3, [r3, #2]
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d11c      	bne.n	800721c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80071e2:	7afb      	ldrb	r3, [r7, #11]
 80071e4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80071e8:	b2da      	uxtb	r2, r3
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2206      	movs	r2, #6
 80071f2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	893a      	ldrh	r2, [r7, #8]
 80071f8:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80071fa:	893b      	ldrh	r3, [r7, #8]
 80071fc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007200:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007204:	d104      	bne.n	8007210 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f240 4209 	movw	r2, #1033	@ 0x409
 800720c:	829a      	strh	r2, [r3, #20]
 800720e:	e002      	b.n	8007216 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2200      	movs	r2, #0
 8007214:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	8b3a      	ldrh	r2, [r7, #24]
 800721a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800721c:	8b3b      	ldrh	r3, [r7, #24]
 800721e:	461a      	mov	r2, r3
 8007220:	6879      	ldr	r1, [r7, #4]
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	f000 fba5 	bl	8007972 <USBH_CtlReq>
 8007228:	4603      	mov	r3, r0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3710      	adds	r7, #16
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007232:	b580      	push	{r7, lr}
 8007234:	b082      	sub	sp, #8
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
 800723a:	460b      	mov	r3, r1
 800723c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	789b      	ldrb	r3, [r3, #2]
 8007242:	2b01      	cmp	r3, #1
 8007244:	d10f      	bne.n	8007266 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2205      	movs	r2, #5
 8007250:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007252:	78fb      	ldrb	r3, [r7, #3]
 8007254:	b29a      	uxth	r2, r3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007266:	2200      	movs	r2, #0
 8007268:	2100      	movs	r1, #0
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fb81 	bl	8007972 <USBH_CtlReq>
 8007270:	4603      	mov	r3, r0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3708      	adds	r7, #8
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b082      	sub	sp, #8
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
 8007282:	460b      	mov	r3, r1
 8007284:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	789b      	ldrb	r3, [r3, #2]
 800728a:	2b01      	cmp	r3, #1
 800728c:	d10e      	bne.n	80072ac <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2209      	movs	r2, #9
 8007298:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	887a      	ldrh	r2, [r7, #2]
 800729e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80072ac:	2200      	movs	r2, #0
 80072ae:	2100      	movs	r1, #0
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fb5e 	bl	8007972 <USBH_CtlReq>
 80072b6:	4603      	mov	r3, r0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3708      	adds	r7, #8
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	460b      	mov	r3, r1
 80072ca:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	789b      	ldrb	r3, [r3, #2]
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d10f      	bne.n	80072f4 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2203      	movs	r2, #3
 80072de:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80072e0:	78fb      	ldrb	r3, [r7, #3]
 80072e2:	b29a      	uxth	r2, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80072f4:	2200      	movs	r2, #0
 80072f6:	2100      	movs	r1, #0
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 fb3a 	bl	8007972 <USBH_CtlReq>
 80072fe:	4603      	mov	r3, r0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3708      	adds	r7, #8
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	460b      	mov	r3, r1
 8007312:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	789b      	ldrb	r3, [r3, #2]
 8007318:	2b01      	cmp	r3, #1
 800731a:	d10f      	bne.n	800733c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2202      	movs	r2, #2
 8007320:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2201      	movs	r2, #1
 8007326:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800732e:	78fb      	ldrb	r3, [r7, #3]
 8007330:	b29a      	uxth	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800733c:	2200      	movs	r2, #0
 800733e:	2100      	movs	r1, #0
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 fb16 	bl	8007972 <USBH_CtlReq>
 8007346:	4603      	mov	r3, r0
}
 8007348:	4618      	mov	r0, r3
 800734a:	3708      	adds	r7, #8
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007350:	b480      	push	{r7}
 8007352:	b087      	sub	sp, #28
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	4613      	mov	r3, r2
 800735c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007364:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8007366:	2300      	movs	r3, #0
 8007368:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d101      	bne.n	8007374 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8007370:	2302      	movs	r3, #2
 8007372:	e094      	b.n	800749e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	781a      	ldrb	r2, [r3, #0]
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	785a      	ldrb	r2, [r3, #1]
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	3302      	adds	r3, #2
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	461a      	mov	r2, r3
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	3303      	adds	r3, #3
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	021b      	lsls	r3, r3, #8
 8007394:	b29b      	uxth	r3, r3
 8007396:	4313      	orrs	r3, r2
 8007398:	b29a      	uxth	r2, r3
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	791a      	ldrb	r2, [r3, #4]
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	795a      	ldrb	r2, [r3, #5]
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	799a      	ldrb	r2, [r3, #6]
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	79da      	ldrb	r2, [r3, #7]
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d004      	beq.n	80073d2 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d11b      	bne.n	800740a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	79db      	ldrb	r3, [r3, #7]
 80073d6:	2b20      	cmp	r3, #32
 80073d8:	dc0f      	bgt.n	80073fa <USBH_ParseDevDesc+0xaa>
 80073da:	2b08      	cmp	r3, #8
 80073dc:	db0f      	blt.n	80073fe <USBH_ParseDevDesc+0xae>
 80073de:	3b08      	subs	r3, #8
 80073e0:	4a32      	ldr	r2, [pc, #200]	@ (80074ac <USBH_ParseDevDesc+0x15c>)
 80073e2:	fa22 f303 	lsr.w	r3, r2, r3
 80073e6:	f003 0301 	and.w	r3, r3, #1
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	bf14      	ite	ne
 80073ee:	2301      	movne	r3, #1
 80073f0:	2300      	moveq	r3, #0
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d106      	bne.n	8007406 <USBH_ParseDevDesc+0xb6>
 80073f8:	e001      	b.n	80073fe <USBH_ParseDevDesc+0xae>
 80073fa:	2b40      	cmp	r3, #64	@ 0x40
 80073fc:	d003      	beq.n	8007406 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	2208      	movs	r2, #8
 8007402:	71da      	strb	r2, [r3, #7]
        break;
 8007404:	e000      	b.n	8007408 <USBH_ParseDevDesc+0xb8>
        break;
 8007406:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8007408:	e00e      	b.n	8007428 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007410:	2b02      	cmp	r3, #2
 8007412:	d107      	bne.n	8007424 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	79db      	ldrb	r3, [r3, #7]
 8007418:	2b08      	cmp	r3, #8
 800741a:	d005      	beq.n	8007428 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	2208      	movs	r2, #8
 8007420:	71da      	strb	r2, [r3, #7]
 8007422:	e001      	b.n	8007428 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007424:	2303      	movs	r3, #3
 8007426:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8007428:	88fb      	ldrh	r3, [r7, #6]
 800742a:	2b08      	cmp	r3, #8
 800742c:	d936      	bls.n	800749c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	3308      	adds	r3, #8
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	461a      	mov	r2, r3
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	3309      	adds	r3, #9
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	021b      	lsls	r3, r3, #8
 800743e:	b29b      	uxth	r3, r3
 8007440:	4313      	orrs	r3, r2
 8007442:	b29a      	uxth	r2, r3
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	330a      	adds	r3, #10
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	461a      	mov	r2, r3
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	330b      	adds	r3, #11
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	021b      	lsls	r3, r3, #8
 8007458:	b29b      	uxth	r3, r3
 800745a:	4313      	orrs	r3, r2
 800745c:	b29a      	uxth	r2, r3
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	330c      	adds	r3, #12
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	461a      	mov	r2, r3
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	330d      	adds	r3, #13
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	021b      	lsls	r3, r3, #8
 8007472:	b29b      	uxth	r3, r3
 8007474:	4313      	orrs	r3, r2
 8007476:	b29a      	uxth	r2, r3
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	7b9a      	ldrb	r2, [r3, #14]
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	7bda      	ldrb	r2, [r3, #15]
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	7c1a      	ldrb	r2, [r3, #16]
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	7c5a      	ldrb	r2, [r3, #17]
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800749c:	7dfb      	ldrb	r3, [r7, #23]
}
 800749e:	4618      	mov	r0, r3
 80074a0:	371c      	adds	r7, #28
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop
 80074ac:	01000101 	.word	0x01000101

080074b0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b08c      	sub	sp, #48	@ 0x30
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	4613      	mov	r3, r2
 80074bc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80074c4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80074c6:	2300      	movs	r3, #0
 80074c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80074cc:	2300      	movs	r3, #0
 80074ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80074d2:	2300      	movs	r3, #0
 80074d4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d101      	bne.n	80074e2 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80074de:	2302      	movs	r3, #2
 80074e0:	e0da      	b.n	8007698 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80074e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	2b09      	cmp	r3, #9
 80074ec:	d002      	beq.n	80074f4 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80074ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074f0:	2209      	movs	r2, #9
 80074f2:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	781a      	ldrb	r2, [r3, #0]
 80074f8:	6a3b      	ldr	r3, [r7, #32]
 80074fa:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	785a      	ldrb	r2, [r3, #1]
 8007500:	6a3b      	ldr	r3, [r7, #32]
 8007502:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	3302      	adds	r3, #2
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	461a      	mov	r2, r3
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	3303      	adds	r3, #3
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	021b      	lsls	r3, r3, #8
 8007514:	b29b      	uxth	r3, r3
 8007516:	4313      	orrs	r3, r2
 8007518:	b29b      	uxth	r3, r3
 800751a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800751e:	bf28      	it	cs
 8007520:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8007524:	b29a      	uxth	r2, r3
 8007526:	6a3b      	ldr	r3, [r7, #32]
 8007528:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	791a      	ldrb	r2, [r3, #4]
 800752e:	6a3b      	ldr	r3, [r7, #32]
 8007530:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	795a      	ldrb	r2, [r3, #5]
 8007536:	6a3b      	ldr	r3, [r7, #32]
 8007538:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	799a      	ldrb	r2, [r3, #6]
 800753e:	6a3b      	ldr	r3, [r7, #32]
 8007540:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	79da      	ldrb	r2, [r3, #7]
 8007546:	6a3b      	ldr	r3, [r7, #32]
 8007548:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	7a1a      	ldrb	r2, [r3, #8]
 800754e:	6a3b      	ldr	r3, [r7, #32]
 8007550:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007552:	88fb      	ldrh	r3, [r7, #6]
 8007554:	2b09      	cmp	r3, #9
 8007556:	f240 809d 	bls.w	8007694 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800755a:	2309      	movs	r3, #9
 800755c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800755e:	2300      	movs	r3, #0
 8007560:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007562:	e081      	b.n	8007668 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007564:	f107 0316 	add.w	r3, r7, #22
 8007568:	4619      	mov	r1, r3
 800756a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800756c:	f000 f9e7 	bl	800793e <USBH_GetNextDesc>
 8007570:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007574:	785b      	ldrb	r3, [r3, #1]
 8007576:	2b04      	cmp	r3, #4
 8007578:	d176      	bne.n	8007668 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800757a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	2b09      	cmp	r3, #9
 8007580:	d002      	beq.n	8007588 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007584:	2209      	movs	r2, #9
 8007586:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007588:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800758c:	221a      	movs	r2, #26
 800758e:	fb02 f303 	mul.w	r3, r2, r3
 8007592:	3308      	adds	r3, #8
 8007594:	6a3a      	ldr	r2, [r7, #32]
 8007596:	4413      	add	r3, r2
 8007598:	3302      	adds	r3, #2
 800759a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800759c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800759e:	69f8      	ldr	r0, [r7, #28]
 80075a0:	f000 f87e 	bl	80076a0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80075a4:	2300      	movs	r3, #0
 80075a6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80075aa:	2300      	movs	r3, #0
 80075ac:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80075ae:	e043      	b.n	8007638 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80075b0:	f107 0316 	add.w	r3, r7, #22
 80075b4:	4619      	mov	r1, r3
 80075b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075b8:	f000 f9c1 	bl	800793e <USBH_GetNextDesc>
 80075bc:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80075be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075c0:	785b      	ldrb	r3, [r3, #1]
 80075c2:	2b05      	cmp	r3, #5
 80075c4:	d138      	bne.n	8007638 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	795b      	ldrb	r3, [r3, #5]
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d113      	bne.n	80075f6 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80075ce:	69fb      	ldr	r3, [r7, #28]
 80075d0:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d003      	beq.n	80075de <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	799b      	ldrb	r3, [r3, #6]
 80075da:	2b03      	cmp	r3, #3
 80075dc:	d10b      	bne.n	80075f6 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	79db      	ldrb	r3, [r3, #7]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d10b      	bne.n	80075fe <USBH_ParseCfgDesc+0x14e>
 80075e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	2b09      	cmp	r3, #9
 80075ec:	d007      	beq.n	80075fe <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80075ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075f0:	2209      	movs	r2, #9
 80075f2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80075f4:	e003      	b.n	80075fe <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80075f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075f8:	2207      	movs	r2, #7
 80075fa:	701a      	strb	r2, [r3, #0]
 80075fc:	e000      	b.n	8007600 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80075fe:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007600:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007604:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007608:	3201      	adds	r2, #1
 800760a:	00d2      	lsls	r2, r2, #3
 800760c:	211a      	movs	r1, #26
 800760e:	fb01 f303 	mul.w	r3, r1, r3
 8007612:	4413      	add	r3, r2
 8007614:	3308      	adds	r3, #8
 8007616:	6a3a      	ldr	r2, [r7, #32]
 8007618:	4413      	add	r3, r2
 800761a:	3304      	adds	r3, #4
 800761c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800761e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007620:	69b9      	ldr	r1, [r7, #24]
 8007622:	68f8      	ldr	r0, [r7, #12]
 8007624:	f000 f870 	bl	8007708 <USBH_ParseEPDesc>
 8007628:	4603      	mov	r3, r0
 800762a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800762e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007632:	3301      	adds	r3, #1
 8007634:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	791b      	ldrb	r3, [r3, #4]
 800763c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007640:	429a      	cmp	r2, r3
 8007642:	d204      	bcs.n	800764e <USBH_ParseCfgDesc+0x19e>
 8007644:	6a3b      	ldr	r3, [r7, #32]
 8007646:	885a      	ldrh	r2, [r3, #2]
 8007648:	8afb      	ldrh	r3, [r7, #22]
 800764a:	429a      	cmp	r2, r3
 800764c:	d8b0      	bhi.n	80075b0 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	791b      	ldrb	r3, [r3, #4]
 8007652:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007656:	429a      	cmp	r2, r3
 8007658:	d201      	bcs.n	800765e <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800765a:	2303      	movs	r3, #3
 800765c:	e01c      	b.n	8007698 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800765e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007662:	3301      	adds	r3, #1
 8007664:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007668:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800766c:	2b01      	cmp	r3, #1
 800766e:	d805      	bhi.n	800767c <USBH_ParseCfgDesc+0x1cc>
 8007670:	6a3b      	ldr	r3, [r7, #32]
 8007672:	885a      	ldrh	r2, [r3, #2]
 8007674:	8afb      	ldrh	r3, [r7, #22]
 8007676:	429a      	cmp	r2, r3
 8007678:	f63f af74 	bhi.w	8007564 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800767c:	6a3b      	ldr	r3, [r7, #32]
 800767e:	791b      	ldrb	r3, [r3, #4]
 8007680:	2b02      	cmp	r3, #2
 8007682:	bf28      	it	cs
 8007684:	2302      	movcs	r3, #2
 8007686:	b2db      	uxtb	r3, r3
 8007688:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800768c:	429a      	cmp	r2, r3
 800768e:	d201      	bcs.n	8007694 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8007690:	2303      	movs	r3, #3
 8007692:	e001      	b.n	8007698 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8007694:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007698:	4618      	mov	r0, r3
 800769a:	3730      	adds	r7, #48	@ 0x30
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	781a      	ldrb	r2, [r3, #0]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	785a      	ldrb	r2, [r3, #1]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	789a      	ldrb	r2, [r3, #2]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	78da      	ldrb	r2, [r3, #3]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	3304      	adds	r3, #4
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	2b02      	cmp	r3, #2
 80076d2:	bf28      	it	cs
 80076d4:	2302      	movcs	r3, #2
 80076d6:	b2da      	uxtb	r2, r3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	795a      	ldrb	r2, [r3, #5]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	799a      	ldrb	r2, [r3, #6]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	79da      	ldrb	r2, [r3, #7]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	7a1a      	ldrb	r2, [r3, #8]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	721a      	strb	r2, [r3, #8]
}
 80076fc:	bf00      	nop
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8007708:	b480      	push	{r7}
 800770a:	b087      	sub	sp, #28
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007714:	2300      	movs	r3, #0
 8007716:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	781a      	ldrb	r2, [r3, #0]
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	785a      	ldrb	r2, [r3, #1]
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	789a      	ldrb	r2, [r3, #2]
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	78da      	ldrb	r2, [r3, #3]
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	3304      	adds	r3, #4
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	461a      	mov	r2, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	3305      	adds	r3, #5
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	021b      	lsls	r3, r3, #8
 8007748:	b29b      	uxth	r3, r3
 800774a:	4313      	orrs	r3, r2
 800774c:	b29a      	uxth	r2, r3
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	799a      	ldrb	r2, [r3, #6]
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	889b      	ldrh	r3, [r3, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d009      	beq.n	8007776 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007766:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800776a:	d804      	bhi.n	8007776 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007770:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007774:	d901      	bls.n	800777a <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8007776:	2303      	movs	r3, #3
 8007778:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007780:	2b00      	cmp	r3, #0
 8007782:	d136      	bne.n	80077f2 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	78db      	ldrb	r3, [r3, #3]
 8007788:	f003 0303 	and.w	r3, r3, #3
 800778c:	2b02      	cmp	r3, #2
 800778e:	d108      	bne.n	80077a2 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	889b      	ldrh	r3, [r3, #4]
 8007794:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007798:	f240 8097 	bls.w	80078ca <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800779c:	2303      	movs	r3, #3
 800779e:	75fb      	strb	r3, [r7, #23]
 80077a0:	e093      	b.n	80078ca <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	78db      	ldrb	r3, [r3, #3]
 80077a6:	f003 0303 	and.w	r3, r3, #3
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d107      	bne.n	80077be <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	889b      	ldrh	r3, [r3, #4]
 80077b2:	2b40      	cmp	r3, #64	@ 0x40
 80077b4:	f240 8089 	bls.w	80078ca <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80077b8:	2303      	movs	r3, #3
 80077ba:	75fb      	strb	r3, [r7, #23]
 80077bc:	e085      	b.n	80078ca <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	78db      	ldrb	r3, [r3, #3]
 80077c2:	f003 0303 	and.w	r3, r3, #3
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d005      	beq.n	80077d6 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	78db      	ldrb	r3, [r3, #3]
 80077ce:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80077d2:	2b03      	cmp	r3, #3
 80077d4:	d10a      	bne.n	80077ec <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	799b      	ldrb	r3, [r3, #6]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d003      	beq.n	80077e6 <USBH_ParseEPDesc+0xde>
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	799b      	ldrb	r3, [r3, #6]
 80077e2:	2b10      	cmp	r3, #16
 80077e4:	d970      	bls.n	80078c8 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 80077e6:	2303      	movs	r3, #3
 80077e8:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80077ea:	e06d      	b.n	80078c8 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80077ec:	2303      	movs	r3, #3
 80077ee:	75fb      	strb	r3, [r7, #23]
 80077f0:	e06b      	b.n	80078ca <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d13c      	bne.n	8007876 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	78db      	ldrb	r3, [r3, #3]
 8007800:	f003 0303 	and.w	r3, r3, #3
 8007804:	2b02      	cmp	r3, #2
 8007806:	d005      	beq.n	8007814 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	78db      	ldrb	r3, [r3, #3]
 800780c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007810:	2b00      	cmp	r3, #0
 8007812:	d106      	bne.n	8007822 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	889b      	ldrh	r3, [r3, #4]
 8007818:	2b40      	cmp	r3, #64	@ 0x40
 800781a:	d956      	bls.n	80078ca <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800781c:	2303      	movs	r3, #3
 800781e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007820:	e053      	b.n	80078ca <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	78db      	ldrb	r3, [r3, #3]
 8007826:	f003 0303 	and.w	r3, r3, #3
 800782a:	2b01      	cmp	r3, #1
 800782c:	d10e      	bne.n	800784c <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	799b      	ldrb	r3, [r3, #6]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d007      	beq.n	8007846 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800783a:	2b10      	cmp	r3, #16
 800783c:	d803      	bhi.n	8007846 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8007842:	2b40      	cmp	r3, #64	@ 0x40
 8007844:	d941      	bls.n	80078ca <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007846:	2303      	movs	r3, #3
 8007848:	75fb      	strb	r3, [r7, #23]
 800784a:	e03e      	b.n	80078ca <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	78db      	ldrb	r3, [r3, #3]
 8007850:	f003 0303 	and.w	r3, r3, #3
 8007854:	2b03      	cmp	r3, #3
 8007856:	d10b      	bne.n	8007870 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	799b      	ldrb	r3, [r3, #6]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d004      	beq.n	800786a <USBH_ParseEPDesc+0x162>
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	889b      	ldrh	r3, [r3, #4]
 8007864:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007868:	d32f      	bcc.n	80078ca <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800786a:	2303      	movs	r3, #3
 800786c:	75fb      	strb	r3, [r7, #23]
 800786e:	e02c      	b.n	80078ca <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007870:	2303      	movs	r3, #3
 8007872:	75fb      	strb	r3, [r7, #23]
 8007874:	e029      	b.n	80078ca <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800787c:	2b02      	cmp	r3, #2
 800787e:	d120      	bne.n	80078c2 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	78db      	ldrb	r3, [r3, #3]
 8007884:	f003 0303 	and.w	r3, r3, #3
 8007888:	2b00      	cmp	r3, #0
 800788a:	d106      	bne.n	800789a <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	889b      	ldrh	r3, [r3, #4]
 8007890:	2b08      	cmp	r3, #8
 8007892:	d01a      	beq.n	80078ca <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007894:	2303      	movs	r3, #3
 8007896:	75fb      	strb	r3, [r7, #23]
 8007898:	e017      	b.n	80078ca <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	78db      	ldrb	r3, [r3, #3]
 800789e:	f003 0303 	and.w	r3, r3, #3
 80078a2:	2b03      	cmp	r3, #3
 80078a4:	d10a      	bne.n	80078bc <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	799b      	ldrb	r3, [r3, #6]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d003      	beq.n	80078b6 <USBH_ParseEPDesc+0x1ae>
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	889b      	ldrh	r3, [r3, #4]
 80078b2:	2b08      	cmp	r3, #8
 80078b4:	d909      	bls.n	80078ca <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80078b6:	2303      	movs	r3, #3
 80078b8:	75fb      	strb	r3, [r7, #23]
 80078ba:	e006      	b.n	80078ca <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80078bc:	2303      	movs	r3, #3
 80078be:	75fb      	strb	r3, [r7, #23]
 80078c0:	e003      	b.n	80078ca <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80078c2:	2303      	movs	r3, #3
 80078c4:	75fb      	strb	r3, [r7, #23]
 80078c6:	e000      	b.n	80078ca <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80078c8:	bf00      	nop
  }

  return status;
 80078ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	371c      	adds	r7, #28
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80078d8:	b480      	push	{r7}
 80078da:	b087      	sub	sp, #28
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	4613      	mov	r3, r2
 80078e4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	3301      	adds	r3, #1
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	2b03      	cmp	r3, #3
 80078ee:	d120      	bne.n	8007932 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	1e9a      	subs	r2, r3, #2
 80078f6:	88fb      	ldrh	r3, [r7, #6]
 80078f8:	4293      	cmp	r3, r2
 80078fa:	bf28      	it	cs
 80078fc:	4613      	movcs	r3, r2
 80078fe:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	3302      	adds	r3, #2
 8007904:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007906:	2300      	movs	r3, #0
 8007908:	82fb      	strh	r3, [r7, #22]
 800790a:	e00b      	b.n	8007924 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800790c:	8afb      	ldrh	r3, [r7, #22]
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	4413      	add	r3, r2
 8007912:	781a      	ldrb	r2, [r3, #0]
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	3301      	adds	r3, #1
 800791c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800791e:	8afb      	ldrh	r3, [r7, #22]
 8007920:	3302      	adds	r3, #2
 8007922:	82fb      	strh	r3, [r7, #22]
 8007924:	8afa      	ldrh	r2, [r7, #22]
 8007926:	8abb      	ldrh	r3, [r7, #20]
 8007928:	429a      	cmp	r2, r3
 800792a:	d3ef      	bcc.n	800790c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	2200      	movs	r2, #0
 8007930:	701a      	strb	r2, [r3, #0]
  }
}
 8007932:	bf00      	nop
 8007934:	371c      	adds	r7, #28
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr

0800793e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800793e:	b480      	push	{r7}
 8007940:	b085      	sub	sp, #20
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
 8007946:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	881b      	ldrh	r3, [r3, #0]
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	7812      	ldrb	r2, [r2, #0]
 8007950:	4413      	add	r3, r2
 8007952:	b29a      	uxth	r2, r3
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4413      	add	r3, r2
 8007962:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007964:	68fb      	ldr	r3, [r7, #12]
}
 8007966:	4618      	mov	r0, r3
 8007968:	3714      	adds	r7, #20
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr

08007972 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007972:	b580      	push	{r7, lr}
 8007974:	b086      	sub	sp, #24
 8007976:	af00      	add	r7, sp, #0
 8007978:	60f8      	str	r0, [r7, #12]
 800797a:	60b9      	str	r1, [r7, #8]
 800797c:	4613      	mov	r3, r2
 800797e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007980:	2301      	movs	r3, #1
 8007982:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	789b      	ldrb	r3, [r3, #2]
 8007988:	2b01      	cmp	r3, #1
 800798a:	d002      	beq.n	8007992 <USBH_CtlReq+0x20>
 800798c:	2b02      	cmp	r3, #2
 800798e:	d00f      	beq.n	80079b0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007990:	e027      	b.n	80079e2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	68ba      	ldr	r2, [r7, #8]
 8007996:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	88fa      	ldrh	r2, [r7, #6]
 800799c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2201      	movs	r2, #1
 80079a2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2202      	movs	r2, #2
 80079a8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80079aa:	2301      	movs	r3, #1
 80079ac:	75fb      	strb	r3, [r7, #23]
      break;
 80079ae:	e018      	b.n	80079e2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80079b0:	68f8      	ldr	r0, [r7, #12]
 80079b2:	f000 f81b 	bl	80079ec <USBH_HandleControl>
 80079b6:	4603      	mov	r3, r0
 80079b8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80079ba:	7dfb      	ldrb	r3, [r7, #23]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d002      	beq.n	80079c6 <USBH_CtlReq+0x54>
 80079c0:	7dfb      	ldrb	r3, [r7, #23]
 80079c2:	2b03      	cmp	r3, #3
 80079c4:	d106      	bne.n	80079d4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2201      	movs	r2, #1
 80079ca:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2200      	movs	r2, #0
 80079d0:	761a      	strb	r2, [r3, #24]
      break;
 80079d2:	e005      	b.n	80079e0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80079d4:	7dfb      	ldrb	r3, [r7, #23]
 80079d6:	2b02      	cmp	r3, #2
 80079d8:	d102      	bne.n	80079e0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2201      	movs	r2, #1
 80079de:	709a      	strb	r2, [r3, #2]
      break;
 80079e0:	bf00      	nop
  }
  return status;
 80079e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3718      	adds	r7, #24
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b086      	sub	sp, #24
 80079f0:	af02      	add	r7, sp, #8
 80079f2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80079f4:	2301      	movs	r3, #1
 80079f6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80079f8:	2300      	movs	r3, #0
 80079fa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	7e1b      	ldrb	r3, [r3, #24]
 8007a00:	3b01      	subs	r3, #1
 8007a02:	2b0a      	cmp	r3, #10
 8007a04:	f200 8156 	bhi.w	8007cb4 <USBH_HandleControl+0x2c8>
 8007a08:	a201      	add	r2, pc, #4	@ (adr r2, 8007a10 <USBH_HandleControl+0x24>)
 8007a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a0e:	bf00      	nop
 8007a10:	08007a3d 	.word	0x08007a3d
 8007a14:	08007a57 	.word	0x08007a57
 8007a18:	08007ac1 	.word	0x08007ac1
 8007a1c:	08007ae7 	.word	0x08007ae7
 8007a20:	08007b1f 	.word	0x08007b1f
 8007a24:	08007b49 	.word	0x08007b49
 8007a28:	08007b9b 	.word	0x08007b9b
 8007a2c:	08007bbd 	.word	0x08007bbd
 8007a30:	08007bf9 	.word	0x08007bf9
 8007a34:	08007c1f 	.word	0x08007c1f
 8007a38:	08007c5d 	.word	0x08007c5d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f103 0110 	add.w	r1, r3, #16
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	795b      	ldrb	r3, [r3, #5]
 8007a46:	461a      	mov	r2, r3
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 f943 	bl	8007cd4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2202      	movs	r2, #2
 8007a52:	761a      	strb	r2, [r3, #24]
      break;
 8007a54:	e139      	b.n	8007cca <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	795b      	ldrb	r3, [r3, #5]
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 fcc5 	bl	80083ec <USBH_LL_GetURBState>
 8007a62:	4603      	mov	r3, r0
 8007a64:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007a66:	7bbb      	ldrb	r3, [r7, #14]
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d11e      	bne.n	8007aaa <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	7c1b      	ldrb	r3, [r3, #16]
 8007a70:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007a74:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	8adb      	ldrh	r3, [r3, #22]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00a      	beq.n	8007a94 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007a7e:	7b7b      	ldrb	r3, [r7, #13]
 8007a80:	2b80      	cmp	r3, #128	@ 0x80
 8007a82:	d103      	bne.n	8007a8c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2203      	movs	r2, #3
 8007a88:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007a8a:	e115      	b.n	8007cb8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2205      	movs	r2, #5
 8007a90:	761a      	strb	r2, [r3, #24]
      break;
 8007a92:	e111      	b.n	8007cb8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007a94:	7b7b      	ldrb	r3, [r7, #13]
 8007a96:	2b80      	cmp	r3, #128	@ 0x80
 8007a98:	d103      	bne.n	8007aa2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2209      	movs	r2, #9
 8007a9e:	761a      	strb	r2, [r3, #24]
      break;
 8007aa0:	e10a      	b.n	8007cb8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2207      	movs	r2, #7
 8007aa6:	761a      	strb	r2, [r3, #24]
      break;
 8007aa8:	e106      	b.n	8007cb8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007aaa:	7bbb      	ldrb	r3, [r7, #14]
 8007aac:	2b04      	cmp	r3, #4
 8007aae:	d003      	beq.n	8007ab8 <USBH_HandleControl+0xcc>
 8007ab0:	7bbb      	ldrb	r3, [r7, #14]
 8007ab2:	2b02      	cmp	r3, #2
 8007ab4:	f040 8100 	bne.w	8007cb8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	220b      	movs	r2, #11
 8007abc:	761a      	strb	r2, [r3, #24]
      break;
 8007abe:	e0fb      	b.n	8007cb8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007ac6:	b29a      	uxth	r2, r3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6899      	ldr	r1, [r3, #8]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	899a      	ldrh	r2, [r3, #12]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	791b      	ldrb	r3, [r3, #4]
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 f93a 	bl	8007d52 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2204      	movs	r2, #4
 8007ae2:	761a      	strb	r2, [r3, #24]
      break;
 8007ae4:	e0f1      	b.n	8007cca <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	791b      	ldrb	r3, [r3, #4]
 8007aea:	4619      	mov	r1, r3
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 fc7d 	bl	80083ec <USBH_LL_GetURBState>
 8007af2:	4603      	mov	r3, r0
 8007af4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007af6:	7bbb      	ldrb	r3, [r7, #14]
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d102      	bne.n	8007b02 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2209      	movs	r2, #9
 8007b00:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007b02:	7bbb      	ldrb	r3, [r7, #14]
 8007b04:	2b05      	cmp	r3, #5
 8007b06:	d102      	bne.n	8007b0e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007b08:	2303      	movs	r3, #3
 8007b0a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007b0c:	e0d6      	b.n	8007cbc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007b0e:	7bbb      	ldrb	r3, [r7, #14]
 8007b10:	2b04      	cmp	r3, #4
 8007b12:	f040 80d3 	bne.w	8007cbc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	220b      	movs	r2, #11
 8007b1a:	761a      	strb	r2, [r3, #24]
      break;
 8007b1c:	e0ce      	b.n	8007cbc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6899      	ldr	r1, [r3, #8]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	899a      	ldrh	r2, [r3, #12]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	795b      	ldrb	r3, [r3, #5]
 8007b2a:	2001      	movs	r0, #1
 8007b2c:	9000      	str	r0, [sp, #0]
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f8ea 	bl	8007d08 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2206      	movs	r2, #6
 8007b44:	761a      	strb	r2, [r3, #24]
      break;
 8007b46:	e0c0      	b.n	8007cca <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	795b      	ldrb	r3, [r3, #5]
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 fc4c 	bl	80083ec <USBH_LL_GetURBState>
 8007b54:	4603      	mov	r3, r0
 8007b56:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007b58:	7bbb      	ldrb	r3, [r7, #14]
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d103      	bne.n	8007b66 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2207      	movs	r2, #7
 8007b62:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007b64:	e0ac      	b.n	8007cc0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007b66:	7bbb      	ldrb	r3, [r7, #14]
 8007b68:	2b05      	cmp	r3, #5
 8007b6a:	d105      	bne.n	8007b78 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	220c      	movs	r2, #12
 8007b70:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007b72:	2303      	movs	r3, #3
 8007b74:	73fb      	strb	r3, [r7, #15]
      break;
 8007b76:	e0a3      	b.n	8007cc0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007b78:	7bbb      	ldrb	r3, [r7, #14]
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	d103      	bne.n	8007b86 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2205      	movs	r2, #5
 8007b82:	761a      	strb	r2, [r3, #24]
      break;
 8007b84:	e09c      	b.n	8007cc0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007b86:	7bbb      	ldrb	r3, [r7, #14]
 8007b88:	2b04      	cmp	r3, #4
 8007b8a:	f040 8099 	bne.w	8007cc0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	220b      	movs	r2, #11
 8007b92:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007b94:	2302      	movs	r3, #2
 8007b96:	73fb      	strb	r3, [r7, #15]
      break;
 8007b98:	e092      	b.n	8007cc0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	791b      	ldrb	r3, [r3, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	2100      	movs	r1, #0
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 f8d5 	bl	8007d52 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007bae:	b29a      	uxth	r2, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2208      	movs	r2, #8
 8007bb8:	761a      	strb	r2, [r3, #24]

      break;
 8007bba:	e086      	b.n	8007cca <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	791b      	ldrb	r3, [r3, #4]
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 fc12 	bl	80083ec <USBH_LL_GetURBState>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007bcc:	7bbb      	ldrb	r3, [r7, #14]
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d105      	bne.n	8007bde <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	220d      	movs	r2, #13
 8007bd6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007bdc:	e072      	b.n	8007cc4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007bde:	7bbb      	ldrb	r3, [r7, #14]
 8007be0:	2b04      	cmp	r3, #4
 8007be2:	d103      	bne.n	8007bec <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	220b      	movs	r2, #11
 8007be8:	761a      	strb	r2, [r3, #24]
      break;
 8007bea:	e06b      	b.n	8007cc4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007bec:	7bbb      	ldrb	r3, [r7, #14]
 8007bee:	2b05      	cmp	r3, #5
 8007bf0:	d168      	bne.n	8007cc4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007bf2:	2303      	movs	r3, #3
 8007bf4:	73fb      	strb	r3, [r7, #15]
      break;
 8007bf6:	e065      	b.n	8007cc4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	795b      	ldrb	r3, [r3, #5]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	9200      	str	r2, [sp, #0]
 8007c00:	2200      	movs	r2, #0
 8007c02:	2100      	movs	r1, #0
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 f87f 	bl	8007d08 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007c10:	b29a      	uxth	r2, r3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	220a      	movs	r2, #10
 8007c1a:	761a      	strb	r2, [r3, #24]
      break;
 8007c1c:	e055      	b.n	8007cca <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	795b      	ldrb	r3, [r3, #5]
 8007c22:	4619      	mov	r1, r3
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 fbe1 	bl	80083ec <USBH_LL_GetURBState>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007c2e:	7bbb      	ldrb	r3, [r7, #14]
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d105      	bne.n	8007c40 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007c34:	2300      	movs	r3, #0
 8007c36:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	220d      	movs	r2, #13
 8007c3c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007c3e:	e043      	b.n	8007cc8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007c40:	7bbb      	ldrb	r3, [r7, #14]
 8007c42:	2b02      	cmp	r3, #2
 8007c44:	d103      	bne.n	8007c4e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2209      	movs	r2, #9
 8007c4a:	761a      	strb	r2, [r3, #24]
      break;
 8007c4c:	e03c      	b.n	8007cc8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007c4e:	7bbb      	ldrb	r3, [r7, #14]
 8007c50:	2b04      	cmp	r3, #4
 8007c52:	d139      	bne.n	8007cc8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	220b      	movs	r2, #11
 8007c58:	761a      	strb	r2, [r3, #24]
      break;
 8007c5a:	e035      	b.n	8007cc8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	7e5b      	ldrb	r3, [r3, #25]
 8007c60:	3301      	adds	r3, #1
 8007c62:	b2da      	uxtb	r2, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	765a      	strb	r2, [r3, #25]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	7e5b      	ldrb	r3, [r3, #25]
 8007c6c:	2b02      	cmp	r3, #2
 8007c6e:	d806      	bhi.n	8007c7e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007c7c:	e025      	b.n	8007cca <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007c84:	2106      	movs	r1, #6
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	795b      	ldrb	r3, [r3, #5]
 8007c94:	4619      	mov	r1, r3
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 f90c 	bl	8007eb4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	791b      	ldrb	r3, [r3, #4]
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f906 	bl	8007eb4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007cae:	2302      	movs	r3, #2
 8007cb0:	73fb      	strb	r3, [r7, #15]
      break;
 8007cb2:	e00a      	b.n	8007cca <USBH_HandleControl+0x2de>

    default:
      break;
 8007cb4:	bf00      	nop
 8007cb6:	e008      	b.n	8007cca <USBH_HandleControl+0x2de>
      break;
 8007cb8:	bf00      	nop
 8007cba:	e006      	b.n	8007cca <USBH_HandleControl+0x2de>
      break;
 8007cbc:	bf00      	nop
 8007cbe:	e004      	b.n	8007cca <USBH_HandleControl+0x2de>
      break;
 8007cc0:	bf00      	nop
 8007cc2:	e002      	b.n	8007cca <USBH_HandleControl+0x2de>
      break;
 8007cc4:	bf00      	nop
 8007cc6:	e000      	b.n	8007cca <USBH_HandleControl+0x2de>
      break;
 8007cc8:	bf00      	nop
  }

  return status;
 8007cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3710      	adds	r7, #16
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b088      	sub	sp, #32
 8007cd8:	af04      	add	r7, sp, #16
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	4613      	mov	r3, r2
 8007ce0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007ce2:	79f9      	ldrb	r1, [r7, #7]
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	9303      	str	r3, [sp, #12]
 8007ce8:	2308      	movs	r3, #8
 8007cea:	9302      	str	r3, [sp, #8]
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	9301      	str	r3, [sp, #4]
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	9300      	str	r3, [sp, #0]
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	68f8      	ldr	r0, [r7, #12]
 8007cfa:	f000 fb46 	bl	800838a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007cfe:	2300      	movs	r3, #0
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3710      	adds	r7, #16
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b088      	sub	sp, #32
 8007d0c:	af04      	add	r7, sp, #16
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	4611      	mov	r1, r2
 8007d14:	461a      	mov	r2, r3
 8007d16:	460b      	mov	r3, r1
 8007d18:	80fb      	strh	r3, [r7, #6]
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d001      	beq.n	8007d2c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007d2c:	7979      	ldrb	r1, [r7, #5]
 8007d2e:	7e3b      	ldrb	r3, [r7, #24]
 8007d30:	9303      	str	r3, [sp, #12]
 8007d32:	88fb      	ldrh	r3, [r7, #6]
 8007d34:	9302      	str	r3, [sp, #8]
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	9301      	str	r3, [sp, #4]
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	9300      	str	r3, [sp, #0]
 8007d3e:	2300      	movs	r3, #0
 8007d40:	2200      	movs	r2, #0
 8007d42:	68f8      	ldr	r0, [r7, #12]
 8007d44:	f000 fb21 	bl	800838a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3710      	adds	r7, #16
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b088      	sub	sp, #32
 8007d56:	af04      	add	r7, sp, #16
 8007d58:	60f8      	str	r0, [r7, #12]
 8007d5a:	60b9      	str	r1, [r7, #8]
 8007d5c:	4611      	mov	r1, r2
 8007d5e:	461a      	mov	r2, r3
 8007d60:	460b      	mov	r3, r1
 8007d62:	80fb      	strh	r3, [r7, #6]
 8007d64:	4613      	mov	r3, r2
 8007d66:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007d68:	7979      	ldrb	r1, [r7, #5]
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	9303      	str	r3, [sp, #12]
 8007d6e:	88fb      	ldrh	r3, [r7, #6]
 8007d70:	9302      	str	r3, [sp, #8]
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	9301      	str	r3, [sp, #4]
 8007d76:	2301      	movs	r3, #1
 8007d78:	9300      	str	r3, [sp, #0]
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	68f8      	ldr	r0, [r7, #12]
 8007d80:	f000 fb03 	bl	800838a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007d84:	2300      	movs	r3, #0

}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3710      	adds	r7, #16
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b088      	sub	sp, #32
 8007d92:	af04      	add	r7, sp, #16
 8007d94:	60f8      	str	r0, [r7, #12]
 8007d96:	60b9      	str	r1, [r7, #8]
 8007d98:	4611      	mov	r1, r2
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	80fb      	strh	r3, [r7, #6]
 8007da0:	4613      	mov	r3, r2
 8007da2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d001      	beq.n	8007db2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007dae:	2300      	movs	r3, #0
 8007db0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007db2:	7979      	ldrb	r1, [r7, #5]
 8007db4:	7e3b      	ldrb	r3, [r7, #24]
 8007db6:	9303      	str	r3, [sp, #12]
 8007db8:	88fb      	ldrh	r3, [r7, #6]
 8007dba:	9302      	str	r3, [sp, #8]
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	9301      	str	r3, [sp, #4]
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	9300      	str	r3, [sp, #0]
 8007dc4:	2302      	movs	r3, #2
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	68f8      	ldr	r0, [r7, #12]
 8007dca:	f000 fade 	bl	800838a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007dce:	2300      	movs	r3, #0
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3710      	adds	r7, #16
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b088      	sub	sp, #32
 8007ddc:	af04      	add	r7, sp, #16
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	60b9      	str	r1, [r7, #8]
 8007de2:	4611      	mov	r1, r2
 8007de4:	461a      	mov	r2, r3
 8007de6:	460b      	mov	r3, r1
 8007de8:	80fb      	strh	r3, [r7, #6]
 8007dea:	4613      	mov	r3, r2
 8007dec:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007dee:	7979      	ldrb	r1, [r7, #5]
 8007df0:	2300      	movs	r3, #0
 8007df2:	9303      	str	r3, [sp, #12]
 8007df4:	88fb      	ldrh	r3, [r7, #6]
 8007df6:	9302      	str	r3, [sp, #8]
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	9301      	str	r3, [sp, #4]
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	9300      	str	r3, [sp, #0]
 8007e00:	2302      	movs	r3, #2
 8007e02:	2201      	movs	r2, #1
 8007e04:	68f8      	ldr	r0, [r7, #12]
 8007e06:	f000 fac0 	bl	800838a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3710      	adds	r7, #16
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b086      	sub	sp, #24
 8007e18:	af04      	add	r7, sp, #16
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	4608      	mov	r0, r1
 8007e1e:	4611      	mov	r1, r2
 8007e20:	461a      	mov	r2, r3
 8007e22:	4603      	mov	r3, r0
 8007e24:	70fb      	strb	r3, [r7, #3]
 8007e26:	460b      	mov	r3, r1
 8007e28:	70bb      	strb	r3, [r7, #2]
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007e2e:	7878      	ldrb	r0, [r7, #1]
 8007e30:	78ba      	ldrb	r2, [r7, #2]
 8007e32:	78f9      	ldrb	r1, [r7, #3]
 8007e34:	8b3b      	ldrh	r3, [r7, #24]
 8007e36:	9302      	str	r3, [sp, #8]
 8007e38:	7d3b      	ldrb	r3, [r7, #20]
 8007e3a:	9301      	str	r3, [sp, #4]
 8007e3c:	7c3b      	ldrb	r3, [r7, #16]
 8007e3e:	9300      	str	r3, [sp, #0]
 8007e40:	4603      	mov	r3, r0
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 fa53 	bl	80082ee <USBH_LL_OpenPipe>

  return USBH_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3708      	adds	r7, #8
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b082      	sub	sp, #8
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007e5e:	78fb      	ldrb	r3, [r7, #3]
 8007e60:	4619      	mov	r1, r3
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 fa72 	bl	800834c <USBH_LL_ClosePipe>

  return USBH_OK;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3708      	adds	r7, #8
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007e72:	b580      	push	{r7, lr}
 8007e74:	b084      	sub	sp, #16
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 f836 	bl	8007ef0 <USBH_GetFreePipe>
 8007e84:	4603      	mov	r3, r0
 8007e86:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007e88:	89fb      	ldrh	r3, [r7, #14]
 8007e8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d00a      	beq.n	8007ea8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007e92:	78fa      	ldrb	r2, [r7, #3]
 8007e94:	89fb      	ldrh	r3, [r7, #14]
 8007e96:	f003 030f 	and.w	r3, r3, #15
 8007e9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007e9e:	6879      	ldr	r1, [r7, #4]
 8007ea0:	33e0      	adds	r3, #224	@ 0xe0
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	440b      	add	r3, r1
 8007ea6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007ea8:	89fb      	ldrh	r3, [r7, #14]
 8007eaa:	b2db      	uxtb	r3, r3
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3710      	adds	r7, #16
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007ec0:	78fb      	ldrb	r3, [r7, #3]
 8007ec2:	2b0f      	cmp	r3, #15
 8007ec4:	d80d      	bhi.n	8007ee2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007ec6:	78fb      	ldrb	r3, [r7, #3]
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	33e0      	adds	r3, #224	@ 0xe0
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	4413      	add	r3, r2
 8007ed0:	685a      	ldr	r2, [r3, #4]
 8007ed2:	78fb      	ldrb	r3, [r7, #3]
 8007ed4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007ed8:	6879      	ldr	r1, [r7, #4]
 8007eda:	33e0      	adds	r3, #224	@ 0xe0
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	440b      	add	r3, r1
 8007ee0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b085      	sub	sp, #20
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8007efc:	2300      	movs	r3, #0
 8007efe:	73fb      	strb	r3, [r7, #15]
 8007f00:	e00f      	b.n	8007f22 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007f02:	7bfb      	ldrb	r3, [r7, #15]
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	33e0      	adds	r3, #224	@ 0xe0
 8007f08:	009b      	lsls	r3, r3, #2
 8007f0a:	4413      	add	r3, r2
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d102      	bne.n	8007f1c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007f16:	7bfb      	ldrb	r3, [r7, #15]
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	e007      	b.n	8007f2c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8007f1c:	7bfb      	ldrb	r3, [r7, #15]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	73fb      	strb	r3, [r7, #15]
 8007f22:	7bfb      	ldrb	r3, [r7, #15]
 8007f24:	2b0f      	cmp	r3, #15
 8007f26:	d9ec      	bls.n	8007f02 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007f28:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3714      	adds	r7, #20
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	490e      	ldr	r1, [pc, #56]	@ (8007f78 <MX_USB_HOST_Init+0x40>)
 8007f40:	480e      	ldr	r0, [pc, #56]	@ (8007f7c <MX_USB_HOST_Init+0x44>)
 8007f42:	f7fe fb15 	bl	8006570 <USBH_Init>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d001      	beq.n	8007f50 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007f4c:	f7f9 f94a 	bl	80011e4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007f50:	490b      	ldr	r1, [pc, #44]	@ (8007f80 <MX_USB_HOST_Init+0x48>)
 8007f52:	480a      	ldr	r0, [pc, #40]	@ (8007f7c <MX_USB_HOST_Init+0x44>)
 8007f54:	f7fe fbb9 	bl	80066ca <USBH_RegisterClass>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d001      	beq.n	8007f62 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007f5e:	f7f9 f941 	bl	80011e4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007f62:	4806      	ldr	r0, [pc, #24]	@ (8007f7c <MX_USB_HOST_Init+0x44>)
 8007f64:	f7fe fc3d 	bl	80067e2 <USBH_Start>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d001      	beq.n	8007f72 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007f6e:	f7f9 f939 	bl	80011e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007f72:	bf00      	nop
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	08007f99 	.word	0x08007f99
 8007f7c:	20000110 	.word	0x20000110
 8007f80:	20000010 	.word	0x20000010

08007f84 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007f88:	4802      	ldr	r0, [pc, #8]	@ (8007f94 <MX_USB_HOST_Process+0x10>)
 8007f8a:	f7fe fc3b 	bl	8006804 <USBH_Process>
}
 8007f8e:	bf00      	nop
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop
 8007f94:	20000110 	.word	0x20000110

08007f98 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007fa4:	78fb      	ldrb	r3, [r7, #3]
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	2b04      	cmp	r3, #4
 8007faa:	d819      	bhi.n	8007fe0 <USBH_UserProcess+0x48>
 8007fac:	a201      	add	r2, pc, #4	@ (adr r2, 8007fb4 <USBH_UserProcess+0x1c>)
 8007fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb2:	bf00      	nop
 8007fb4:	08007fe1 	.word	0x08007fe1
 8007fb8:	08007fd1 	.word	0x08007fd1
 8007fbc:	08007fe1 	.word	0x08007fe1
 8007fc0:	08007fd9 	.word	0x08007fd9
 8007fc4:	08007fc9 	.word	0x08007fc9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007fc8:	4b09      	ldr	r3, [pc, #36]	@ (8007ff0 <USBH_UserProcess+0x58>)
 8007fca:	2203      	movs	r2, #3
 8007fcc:	701a      	strb	r2, [r3, #0]
  break;
 8007fce:	e008      	b.n	8007fe2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007fd0:	4b07      	ldr	r3, [pc, #28]	@ (8007ff0 <USBH_UserProcess+0x58>)
 8007fd2:	2202      	movs	r2, #2
 8007fd4:	701a      	strb	r2, [r3, #0]
  break;
 8007fd6:	e004      	b.n	8007fe2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007fd8:	4b05      	ldr	r3, [pc, #20]	@ (8007ff0 <USBH_UserProcess+0x58>)
 8007fda:	2201      	movs	r2, #1
 8007fdc:	701a      	strb	r2, [r3, #0]
  break;
 8007fde:	e000      	b.n	8007fe2 <USBH_UserProcess+0x4a>

  default:
  break;
 8007fe0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007fe2:	bf00      	nop
 8007fe4:	370c      	adds	r7, #12
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop
 8007ff0:	200004e8 	.word	0x200004e8

08007ff4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b08a      	sub	sp, #40	@ 0x28
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ffc:	f107 0314 	add.w	r3, r7, #20
 8008000:	2200      	movs	r2, #0
 8008002:	601a      	str	r2, [r3, #0]
 8008004:	605a      	str	r2, [r3, #4]
 8008006:	609a      	str	r2, [r3, #8]
 8008008:	60da      	str	r2, [r3, #12]
 800800a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008014:	d147      	bne.n	80080a6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008016:	2300      	movs	r3, #0
 8008018:	613b      	str	r3, [r7, #16]
 800801a:	4b25      	ldr	r3, [pc, #148]	@ (80080b0 <HAL_HCD_MspInit+0xbc>)
 800801c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800801e:	4a24      	ldr	r2, [pc, #144]	@ (80080b0 <HAL_HCD_MspInit+0xbc>)
 8008020:	f043 0301 	orr.w	r3, r3, #1
 8008024:	6313      	str	r3, [r2, #48]	@ 0x30
 8008026:	4b22      	ldr	r3, [pc, #136]	@ (80080b0 <HAL_HCD_MspInit+0xbc>)
 8008028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800802a:	f003 0301 	and.w	r3, r3, #1
 800802e:	613b      	str	r3, [r7, #16]
 8008030:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008032:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008038:	2300      	movs	r3, #0
 800803a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800803c:	2300      	movs	r3, #0
 800803e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008040:	f107 0314 	add.w	r3, r7, #20
 8008044:	4619      	mov	r1, r3
 8008046:	481b      	ldr	r0, [pc, #108]	@ (80080b4 <HAL_HCD_MspInit+0xc0>)
 8008048:	f7f9 fcd6 	bl	80019f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800804c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008052:	2302      	movs	r3, #2
 8008054:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008056:	2300      	movs	r3, #0
 8008058:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800805a:	2300      	movs	r3, #0
 800805c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800805e:	230a      	movs	r3, #10
 8008060:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008062:	f107 0314 	add.w	r3, r7, #20
 8008066:	4619      	mov	r1, r3
 8008068:	4812      	ldr	r0, [pc, #72]	@ (80080b4 <HAL_HCD_MspInit+0xc0>)
 800806a:	f7f9 fcc5 	bl	80019f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800806e:	4b10      	ldr	r3, [pc, #64]	@ (80080b0 <HAL_HCD_MspInit+0xbc>)
 8008070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008072:	4a0f      	ldr	r2, [pc, #60]	@ (80080b0 <HAL_HCD_MspInit+0xbc>)
 8008074:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008078:	6353      	str	r3, [r2, #52]	@ 0x34
 800807a:	2300      	movs	r3, #0
 800807c:	60fb      	str	r3, [r7, #12]
 800807e:	4b0c      	ldr	r3, [pc, #48]	@ (80080b0 <HAL_HCD_MspInit+0xbc>)
 8008080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008082:	4a0b      	ldr	r2, [pc, #44]	@ (80080b0 <HAL_HCD_MspInit+0xbc>)
 8008084:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008088:	6453      	str	r3, [r2, #68]	@ 0x44
 800808a:	4b09      	ldr	r3, [pc, #36]	@ (80080b0 <HAL_HCD_MspInit+0xbc>)
 800808c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800808e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008092:	60fb      	str	r3, [r7, #12]
 8008094:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008096:	2200      	movs	r2, #0
 8008098:	2100      	movs	r1, #0
 800809a:	2043      	movs	r0, #67	@ 0x43
 800809c:	f7f9 fb79 	bl	8001792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80080a0:	2043      	movs	r0, #67	@ 0x43
 80080a2:	f7f9 fb92 	bl	80017ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80080a6:	bf00      	nop
 80080a8:	3728      	adds	r7, #40	@ 0x28
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop
 80080b0:	40023800 	.word	0x40023800
 80080b4:	40020000 	.word	0x40020000

080080b8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7fe ff73 	bl	8006fb2 <USBH_LL_IncTimer>
}
 80080cc:	bf00      	nop
 80080ce:	3708      	adds	r7, #8
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80080e2:	4618      	mov	r0, r3
 80080e4:	f7fe ffab 	bl	800703e <USBH_LL_Connect>
}
 80080e8:	bf00      	nop
 80080ea:	3708      	adds	r7, #8
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80080fe:	4618      	mov	r0, r3
 8008100:	f7fe ffb4 	bl	800706c <USBH_LL_Disconnect>
}
 8008104:	bf00      	nop
 8008106:	3708      	adds	r7, #8
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	460b      	mov	r3, r1
 8008116:	70fb      	strb	r3, [r7, #3]
 8008118:	4613      	mov	r3, r2
 800811a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800811c:	bf00      	nop
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008136:	4618      	mov	r0, r3
 8008138:	f7fe ff65 	bl	8007006 <USBH_LL_PortEnabled>
}
 800813c:	bf00      	nop
 800813e:	3708      	adds	r7, #8
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008152:	4618      	mov	r0, r3
 8008154:	f7fe ff65 	bl	8007022 <USBH_LL_PortDisabled>
}
 8008158:	bf00      	nop
 800815a:	3708      	adds	r7, #8
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800816e:	2b01      	cmp	r3, #1
 8008170:	d12a      	bne.n	80081c8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008172:	4a18      	ldr	r2, [pc, #96]	@ (80081d4 <USBH_LL_Init+0x74>)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4a15      	ldr	r2, [pc, #84]	@ (80081d4 <USBH_LL_Init+0x74>)
 800817e:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008182:	4b14      	ldr	r3, [pc, #80]	@ (80081d4 <USBH_LL_Init+0x74>)
 8008184:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008188:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800818a:	4b12      	ldr	r3, [pc, #72]	@ (80081d4 <USBH_LL_Init+0x74>)
 800818c:	2208      	movs	r2, #8
 800818e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008190:	4b10      	ldr	r3, [pc, #64]	@ (80081d4 <USBH_LL_Init+0x74>)
 8008192:	2201      	movs	r2, #1
 8008194:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008196:	4b0f      	ldr	r3, [pc, #60]	@ (80081d4 <USBH_LL_Init+0x74>)
 8008198:	2200      	movs	r2, #0
 800819a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800819c:	4b0d      	ldr	r3, [pc, #52]	@ (80081d4 <USBH_LL_Init+0x74>)
 800819e:	2202      	movs	r2, #2
 80081a0:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80081a2:	4b0c      	ldr	r3, [pc, #48]	@ (80081d4 <USBH_LL_Init+0x74>)
 80081a4:	2200      	movs	r2, #0
 80081a6:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80081a8:	480a      	ldr	r0, [pc, #40]	@ (80081d4 <USBH_LL_Init+0x74>)
 80081aa:	f7f9 fdda 	bl	8001d62 <HAL_HCD_Init>
 80081ae:	4603      	mov	r3, r0
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d001      	beq.n	80081b8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80081b4:	f7f9 f816 	bl	80011e4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80081b8:	4806      	ldr	r0, [pc, #24]	@ (80081d4 <USBH_LL_Init+0x74>)
 80081ba:	f7fa fa3b 	bl	8002634 <HAL_HCD_GetCurrentFrame>
 80081be:	4603      	mov	r3, r0
 80081c0:	4619      	mov	r1, r3
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f7fe fee6 	bl	8006f94 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80081c8:	2300      	movs	r3, #0
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3708      	adds	r7, #8
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	200004ec 	.word	0x200004ec

080081d8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081e0:	2300      	movs	r3, #0
 80081e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081e4:	2300      	movs	r3, #0
 80081e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80081ee:	4618      	mov	r0, r3
 80081f0:	f7fa f9a8 	bl	8002544 <HAL_HCD_Start>
 80081f4:	4603      	mov	r3, r0
 80081f6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80081f8:	7bfb      	ldrb	r3, [r7, #15]
 80081fa:	4618      	mov	r0, r3
 80081fc:	f000 f95e 	bl	80084bc <USBH_Get_USB_Status>
 8008200:	4603      	mov	r3, r0
 8008202:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008204:	7bbb      	ldrb	r3, [r7, #14]
}
 8008206:	4618      	mov	r0, r3
 8008208:	3710      	adds	r7, #16
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800820e:	b580      	push	{r7, lr}
 8008210:	b084      	sub	sp, #16
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008216:	2300      	movs	r3, #0
 8008218:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800821a:	2300      	movs	r3, #0
 800821c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008224:	4618      	mov	r0, r3
 8008226:	f7fa f9b0 	bl	800258a <HAL_HCD_Stop>
 800822a:	4603      	mov	r3, r0
 800822c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800822e:	7bfb      	ldrb	r3, [r7, #15]
 8008230:	4618      	mov	r0, r3
 8008232:	f000 f943 	bl	80084bc <USBH_Get_USB_Status>
 8008236:	4603      	mov	r3, r0
 8008238:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800823a:	7bbb      	ldrb	r3, [r7, #14]
}
 800823c:	4618      	mov	r0, r3
 800823e:	3710      	adds	r7, #16
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800824c:	2301      	movs	r3, #1
 800824e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008256:	4618      	mov	r0, r3
 8008258:	f7fa f9fa 	bl	8002650 <HAL_HCD_GetCurrentSpeed>
 800825c:	4603      	mov	r3, r0
 800825e:	2b02      	cmp	r3, #2
 8008260:	d00c      	beq.n	800827c <USBH_LL_GetSpeed+0x38>
 8008262:	2b02      	cmp	r3, #2
 8008264:	d80d      	bhi.n	8008282 <USBH_LL_GetSpeed+0x3e>
 8008266:	2b00      	cmp	r3, #0
 8008268:	d002      	beq.n	8008270 <USBH_LL_GetSpeed+0x2c>
 800826a:	2b01      	cmp	r3, #1
 800826c:	d003      	beq.n	8008276 <USBH_LL_GetSpeed+0x32>
 800826e:	e008      	b.n	8008282 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008270:	2300      	movs	r3, #0
 8008272:	73fb      	strb	r3, [r7, #15]
    break;
 8008274:	e008      	b.n	8008288 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008276:	2301      	movs	r3, #1
 8008278:	73fb      	strb	r3, [r7, #15]
    break;
 800827a:	e005      	b.n	8008288 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800827c:	2302      	movs	r3, #2
 800827e:	73fb      	strb	r3, [r7, #15]
    break;
 8008280:	e002      	b.n	8008288 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008282:	2301      	movs	r3, #1
 8008284:	73fb      	strb	r3, [r7, #15]
    break;
 8008286:	bf00      	nop
  }
  return  speed;
 8008288:	7bfb      	ldrb	r3, [r7, #15]
}
 800828a:	4618      	mov	r0, r3
 800828c:	3710      	adds	r7, #16
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}

08008292 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008292:	b580      	push	{r7, lr}
 8008294:	b084      	sub	sp, #16
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800829a:	2300      	movs	r3, #0
 800829c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800829e:	2300      	movs	r3, #0
 80082a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80082a8:	4618      	mov	r0, r3
 80082aa:	f7fa f98b 	bl	80025c4 <HAL_HCD_ResetPort>
 80082ae:	4603      	mov	r3, r0
 80082b0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80082b2:	7bfb      	ldrb	r3, [r7, #15]
 80082b4:	4618      	mov	r0, r3
 80082b6:	f000 f901 	bl	80084bc <USBH_Get_USB_Status>
 80082ba:	4603      	mov	r3, r0
 80082bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082be:	7bbb      	ldrb	r3, [r7, #14]
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3710      	adds	r7, #16
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	460b      	mov	r3, r1
 80082d2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80082da:	78fa      	ldrb	r2, [r7, #3]
 80082dc:	4611      	mov	r1, r2
 80082de:	4618      	mov	r0, r3
 80082e0:	f7fa f993 	bl	800260a <HAL_HCD_HC_GetXferCount>
 80082e4:	4603      	mov	r3, r0
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3708      	adds	r7, #8
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}

080082ee <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80082ee:	b590      	push	{r4, r7, lr}
 80082f0:	b089      	sub	sp, #36	@ 0x24
 80082f2:	af04      	add	r7, sp, #16
 80082f4:	6078      	str	r0, [r7, #4]
 80082f6:	4608      	mov	r0, r1
 80082f8:	4611      	mov	r1, r2
 80082fa:	461a      	mov	r2, r3
 80082fc:	4603      	mov	r3, r0
 80082fe:	70fb      	strb	r3, [r7, #3]
 8008300:	460b      	mov	r3, r1
 8008302:	70bb      	strb	r3, [r7, #2]
 8008304:	4613      	mov	r3, r2
 8008306:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008308:	2300      	movs	r3, #0
 800830a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800830c:	2300      	movs	r3, #0
 800830e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8008316:	787c      	ldrb	r4, [r7, #1]
 8008318:	78ba      	ldrb	r2, [r7, #2]
 800831a:	78f9      	ldrb	r1, [r7, #3]
 800831c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800831e:	9302      	str	r3, [sp, #8]
 8008320:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008324:	9301      	str	r3, [sp, #4]
 8008326:	f897 3020 	ldrb.w	r3, [r7, #32]
 800832a:	9300      	str	r3, [sp, #0]
 800832c:	4623      	mov	r3, r4
 800832e:	f7f9 fd7f 	bl	8001e30 <HAL_HCD_HC_Init>
 8008332:	4603      	mov	r3, r0
 8008334:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008336:	7bfb      	ldrb	r3, [r7, #15]
 8008338:	4618      	mov	r0, r3
 800833a:	f000 f8bf 	bl	80084bc <USBH_Get_USB_Status>
 800833e:	4603      	mov	r3, r0
 8008340:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008342:	7bbb      	ldrb	r3, [r7, #14]
}
 8008344:	4618      	mov	r0, r3
 8008346:	3714      	adds	r7, #20
 8008348:	46bd      	mov	sp, r7
 800834a:	bd90      	pop	{r4, r7, pc}

0800834c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	460b      	mov	r3, r1
 8008356:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008358:	2300      	movs	r3, #0
 800835a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800835c:	2300      	movs	r3, #0
 800835e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008366:	78fa      	ldrb	r2, [r7, #3]
 8008368:	4611      	mov	r1, r2
 800836a:	4618      	mov	r0, r3
 800836c:	f7f9 fe18 	bl	8001fa0 <HAL_HCD_HC_Halt>
 8008370:	4603      	mov	r3, r0
 8008372:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008374:	7bfb      	ldrb	r3, [r7, #15]
 8008376:	4618      	mov	r0, r3
 8008378:	f000 f8a0 	bl	80084bc <USBH_Get_USB_Status>
 800837c:	4603      	mov	r3, r0
 800837e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008380:	7bbb      	ldrb	r3, [r7, #14]
}
 8008382:	4618      	mov	r0, r3
 8008384:	3710      	adds	r7, #16
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}

0800838a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800838a:	b590      	push	{r4, r7, lr}
 800838c:	b089      	sub	sp, #36	@ 0x24
 800838e:	af04      	add	r7, sp, #16
 8008390:	6078      	str	r0, [r7, #4]
 8008392:	4608      	mov	r0, r1
 8008394:	4611      	mov	r1, r2
 8008396:	461a      	mov	r2, r3
 8008398:	4603      	mov	r3, r0
 800839a:	70fb      	strb	r3, [r7, #3]
 800839c:	460b      	mov	r3, r1
 800839e:	70bb      	strb	r3, [r7, #2]
 80083a0:	4613      	mov	r3, r2
 80083a2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083a4:	2300      	movs	r3, #0
 80083a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80083a8:	2300      	movs	r3, #0
 80083aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80083b2:	787c      	ldrb	r4, [r7, #1]
 80083b4:	78ba      	ldrb	r2, [r7, #2]
 80083b6:	78f9      	ldrb	r1, [r7, #3]
 80083b8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80083bc:	9303      	str	r3, [sp, #12]
 80083be:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80083c0:	9302      	str	r3, [sp, #8]
 80083c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c4:	9301      	str	r3, [sp, #4]
 80083c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80083ca:	9300      	str	r3, [sp, #0]
 80083cc:	4623      	mov	r3, r4
 80083ce:	f7f9 fe0b 	bl	8001fe8 <HAL_HCD_HC_SubmitRequest>
 80083d2:	4603      	mov	r3, r0
 80083d4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80083d6:	7bfb      	ldrb	r3, [r7, #15]
 80083d8:	4618      	mov	r0, r3
 80083da:	f000 f86f 	bl	80084bc <USBH_Get_USB_Status>
 80083de:	4603      	mov	r3, r0
 80083e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3714      	adds	r7, #20
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd90      	pop	{r4, r7, pc}

080083ec <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	460b      	mov	r3, r1
 80083f6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80083fe:	78fa      	ldrb	r2, [r7, #3]
 8008400:	4611      	mov	r1, r2
 8008402:	4618      	mov	r0, r3
 8008404:	f7fa f8ec 	bl	80025e0 <HAL_HCD_HC_GetURBState>
 8008408:	4603      	mov	r3, r0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3708      	adds	r7, #8
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008412:	b580      	push	{r7, lr}
 8008414:	b082      	sub	sp, #8
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
 800841a:	460b      	mov	r3, r1
 800841c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008424:	2b01      	cmp	r3, #1
 8008426:	d103      	bne.n	8008430 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008428:	78fb      	ldrb	r3, [r7, #3]
 800842a:	4618      	mov	r0, r3
 800842c:	f000 f872 	bl	8008514 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008430:	20c8      	movs	r0, #200	@ 0xc8
 8008432:	f7f9 f8af 	bl	8001594 <HAL_Delay>
  return USBH_OK;
 8008436:	2300      	movs	r3, #0
}
 8008438:	4618      	mov	r0, r3
 800843a:	3708      	adds	r7, #8
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008440:	b480      	push	{r7}
 8008442:	b085      	sub	sp, #20
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	460b      	mov	r3, r1
 800844a:	70fb      	strb	r3, [r7, #3]
 800844c:	4613      	mov	r3, r2
 800844e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008456:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008458:	78fa      	ldrb	r2, [r7, #3]
 800845a:	68f9      	ldr	r1, [r7, #12]
 800845c:	4613      	mov	r3, r2
 800845e:	011b      	lsls	r3, r3, #4
 8008460:	1a9b      	subs	r3, r3, r2
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	440b      	add	r3, r1
 8008466:	3317      	adds	r3, #23
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d00a      	beq.n	8008484 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800846e:	78fa      	ldrb	r2, [r7, #3]
 8008470:	68f9      	ldr	r1, [r7, #12]
 8008472:	4613      	mov	r3, r2
 8008474:	011b      	lsls	r3, r3, #4
 8008476:	1a9b      	subs	r3, r3, r2
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	440b      	add	r3, r1
 800847c:	333c      	adds	r3, #60	@ 0x3c
 800847e:	78ba      	ldrb	r2, [r7, #2]
 8008480:	701a      	strb	r2, [r3, #0]
 8008482:	e009      	b.n	8008498 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008484:	78fa      	ldrb	r2, [r7, #3]
 8008486:	68f9      	ldr	r1, [r7, #12]
 8008488:	4613      	mov	r3, r2
 800848a:	011b      	lsls	r3, r3, #4
 800848c:	1a9b      	subs	r3, r3, r2
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	440b      	add	r3, r1
 8008492:	333d      	adds	r3, #61	@ 0x3d
 8008494:	78ba      	ldrb	r2, [r7, #2]
 8008496:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008498:	2300      	movs	r3, #0
}
 800849a:	4618      	mov	r0, r3
 800849c:	3714      	adds	r7, #20
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr

080084a6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b082      	sub	sp, #8
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f7f9 f870 	bl	8001594 <HAL_Delay>
}
 80084b4:	bf00      	nop
 80084b6:	3708      	adds	r7, #8
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80084bc:	b480      	push	{r7}
 80084be:	b085      	sub	sp, #20
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	4603      	mov	r3, r0
 80084c4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80084c6:	2300      	movs	r3, #0
 80084c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80084ca:	79fb      	ldrb	r3, [r7, #7]
 80084cc:	2b03      	cmp	r3, #3
 80084ce:	d817      	bhi.n	8008500 <USBH_Get_USB_Status+0x44>
 80084d0:	a201      	add	r2, pc, #4	@ (adr r2, 80084d8 <USBH_Get_USB_Status+0x1c>)
 80084d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d6:	bf00      	nop
 80084d8:	080084e9 	.word	0x080084e9
 80084dc:	080084ef 	.word	0x080084ef
 80084e0:	080084f5 	.word	0x080084f5
 80084e4:	080084fb 	.word	0x080084fb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80084e8:	2300      	movs	r3, #0
 80084ea:	73fb      	strb	r3, [r7, #15]
    break;
 80084ec:	e00b      	b.n	8008506 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80084ee:	2302      	movs	r3, #2
 80084f0:	73fb      	strb	r3, [r7, #15]
    break;
 80084f2:	e008      	b.n	8008506 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80084f4:	2301      	movs	r3, #1
 80084f6:	73fb      	strb	r3, [r7, #15]
    break;
 80084f8:	e005      	b.n	8008506 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80084fa:	2302      	movs	r3, #2
 80084fc:	73fb      	strb	r3, [r7, #15]
    break;
 80084fe:	e002      	b.n	8008506 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008500:	2302      	movs	r3, #2
 8008502:	73fb      	strb	r3, [r7, #15]
    break;
 8008504:	bf00      	nop
  }
  return usb_status;
 8008506:	7bfb      	ldrb	r3, [r7, #15]
}
 8008508:	4618      	mov	r0, r3
 800850a:	3714      	adds	r7, #20
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b084      	sub	sp, #16
 8008518:	af00      	add	r7, sp, #0
 800851a:	4603      	mov	r3, r0
 800851c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800851e:	79fb      	ldrb	r3, [r7, #7]
 8008520:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008522:	79fb      	ldrb	r3, [r7, #7]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d102      	bne.n	800852e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008528:	2300      	movs	r3, #0
 800852a:	73fb      	strb	r3, [r7, #15]
 800852c:	e001      	b.n	8008532 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800852e:	2301      	movs	r3, #1
 8008530:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008532:	7bfb      	ldrb	r3, [r7, #15]
 8008534:	461a      	mov	r2, r3
 8008536:	2101      	movs	r1, #1
 8008538:	4803      	ldr	r0, [pc, #12]	@ (8008548 <MX_DriverVbusFS+0x34>)
 800853a:	f7f9 fbf9 	bl	8001d30 <HAL_GPIO_WritePin>
}
 800853e:	bf00      	nop
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	40020800 	.word	0x40020800

0800854c <malloc>:
 800854c:	4b02      	ldr	r3, [pc, #8]	@ (8008558 <malloc+0xc>)
 800854e:	4601      	mov	r1, r0
 8008550:	6818      	ldr	r0, [r3, #0]
 8008552:	f000 b82d 	b.w	80085b0 <_malloc_r>
 8008556:	bf00      	nop
 8008558:	20000030 	.word	0x20000030

0800855c <free>:
 800855c:	4b02      	ldr	r3, [pc, #8]	@ (8008568 <free+0xc>)
 800855e:	4601      	mov	r1, r0
 8008560:	6818      	ldr	r0, [r3, #0]
 8008562:	f000 b8f5 	b.w	8008750 <_free_r>
 8008566:	bf00      	nop
 8008568:	20000030 	.word	0x20000030

0800856c <sbrk_aligned>:
 800856c:	b570      	push	{r4, r5, r6, lr}
 800856e:	4e0f      	ldr	r6, [pc, #60]	@ (80085ac <sbrk_aligned+0x40>)
 8008570:	460c      	mov	r4, r1
 8008572:	6831      	ldr	r1, [r6, #0]
 8008574:	4605      	mov	r5, r0
 8008576:	b911      	cbnz	r1, 800857e <sbrk_aligned+0x12>
 8008578:	f000 f8ae 	bl	80086d8 <_sbrk_r>
 800857c:	6030      	str	r0, [r6, #0]
 800857e:	4621      	mov	r1, r4
 8008580:	4628      	mov	r0, r5
 8008582:	f000 f8a9 	bl	80086d8 <_sbrk_r>
 8008586:	1c43      	adds	r3, r0, #1
 8008588:	d103      	bne.n	8008592 <sbrk_aligned+0x26>
 800858a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800858e:	4620      	mov	r0, r4
 8008590:	bd70      	pop	{r4, r5, r6, pc}
 8008592:	1cc4      	adds	r4, r0, #3
 8008594:	f024 0403 	bic.w	r4, r4, #3
 8008598:	42a0      	cmp	r0, r4
 800859a:	d0f8      	beq.n	800858e <sbrk_aligned+0x22>
 800859c:	1a21      	subs	r1, r4, r0
 800859e:	4628      	mov	r0, r5
 80085a0:	f000 f89a 	bl	80086d8 <_sbrk_r>
 80085a4:	3001      	adds	r0, #1
 80085a6:	d1f2      	bne.n	800858e <sbrk_aligned+0x22>
 80085a8:	e7ef      	b.n	800858a <sbrk_aligned+0x1e>
 80085aa:	bf00      	nop
 80085ac:	200008cc 	.word	0x200008cc

080085b0 <_malloc_r>:
 80085b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085b4:	1ccd      	adds	r5, r1, #3
 80085b6:	f025 0503 	bic.w	r5, r5, #3
 80085ba:	3508      	adds	r5, #8
 80085bc:	2d0c      	cmp	r5, #12
 80085be:	bf38      	it	cc
 80085c0:	250c      	movcc	r5, #12
 80085c2:	2d00      	cmp	r5, #0
 80085c4:	4606      	mov	r6, r0
 80085c6:	db01      	blt.n	80085cc <_malloc_r+0x1c>
 80085c8:	42a9      	cmp	r1, r5
 80085ca:	d904      	bls.n	80085d6 <_malloc_r+0x26>
 80085cc:	230c      	movs	r3, #12
 80085ce:	6033      	str	r3, [r6, #0]
 80085d0:	2000      	movs	r0, #0
 80085d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80086ac <_malloc_r+0xfc>
 80085da:	f000 f869 	bl	80086b0 <__malloc_lock>
 80085de:	f8d8 3000 	ldr.w	r3, [r8]
 80085e2:	461c      	mov	r4, r3
 80085e4:	bb44      	cbnz	r4, 8008638 <_malloc_r+0x88>
 80085e6:	4629      	mov	r1, r5
 80085e8:	4630      	mov	r0, r6
 80085ea:	f7ff ffbf 	bl	800856c <sbrk_aligned>
 80085ee:	1c43      	adds	r3, r0, #1
 80085f0:	4604      	mov	r4, r0
 80085f2:	d158      	bne.n	80086a6 <_malloc_r+0xf6>
 80085f4:	f8d8 4000 	ldr.w	r4, [r8]
 80085f8:	4627      	mov	r7, r4
 80085fa:	2f00      	cmp	r7, #0
 80085fc:	d143      	bne.n	8008686 <_malloc_r+0xd6>
 80085fe:	2c00      	cmp	r4, #0
 8008600:	d04b      	beq.n	800869a <_malloc_r+0xea>
 8008602:	6823      	ldr	r3, [r4, #0]
 8008604:	4639      	mov	r1, r7
 8008606:	4630      	mov	r0, r6
 8008608:	eb04 0903 	add.w	r9, r4, r3
 800860c:	f000 f864 	bl	80086d8 <_sbrk_r>
 8008610:	4581      	cmp	r9, r0
 8008612:	d142      	bne.n	800869a <_malloc_r+0xea>
 8008614:	6821      	ldr	r1, [r4, #0]
 8008616:	1a6d      	subs	r5, r5, r1
 8008618:	4629      	mov	r1, r5
 800861a:	4630      	mov	r0, r6
 800861c:	f7ff ffa6 	bl	800856c <sbrk_aligned>
 8008620:	3001      	adds	r0, #1
 8008622:	d03a      	beq.n	800869a <_malloc_r+0xea>
 8008624:	6823      	ldr	r3, [r4, #0]
 8008626:	442b      	add	r3, r5
 8008628:	6023      	str	r3, [r4, #0]
 800862a:	f8d8 3000 	ldr.w	r3, [r8]
 800862e:	685a      	ldr	r2, [r3, #4]
 8008630:	bb62      	cbnz	r2, 800868c <_malloc_r+0xdc>
 8008632:	f8c8 7000 	str.w	r7, [r8]
 8008636:	e00f      	b.n	8008658 <_malloc_r+0xa8>
 8008638:	6822      	ldr	r2, [r4, #0]
 800863a:	1b52      	subs	r2, r2, r5
 800863c:	d420      	bmi.n	8008680 <_malloc_r+0xd0>
 800863e:	2a0b      	cmp	r2, #11
 8008640:	d917      	bls.n	8008672 <_malloc_r+0xc2>
 8008642:	1961      	adds	r1, r4, r5
 8008644:	42a3      	cmp	r3, r4
 8008646:	6025      	str	r5, [r4, #0]
 8008648:	bf18      	it	ne
 800864a:	6059      	strne	r1, [r3, #4]
 800864c:	6863      	ldr	r3, [r4, #4]
 800864e:	bf08      	it	eq
 8008650:	f8c8 1000 	streq.w	r1, [r8]
 8008654:	5162      	str	r2, [r4, r5]
 8008656:	604b      	str	r3, [r1, #4]
 8008658:	4630      	mov	r0, r6
 800865a:	f000 f82f 	bl	80086bc <__malloc_unlock>
 800865e:	f104 000b 	add.w	r0, r4, #11
 8008662:	1d23      	adds	r3, r4, #4
 8008664:	f020 0007 	bic.w	r0, r0, #7
 8008668:	1ac2      	subs	r2, r0, r3
 800866a:	bf1c      	itt	ne
 800866c:	1a1b      	subne	r3, r3, r0
 800866e:	50a3      	strne	r3, [r4, r2]
 8008670:	e7af      	b.n	80085d2 <_malloc_r+0x22>
 8008672:	6862      	ldr	r2, [r4, #4]
 8008674:	42a3      	cmp	r3, r4
 8008676:	bf0c      	ite	eq
 8008678:	f8c8 2000 	streq.w	r2, [r8]
 800867c:	605a      	strne	r2, [r3, #4]
 800867e:	e7eb      	b.n	8008658 <_malloc_r+0xa8>
 8008680:	4623      	mov	r3, r4
 8008682:	6864      	ldr	r4, [r4, #4]
 8008684:	e7ae      	b.n	80085e4 <_malloc_r+0x34>
 8008686:	463c      	mov	r4, r7
 8008688:	687f      	ldr	r7, [r7, #4]
 800868a:	e7b6      	b.n	80085fa <_malloc_r+0x4a>
 800868c:	461a      	mov	r2, r3
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	42a3      	cmp	r3, r4
 8008692:	d1fb      	bne.n	800868c <_malloc_r+0xdc>
 8008694:	2300      	movs	r3, #0
 8008696:	6053      	str	r3, [r2, #4]
 8008698:	e7de      	b.n	8008658 <_malloc_r+0xa8>
 800869a:	230c      	movs	r3, #12
 800869c:	6033      	str	r3, [r6, #0]
 800869e:	4630      	mov	r0, r6
 80086a0:	f000 f80c 	bl	80086bc <__malloc_unlock>
 80086a4:	e794      	b.n	80085d0 <_malloc_r+0x20>
 80086a6:	6005      	str	r5, [r0, #0]
 80086a8:	e7d6      	b.n	8008658 <_malloc_r+0xa8>
 80086aa:	bf00      	nop
 80086ac:	200008d0 	.word	0x200008d0

080086b0 <__malloc_lock>:
 80086b0:	4801      	ldr	r0, [pc, #4]	@ (80086b8 <__malloc_lock+0x8>)
 80086b2:	f000 b84b 	b.w	800874c <__retarget_lock_acquire_recursive>
 80086b6:	bf00      	nop
 80086b8:	20000a0c 	.word	0x20000a0c

080086bc <__malloc_unlock>:
 80086bc:	4801      	ldr	r0, [pc, #4]	@ (80086c4 <__malloc_unlock+0x8>)
 80086be:	f000 b846 	b.w	800874e <__retarget_lock_release_recursive>
 80086c2:	bf00      	nop
 80086c4:	20000a0c 	.word	0x20000a0c

080086c8 <memset>:
 80086c8:	4402      	add	r2, r0
 80086ca:	4603      	mov	r3, r0
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d100      	bne.n	80086d2 <memset+0xa>
 80086d0:	4770      	bx	lr
 80086d2:	f803 1b01 	strb.w	r1, [r3], #1
 80086d6:	e7f9      	b.n	80086cc <memset+0x4>

080086d8 <_sbrk_r>:
 80086d8:	b538      	push	{r3, r4, r5, lr}
 80086da:	4d06      	ldr	r5, [pc, #24]	@ (80086f4 <_sbrk_r+0x1c>)
 80086dc:	2300      	movs	r3, #0
 80086de:	4604      	mov	r4, r0
 80086e0:	4608      	mov	r0, r1
 80086e2:	602b      	str	r3, [r5, #0]
 80086e4:	f7f8 fe72 	bl	80013cc <_sbrk>
 80086e8:	1c43      	adds	r3, r0, #1
 80086ea:	d102      	bne.n	80086f2 <_sbrk_r+0x1a>
 80086ec:	682b      	ldr	r3, [r5, #0]
 80086ee:	b103      	cbz	r3, 80086f2 <_sbrk_r+0x1a>
 80086f0:	6023      	str	r3, [r4, #0]
 80086f2:	bd38      	pop	{r3, r4, r5, pc}
 80086f4:	20000a10 	.word	0x20000a10

080086f8 <__errno>:
 80086f8:	4b01      	ldr	r3, [pc, #4]	@ (8008700 <__errno+0x8>)
 80086fa:	6818      	ldr	r0, [r3, #0]
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop
 8008700:	20000030 	.word	0x20000030

08008704 <__libc_init_array>:
 8008704:	b570      	push	{r4, r5, r6, lr}
 8008706:	4d0d      	ldr	r5, [pc, #52]	@ (800873c <__libc_init_array+0x38>)
 8008708:	4c0d      	ldr	r4, [pc, #52]	@ (8008740 <__libc_init_array+0x3c>)
 800870a:	1b64      	subs	r4, r4, r5
 800870c:	10a4      	asrs	r4, r4, #2
 800870e:	2600      	movs	r6, #0
 8008710:	42a6      	cmp	r6, r4
 8008712:	d109      	bne.n	8008728 <__libc_init_array+0x24>
 8008714:	4d0b      	ldr	r5, [pc, #44]	@ (8008744 <__libc_init_array+0x40>)
 8008716:	4c0c      	ldr	r4, [pc, #48]	@ (8008748 <__libc_init_array+0x44>)
 8008718:	f000 f864 	bl	80087e4 <_init>
 800871c:	1b64      	subs	r4, r4, r5
 800871e:	10a4      	asrs	r4, r4, #2
 8008720:	2600      	movs	r6, #0
 8008722:	42a6      	cmp	r6, r4
 8008724:	d105      	bne.n	8008732 <__libc_init_array+0x2e>
 8008726:	bd70      	pop	{r4, r5, r6, pc}
 8008728:	f855 3b04 	ldr.w	r3, [r5], #4
 800872c:	4798      	blx	r3
 800872e:	3601      	adds	r6, #1
 8008730:	e7ee      	b.n	8008710 <__libc_init_array+0xc>
 8008732:	f855 3b04 	ldr.w	r3, [r5], #4
 8008736:	4798      	blx	r3
 8008738:	3601      	adds	r6, #1
 800873a:	e7f2      	b.n	8008722 <__libc_init_array+0x1e>
 800873c:	08008820 	.word	0x08008820
 8008740:	08008820 	.word	0x08008820
 8008744:	08008820 	.word	0x08008820
 8008748:	08008824 	.word	0x08008824

0800874c <__retarget_lock_acquire_recursive>:
 800874c:	4770      	bx	lr

0800874e <__retarget_lock_release_recursive>:
 800874e:	4770      	bx	lr

08008750 <_free_r>:
 8008750:	b538      	push	{r3, r4, r5, lr}
 8008752:	4605      	mov	r5, r0
 8008754:	2900      	cmp	r1, #0
 8008756:	d041      	beq.n	80087dc <_free_r+0x8c>
 8008758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800875c:	1f0c      	subs	r4, r1, #4
 800875e:	2b00      	cmp	r3, #0
 8008760:	bfb8      	it	lt
 8008762:	18e4      	addlt	r4, r4, r3
 8008764:	f7ff ffa4 	bl	80086b0 <__malloc_lock>
 8008768:	4a1d      	ldr	r2, [pc, #116]	@ (80087e0 <_free_r+0x90>)
 800876a:	6813      	ldr	r3, [r2, #0]
 800876c:	b933      	cbnz	r3, 800877c <_free_r+0x2c>
 800876e:	6063      	str	r3, [r4, #4]
 8008770:	6014      	str	r4, [r2, #0]
 8008772:	4628      	mov	r0, r5
 8008774:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008778:	f7ff bfa0 	b.w	80086bc <__malloc_unlock>
 800877c:	42a3      	cmp	r3, r4
 800877e:	d908      	bls.n	8008792 <_free_r+0x42>
 8008780:	6820      	ldr	r0, [r4, #0]
 8008782:	1821      	adds	r1, r4, r0
 8008784:	428b      	cmp	r3, r1
 8008786:	bf01      	itttt	eq
 8008788:	6819      	ldreq	r1, [r3, #0]
 800878a:	685b      	ldreq	r3, [r3, #4]
 800878c:	1809      	addeq	r1, r1, r0
 800878e:	6021      	streq	r1, [r4, #0]
 8008790:	e7ed      	b.n	800876e <_free_r+0x1e>
 8008792:	461a      	mov	r2, r3
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	b10b      	cbz	r3, 800879c <_free_r+0x4c>
 8008798:	42a3      	cmp	r3, r4
 800879a:	d9fa      	bls.n	8008792 <_free_r+0x42>
 800879c:	6811      	ldr	r1, [r2, #0]
 800879e:	1850      	adds	r0, r2, r1
 80087a0:	42a0      	cmp	r0, r4
 80087a2:	d10b      	bne.n	80087bc <_free_r+0x6c>
 80087a4:	6820      	ldr	r0, [r4, #0]
 80087a6:	4401      	add	r1, r0
 80087a8:	1850      	adds	r0, r2, r1
 80087aa:	4283      	cmp	r3, r0
 80087ac:	6011      	str	r1, [r2, #0]
 80087ae:	d1e0      	bne.n	8008772 <_free_r+0x22>
 80087b0:	6818      	ldr	r0, [r3, #0]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	6053      	str	r3, [r2, #4]
 80087b6:	4408      	add	r0, r1
 80087b8:	6010      	str	r0, [r2, #0]
 80087ba:	e7da      	b.n	8008772 <_free_r+0x22>
 80087bc:	d902      	bls.n	80087c4 <_free_r+0x74>
 80087be:	230c      	movs	r3, #12
 80087c0:	602b      	str	r3, [r5, #0]
 80087c2:	e7d6      	b.n	8008772 <_free_r+0x22>
 80087c4:	6820      	ldr	r0, [r4, #0]
 80087c6:	1821      	adds	r1, r4, r0
 80087c8:	428b      	cmp	r3, r1
 80087ca:	bf04      	itt	eq
 80087cc:	6819      	ldreq	r1, [r3, #0]
 80087ce:	685b      	ldreq	r3, [r3, #4]
 80087d0:	6063      	str	r3, [r4, #4]
 80087d2:	bf04      	itt	eq
 80087d4:	1809      	addeq	r1, r1, r0
 80087d6:	6021      	streq	r1, [r4, #0]
 80087d8:	6054      	str	r4, [r2, #4]
 80087da:	e7ca      	b.n	8008772 <_free_r+0x22>
 80087dc:	bd38      	pop	{r3, r4, r5, pc}
 80087de:	bf00      	nop
 80087e0:	200008d0 	.word	0x200008d0

080087e4 <_init>:
 80087e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087e6:	bf00      	nop
 80087e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ea:	bc08      	pop	{r3}
 80087ec:	469e      	mov	lr, r3
 80087ee:	4770      	bx	lr

080087f0 <_fini>:
 80087f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087f2:	bf00      	nop
 80087f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087f6:	bc08      	pop	{r3}
 80087f8:	469e      	mov	lr, r3
 80087fa:	4770      	bx	lr
